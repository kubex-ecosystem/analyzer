# LookAtni Code Snapshot
# -----------------------
# Data de geração: 2025-09-15T01:34:46.716Z
# Fonte: /srv/apps/LIFE/KUBEX/analyzer
# Hostname: asgard
# Sistema: linux x64 (Debian GNU/Linux 12 (bookworm))
# Kernel: 6.1.0-39-amd64
# Usuário: user
# UID: 1002
# Shell: /usr/bin/zsh
# Total de arquivos: 95
# Tamanho bruto: 0.4 MB
# Gerado por: lookatni@v1.2.0 (via CLI Script)
# Comando usado: tsx generateMarkers.ts generate ./ ./docs/gemx-analyzer-full.lkt.txt --exclude support --exclude bkp --exclude dist --exclude .venv --exclude demo --exclude docs-site --exclude node_modules --exclude *.png --exclude *jpg --exclude *.git --exclude .git --exclude .txt --exclude out --exclude bin --exclude docs --exclude *.md --exclude extension --exclude gemini_production.go
# Hash do snapshot: 8404c255adfe1febe08e...

/// CNAME ///
kubex-ecosystem.github.io

/// LICENSE ///
# MIT License

Copyright (c) 2025 Rafael Mori

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

/// Makefile ///
# Description: Makefile for Analyzer Gateway
# Author: Rafael Mori
# Copyright (c) 2025 Rafael Mori
# License: MIT License

# Define directories and binary names
ROOT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
GATEWAY_BINARY := $(ROOT_DIR)dist/analyzer-gw
DIST_DIR := $(ROOT_DIR)dist

# Define color codes
COLOR_GREEN := \033[32m
COLOR_YELLOW := \033[33m
COLOR_RED := \033[31m
COLOR_BLUE := \033[34m
COLOR_RESET := \033[0m

# Logging Functions
log = @printf "%b%s%b %s\n" "$(COLOR_BLUE)" "[LOG]" "$(COLOR_RESET)" "$(1)"
log_success = @printf "%b%s%b %s\n" "$(COLOR_GREEN)" "[SUCCESS]" "$(COLOR_RESET)" "$(1)"
log_warning = @printf "%b%s%b %s\n" "$(COLOR_YELLOW)" "[WARNING]" "$(COLOR_RESET)" "$(1)"

# Default target
.PHONY: help
help:
	@echo "Available commands:"
	@echo "  build-gw     - Build the gateway binary"
	@echo "  run-gw       - Run the gateway server"
	@echo "  test-gw      - Test the gateway"
	@echo "  clean        - Clean build artifacts"
	@echo "  build-frontend - Build the frontend"

# Create dist directory if it doesn't exist
$(DIST_DIR):
	@mkdir -p $(DIST_DIR)

# Build the gateway binary
.PHONY: build-gw
build-gw: $(DIST_DIR)
	@$(call log,"Building gateway binary...")
	@CGO_ENABLED=0 go build -trimpath -ldflags="-s -w" -o $(GATEWAY_BINARY) ./cmd/gw
	@$(call log_success,"Gateway binary built: $(GATEWAY_BINARY)")

# Run the gateway server
.PHONY: run-gw
run-gw:
	@$(call log,"Starting gateway server...")
	@go run ./cmd/gw

# Test the gateway
.PHONY: test-gw
test-gw:
	@$(call log,"Testing gateway...")
	@chmod +x ./test_gateway.sh
	@./test_gateway.sh

# Clean build artifacts
.PHONY: clean
clean:
	@$(call log,"Cleaning build artifacts...")
	@rm -rf $(DIST_DIR)
	@$(call log_success,"Clean completed")

# Build frontend
.PHONY: build-frontend
build-frontend:
	@$(call log,"Building frontend...")
	@cd frontend && npm run build
	@$(call log_success,"Frontend built")

# Install frontend dependencies
.PHONY: install-frontend
install-frontend:
	@$(call log,"Installing frontend dependencies...")
	@cd frontend && npm install
	@$(call log_success,"Frontend dependencies installed")

# Run frontend in development mode
.PHONY: dev-frontend
dev-frontend:
	@$(call log,"Starting frontend in development mode...")
	@cd frontend && npm run dev

# Run both gateway and frontend in development
.PHONY: dev
dev:
	@$(call log,"Starting development environment...")
	@echo "Starting gateway in background..."
	@go run ./cmd/gw &
	@sleep 2
	@echo "Starting frontend..."
	@cd frontend && npm run dev

# Go module management
.PHONY: tidy
tidy:
	@$(call log,"Tidying Go modules...")
	@go mod tidy
	@$(call log_success,"Go modules tidied")

# Run Go tests
.PHONY: test
test:
	@$(call log,"Running Go tests...")
	@go test ./...
	@$(call log_success,"Tests completed")

# All-in-one build
.PHONY: build-all
build-all: build-gw build-frontend
	@$(call log_success,"All components built")

# Docker build (future)
.PHONY: docker-build
docker-build:
	@$(call log,"Building Docker image...")
	@docker build -t analyzer-gw .
	@$(call log_success,"Docker image built")

.DEFAULT_GOAL := help

/// Makefile.old ///
# Description: Makefile for building and installing a Go application
# Author: Rafael Mori
# Copyright (c) 2025 Rafael Mori
# License: MIT License

# Define the application name and root directory
ROOT_DIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))
TARGET_MANIFEST = $(ROOT_DIR)internal/module/info/manifest.json
APP_NAME := $(shell jq -r '.name' < $(TARGET_MANIFEST))
_RUN_PRE_SCRIPTS := $(shell echo "true")
_RUN_POST_SCRIPTS := $(shell echo "true")

ifeq ($(APP_NAME),)
APP_NAME := $(shell  echo $(basename $(CURDIR)) | tr '[:upper:]' '[:lower:]')
endif
ORGANIZATION := $(shell jq -r '.organization' < $(TARGET_MANIFEST))
ifeq ($(ORGANIZATION),)
ORGANIZATION := $(shell git config --get user.name | tr '[:upper:]' '[:lower:]')
endif
ifeq ($(ORGANIZATION),)
ORGANIZATION := $(shell git config --get user.email | cut -d '@' -f 1 | tr '[:upper:]' '[:lower:]')
endif
ifeq ($(ORGANIZATION),)
ORGANIZATION := $(shell echo $(USER) | tr '[:upper:]' '[:lower:]')
endif
REPOSITORY := $(shell jq -r '.repository' < $(TARGET_MANIFEST))
ifeq ($(REPOSITORY),)
REPOSITORY := $(shell git config --get remote.origin.url)
endif
ifeq ($(REPOSITORY),)
REPOSITORY := $(shell git config --get remote.upstream.url)
endif
ifeq ($(REPOSITORY),)
REPOSITORY := $(printf 'https://github.com/%s/%s.git' $(ORGANIZATION) $(APP_NAME))
endif
DESCRIPTION := $(shell jq -r '.description' < $(TARGET_MANIFEST))
ifeq ($(DESCRIPTION),)
DESCRIPTION := $(shell git log -1 --pretty=%B | head -n 1)
endif
BINARY_NAME := $(shell jq -r '.bin' < $(TARGET_MANIFEST))
ifeq ($(BINARY_NAME),)
BINARY_NAME := $(ROOT_DIR)dist/$(APP_NAME)
else
BINARY_NAME := $(ROOT_DIR)dist/$(BINARY_NAME)
endif
CMD_DIR := $(ROOT_DIR)cmd

# Define the color codes
COLOR_GREEN := \033[32m
COLOR_YELLOW := \033[33m
COLOR_RED := \033[31m
COLOR_BLUE := \033[34m
COLOR_RESET := \033[0m

# Logging Functions
log = @printf "%b%s%b %s\n" "$(COLOR_BLUE)" "[LOG]" "$(COLOR_RESET)" "$(1)"
log_info = @printf "%b%s%b %s\n" "$(COLOR_BLUE)" "[INFO]" "$(COLOR_RESET)" "$(1)"
log_success = @printf "%b%s%b %s\n" "$(COLOR_GREEN)" "[SUCCESS]" "$(COLOR_RESET)" "$(1)"
log_warning = @printf "%b%s%b %s\n" "$(COLOR_YELLOW)" "[WARNING]" "$(COLOR_RESET)" "$(1)"
log_break = @printf "%b%s%b\n" "$(COLOR_BLUE)" "[INFO]" "$(COLOR_RESET)"
log_error = @printf "%b%s%b %s\n" "$(COLOR_RED)" "[ERROR]" "$(COLOR_RESET)" "$(1)"

ARGUMENTS := $(MAKECMDGOALS)
INSTALL_SCRIPT = $(ROOT_DIR)support/main.sh
CMD_STR := $(strip $(firstword $(ARGUMENTS)))
ARGS := $(filter-out $(strip $(CMD_STR)), $(ARGUMENTS))

# Default target: help
.DEFAULT_GOAL := help

# Build the binary using the install script.
build:
	@bash $(INSTALL_SCRIPT) build $(ARGS)
	$(shell exit 0)

build-dev:
	@bash $(INSTALL_SCRIPT) build-dev $(ARGS)
	$(shell exit 0)

# Install the binary and configure the environment.
install:
	@bash $(INSTALL_SCRIPT) install $(ARGS)
	$(shell exit 0)

# Uninstall the binary and clean up.
uninstall:
	@bash $(INSTALL_SCRIPT) uninstall $(ARGS)
	$(shell exit 0)

# Clean up build artifacts.
clean:
	@bash $(INSTALL_SCRIPT) clean $(ARGS)
	$(shell exit 0)

# Run tests.
test:
	@bash $(INSTALL_SCRIPT) test $(ARGS)
	$(shell exit 0)

# Run the gateway server
run-gw:
	@go run ./cmd/gw

# Build the gateway binary
build-gw:
	@CGO_ENABLED=0 go build -trimpath -ldflags="-s -w" -o dist/analyzer-gw ./cmd/gw
	$(call log_success,"Gateway binary built: dist/analyzer-gw")

optimize-images:
	@bash $(INSTALL_SCRIPT) optimize-images $(ARGS)
	$(shell exit 0)

# Platform-specific targets (prevent wildcard capture)
linux:
	@echo "Process finished for platform: linux"

amd64:
	@echo "Process finished for architecture: amd64"

windows:
	@echo "Process finished for platform: windows"

darwin:
	@echo "Process finished for platform: darwin"

arm64:
	@echo "Process finished for architecture: arm64"

armv6l:
	@echo "Process finished for architecture: armv6l"

386:
	@echo "Process finished for architecture: 386"

all:
	@echo "Process finished for all platforms and architectures"

build-docs:
	@echo "Building documentation..."
	@bash $(INSTALL_SCRIPT) build-docs $(ARGS)
	$(shell exit 0)

serve-docs:
	@echo "Starting documentation server..."
	@bash $(INSTALL_SCRIPT) serve-docs $(ARGS)

pub-docs:
	@echo "Publishing documentation..."
	@bash $(INSTALL_SCRIPT) pub-docs $(ARGS)
	$(shell exit 0)

## Run dynamic commands with arguments calling the install script.
%:
	@:
	$(call log_info, Running command: $(CMD_STR))
	$(call log_info, Args: $(ARGS))
	@bash $(INSTALL_SCRIPT) $(CMD_STR) $(ARGS)
	$(shell exit 0)

# Display help message
help:
	$(call log, $(APP_NAME) Build System Help)
	$(call log_break)
	$(call log, Available targets:)
	$(call log,   make build      - Build the binary using install script)
	$(call log,   make install    - Install the binary and configure environment)
	$(call log,   make docs       - Start API documentation server)
	$(call log,   make build-docs - Build documentation server binary)
	$(call log,   make clean      - Clean up build artifacts)
	$(call log,   make test       - Run tests)
	$(call log,   make help       - Display this help message)
	$(call log_break)
	$(call log, Documentation:)
	$(call log,   make docs       - Starts beautiful API documentation at http://localhost:8080/docs)
	$(call log,   ./start-docs.sh - Alternative way to start documentation server)
	$(call log_break)
	$(call log, Usage with arguments:)
	$(call log,   make install ARGS='--custom-arg value' - Pass custom arguments to the install script)
	$(call log_break)
	$(call log, Example:)
	$(call log,   make install ARGS='--prefix /usr/local')
	$(call log_break)
	$(call log, Description:)
	$(call log,   $(DESCRIPTION))
	$(call log_break)
	$(call log, For more information, visit:)
	$(call log,  $(REPOSITORY))
	$(call log_break)
	$(call log_success, End of help message)
	$(shell exit 0)

/// config/providers.yml ///
providers:
  openai:
    type: openai
    base_url: https://api.openai.com
    key_env: OPENAI_API_KEY
    default_model: gpt-4o-mini

  gemini:
    type: gemini
    base_url: https://generativelanguage.googleapis.com
    key_env: GEMINI_API_KEY
    default_model: gemini-2.5-flash

  # Future providers (uncomment when implemented)
  # anthropic:
  #   type: anthropic
  #   base_url: https://api.anthropic.com
  #   key_env: ANTHROPIC_API_KEY
  #   default_model: claude-3-5-sonnet-latest  # groq:
  #   type: groq
  #   base_url: https://api.groq.com
  #   key_env: GROQ_API_KEY
  #   default_model: llama-3.1-70b-versatile

  # openrouter:
  #   type: openrouter
  #   base_url: https://openrouter.ai/api
  #   key_env: OPENROUTER_API_KEY
  #   default_model: google/gemini-flash-1.5

  # ollama:
  #   type: ollama
  #   base_url: http://localhost:11434
  #   key_env: ""
  #   default_model: llama3.1

/// frontend/.env.local ///
GEMINI_API_KEY=PLACEHOLDER_API_KEY

/// frontend/App.tsx ///
import * as React from 'react';

import { Chat } from '@google/genai';
import { useCallback, useMemo, useState } from 'react';

// Contexts & Hooks
import { AppProvider } from './contexts/AppContext';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { ConfirmationProvider } from './contexts/ConfirmationContext';
import { LanguageProvider, useLanguage } from './contexts/LanguageContext';
import { NotificationProvider, useNotification } from './contexts/NotificationContext';
import { usePersistentState } from './hooks/usePersistentState';
import { useTranslation } from './hooks/useTranslation';

// Components
import EvolutionDisplay from './components/analysis/EvolutionDisplay';
import SuggestionsDisplay from './components/analysis/SuggestionsDisplay';
import ChatPanel from './components/chat/ChatPanel';
import ConfirmationModal from './components/common/ConfirmationModal';
import Loader from './components/common/Loader';
import NetworkStatusIndicator from './components/common/NetworkStatusIndicator';
import NotificationContainer from './components/common/NotificationContainer';
import Dashboard from './components/dashboard/Dashboard';
import HistoryPanel from './components/history/HistoryPanel';
import ProjectInput from './components/input/ProjectInput';
import KanbanBoard from './components/kanban/KanbanBoard';
import LandingPage from './components/landing/LandingPage';
import Header from './components/layout/Header';
import NavigationBar from './components/layout/NavigationBar';
import UserSettingsModal from './components/settings/UserSettingsModal';

// Services & Data
import { defaultSettings, defaultUserProfile, initialProjectContext } from './constants';
import { exampleAnalysis, exampleHistory } from './data/exampleAnalysis';
// NEW: Unified AI Service - supports both direct Gemini and Gateway
import { AIProvider, AIService } from './services/unified-ai';

// Types
import {
  AllChatHistories,
  AnalysisType,
  AppSettings,
  ChatMessage,
  EvolutionAnalysis,
  HistoryItem,
  KanbanState,
  ProjectAnalysis,
  ProjectFile,
  UsageTracking,
  UserProfile,
  ViewType
} from './types';

import './index.css';

const createInitialKanbanState = (analysis: ProjectAnalysis): KanbanState => {
  const backlogCards = analysis.improvements.map((imp, index) => ({
    id: `card-${Date.now()}-${index}`,
    title: imp.title,
    description: imp.description,
    priority: imp.priority,
    difficulty: imp.difficulty,
    tags: [imp.priority],
    notes: '',
  }));

  return {
    projectName: analysis.projectName,
    columns: {
      backlog: { id: 'backlog', title: 'Backlog', cards: backlogCards },
      todo: { id: 'todo', title: 'To Do', cards: [] },
      inProgress: { id: 'inProgress', title: 'In Progress', cards: [] },
      done: { id: 'done', title: 'Done', cards: [] },
    },
  };
};

const parseContextToFiles = (context: string): ProjectFile[] => {
  if (!context) return [];
  // This regex captures filenames like "// / file.js / //"
  const fileRegex = /\/\/ \/ (.*?) \/ \/\//g;
  const parts = context.split(fileRegex);

  if (parts.length <= 1) {
    // No file markers found, treat the whole content as a single file
    return [{ id: Date.now(), name: 'project_context.txt', content: context.trim() }];
  }

  const files: ProjectFile[] = [];
  // Start at 1, because split result starts with content before first match
  // Increment by 2 to get pairs of [filename, content]
  for (let i = 1; i < parts.length; i += 2) {
    const name = parts[i].trim();
    const content = parts[i + 1]?.trim() || '';
    if (name) {
      files.push({ id: Date.now() + i, name, content });
    }
  }
  return files;
};

function DashboardWrapper() {
  const [view, setView] = useState<ViewType>(ViewType.Dashboard);
  const [isLoading, setIsLoading] = useState(false);
  const [projectFiles, setProjectFiles] = usePersistentState<ProjectFile[]>('projectFiles', []);
  const [currentAnalysis, setCurrentAnalysis] = useState<ProjectAnalysis | null>(null);
  const [evolutionAnalysis, setEvolutionAnalysis] = useState<EvolutionAnalysis | null>(null);
  const [history, setHistory] = usePersistentState<HistoryItem[]>('analysisHistory', []);
  const [kanbanState, setKanbanState] = usePersistentState<KanbanState | null>('kanbanState', null);
  const [settings, setSettings] = usePersistentState<AppSettings>('appSettings', defaultSettings);
  const [userProfile, setUserProfile] = usePersistentState<UserProfile>('userProfile', defaultUserProfile);
  const [usageTracking, setUsageTracking] = usePersistentState<UsageTracking>('usageTracking', { totalTokens: 0, monthlyTokens: 0 });
  const [isExample, setIsExample] = useState(false);
  const [selectedProject, setSelectedProject] = useState<string | null>(null);

  // AI Provider Selection State - NEW!
  const [aiProvider, setAiProvider] = usePersistentState<AIProvider>('aiProvider', 'gemini-direct');

  // AI Service Instance - NEW!
  const aiService = useMemo(() => new AIService({
    provider: aiProvider,
    userApiKey: settings.userApiKey,
    gatewayUrl: 'http://localhost:8080'
  }), [aiProvider, settings.userApiKey]);

  const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);
  const [isUserSettingsModalOpen, setIsUserSettingsModalOpen] = useState(false);
  const [deletingHistoryId, setDeletingHistoryId] = useState<number | null>(null);

  // Chat State - Updated to support unified interface
  const [chatSession, setChatSession] = useState<Chat | { sendMessage: (message: string) => Promise<string> } | null>(null);
  const [isChatLoading, setIsChatLoading] = useState(false);
  const [currentHistoryId, setCurrentHistoryId] = useState<number | null>(null);
  const [allChatHistories, setAllChatHistories] = usePersistentState<AllChatHistories>('allChatHistories', {});

  const chatHistory = useMemo(() => {
    return currentHistoryId ? allChatHistories[currentHistoryId] || [] : [];
  }, [allChatHistories, currentHistoryId]);

  const projectContext = useMemo(() => {
    if (projectFiles.length === 0) return '';
    return projectFiles
      .map(file => `// / ${file.name} / //\n${file.content}`)
      .join('\n\n---\n\n');
  }, [projectFiles]);

  const setChatHistoryForCurrentId = useCallback((updater: React.SetStateAction<ChatMessage[]>) => {
    if (!currentHistoryId) return;
    setAllChatHistories(prev => {
      const currentMessages = prev[currentHistoryId] || [];
      const newMessages = typeof updater === 'function' ? updater(currentMessages) : updater;
      return {
        ...prev,
        [currentHistoryId]: newMessages,
      };
    });
  }, [currentHistoryId, setAllChatHistories]);


  const { addNotification } = useNotification();
  const { locale } = useLanguage();
  const { t } = useTranslation(['common', 'input', 'example']);

  const handleAnalyze = async (analysisType: AnalysisType) => {
    if (projectFiles.length === 0) {
      addNotification({ message: t('notifications.emptyContext'), type: 'error' });
      return;
    }
    setIsLoading(true);
    try {
      const result = await aiService.analyzeProject(projectContext, analysisType, locale);

      const newId = Date.now();
      const newHistoryItem: HistoryItem = {
        id: newId,
        projectName: result.projectName,
        analysisType: result.analysisType,
        timestamp: new Date().toLocaleString(locale),
        analysis: result,
        projectContext, // The combined string context is saved
      };

      setCurrentAnalysis(result);
      setCurrentHistoryId(newId);

      if (settings.saveHistory) {
        setHistory(prev => [...prev, newHistoryItem]);
      }
      if (result.usageMetadata) {
        setUsageTracking(prev => ({ ...prev, totalTokens: prev.totalTokens + result.usageMetadata!.totalTokenCount }));
      }
      setView(ViewType.Analysis);
      setIsExample(false);

    } catch (error: any) {
      addNotification({ message: error.message, type: 'error' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCompare = async (ids: number[]) => {
    if (ids.length !== 2) {
      addNotification({ message: t('notifications.selectTwo'), type: 'error' });
      return;
    }
    const itemsToCompare = history.filter(h => ids.includes(h.id));
    if (itemsToCompare.length !== 2) return;

    setIsLoading(true);
    setIsHistoryPanelOpen(false);
    try {
      const [item1, item2] = itemsToCompare;
      const result = await aiService.compareAnalyses(item1, item2, locale);
      setEvolutionAnalysis(result);
      if (result.usageMetadata) {
        setUsageTracking(prev => ({ ...prev, totalTokens: prev.totalTokens + result.usageMetadata!.totalTokenCount }));
      }
      setView(ViewType.Evolution);
    } catch (error: any) {
      addNotification({ message: error.message, type: 'error' });
    } finally {
      setIsLoading(false);
    }
  };

  const handleShowExample = () => {
    setProjectFiles(parseContextToFiles(initialProjectContext));
    const example = exampleAnalysis(t as any);
    setCurrentAnalysis(example);
    setHistory(exampleHistory(t as any, locale));
    setKanbanState(createInitialKanbanState(example)); // Also create a kanban for the example
    setIsExample(true);
    setView(ViewType.Analysis);
    addNotification({ message: t('notifications.exampleLoaded'), type: 'info' });
  };

  const handleExitExample = () => {
    setIsExample(false);
    setProjectFiles([]);
    setCurrentAnalysis(null);
    setCurrentHistoryId(null);
    setHistory([]);
    setKanbanState(null);
    setView(ViewType.Input);
  };

  const handleLoadHistoryItem = (item: HistoryItem) => {
    setProjectFiles(parseContextToFiles(item.projectContext));
    setCurrentAnalysis(item.analysis);
    setCurrentHistoryId(item.id);
    setIsHistoryPanelOpen(false);
    setView(ViewType.Analysis);
    setIsExample(false);
    setChatSession(null);
  };

  const handleDeleteHistoryItem = (id: number) => {
    setDeletingHistoryId(id);
    setTimeout(() => {
      setHistory(prev => prev.filter(item => item.id !== id));
      setAllChatHistories(prev => {
        const newHistories = { ...prev };
        delete newHistories[id];
        return newHistories;
      });
      setDeletingHistoryId(null);
    }, 500);
  };

  const handleClearHistory = () => {
    setHistory([]);
    setAllChatHistories({});
  };

  const handleNavigate = (targetView: ViewType | 'history') => {
    if (targetView === 'history') {
      setIsHistoryPanelOpen(true);
    } else if (targetView === ViewType.Chat) {
      if (!currentAnalysis || !currentHistoryId) {
        addNotification({ message: t('notifications.noAnalysisForChat'), type: 'error' });
        return;
      }
      if (!chatSession) {
        const createSystemInstruction = (analysis: ProjectAnalysis): string => {
          const formatImprovements = (improvements: ProjectAnalysis['improvements']) =>
            improvements.map(imp => `- ${imp.title} (Priority: ${imp.priority}, Difficulty: ${imp.difficulty}): ${imp.description}`).join('\n');

          const formatNextSteps = (steps: ProjectAnalysis['nextSteps']['shortTerm']) =>
            steps.map(step => `- ${step.title} (Difficulty: ${step.difficulty}): ${step.description}`).join('\n');

          return `
You are a helpful and knowledgeable project assistant. Your purpose is to answer questions about a specific project analysis that has been performed.

Here is the full context of the project analysis you must use to answer all questions. Do not invent information outside of this context.

**Project Name:** ${analysis.projectName}
**Analysis Type:** ${analysis.analysisType}

**Executive Summary:**
${analysis.summary}

**Key Strengths:**
${analysis.strengths.map(s => `- ${s}`).join('\n')}

**Suggested Improvements:**
${formatImprovements(analysis.improvements)}

**Next Steps:**
  **Short-Term:**
  ${formatNextSteps(analysis.nextSteps.shortTerm)}

  **Long-Term:**
  ${formatNextSteps(analysis.nextSteps.longTerm)}

**Viability Assessment:**
- **Score:** ${analysis.viability.score}/10
- **Assessment:** ${analysis.viability.assessment}

**Return on Investment (ROI) Analysis:**
- **Assessment:** ${analysis.roiAnalysis.assessment}
- **Potential Gains:**
${analysis.roiAnalysis.potentialGains.map(g => `  - ${g}`).join('\n')}
- **Estimated Effort:** ${analysis.roiAnalysis.estimatedEffort}

**Project Maturity:**
- **Level:** ${analysis.maturity.level}
- **Assessment:** ${analysis.maturity.assessment}

Based *only* on the information provided above, please answer the user's questions about the project "${analysis.projectName}". Be concise and direct.
                    `.trim();
        };

        const systemInstruction = createSystemInstruction(currentAnalysis);
        const newChat = aiService.createChatSession(systemInstruction);
        setChatSession(newChat);
      }
      setView(ViewType.Chat);
    } else {
      setView(targetView);
    }
  };

  const handleNavigateToKanban = () => {
    if (currentAnalysis) {
      if (isExample) {
        setView(ViewType.Kanban);
        return;
      }
      // Check if a Kanban for this project already exists
      if (kanbanState && kanbanState.projectName === currentAnalysis.projectName) {
        // If it exists, just navigate to it
        setView(ViewType.Kanban);
      } else {
        // Otherwise, create a new one, replacing any old one
        setKanbanState(createInitialKanbanState(currentAnalysis));
        setView(ViewType.Kanban);
      }
    }
  };

  const handleSendChatMessage = async (message: string) => {
    if (!chatSession || isChatLoading || !currentHistoryId) return;

    const userMessage: ChatMessage = { role: 'user', parts: [{ text: message }] };
    setChatHistoryForCurrentId(prev => [...prev, userMessage]);
    setIsChatLoading(true);

    try {
      // Check if it's the old Gemini Chat with streaming
      if ('sendMessageStream' in chatSession) {
        const stream = await chatSession.sendMessageStream({ message });
        let modelResponse = '';

        // Add an empty placeholder for the model's response
        setChatHistoryForCurrentId(prev => [...prev, { role: 'model', parts: [{ text: '' }] }]);

        for await (const chunk of stream) {
          modelResponse += chunk.text;
          setChatHistoryForCurrentId(prev => {
            const newHistory = [...prev];
            newHistory[newHistory.length - 1] = { role: 'model', parts: [{ text: modelResponse }] };
            return newHistory;
          });
        }
      } else {
        // New unified interface - simple sendMessage
        const response = await chatSession.sendMessage(message);
        setChatHistoryForCurrentId(prev => [...prev, { role: 'model', parts: [{ text: response }] }]);
      }
    } catch (error: any) {
      addNotification({ message: error.message || t('notifications.chatError'), type: 'error' });
      // Remove user message and empty model message on error
      setChatHistoryForCurrentId(prev => prev.slice(0, -2));
    } finally {
      setIsChatLoading(false);
    }
  };

  const renderContent = () => {
    switch (view) {
      case ViewType.Dashboard:
        return <Dashboard
          history={history}
          usageTracking={usageTracking}
          onNavigate={handleNavigate}
          onLoadHistoryItem={handleLoadHistoryItem}
          selectedProject={selectedProject}
          onSelectProject={setSelectedProject}
          isExample={isExample}
          showEmptyState={history.length === 0 && !isExample}
        />;
      case ViewType.Input:
        return <ProjectInput
          files={projectFiles}
          onFilesChange={setProjectFiles}
          onAnalyze={handleAnalyze}
          onShowExample={handleShowExample}
          isLoading={isLoading}
          settings={settings}
          usageTracking={usageTracking}
          isExample={isExample}
          onExitExample={handleExitExample}
          hasRealData={history.length > 0 && !isExample}
        />;
      case ViewType.Analysis:
        if (currentAnalysis) {
          return <SuggestionsDisplay
            analysis={currentAnalysis}
            isExample={isExample}
            history={history}
            onNavigateToKanban={handleNavigateToKanban}
            onExitExample={handleExitExample}
            kanbanState={kanbanState}
          />;
        }
        return null;
      case ViewType.Evolution:
        if (evolutionAnalysis) {
          return <EvolutionDisplay analysis={evolutionAnalysis} onNavigate={setView} />;
        }
        return null;
      case ViewType.Kanban:
        if (kanbanState) {
          return <KanbanBoard initialState={kanbanState} onStateChange={setKanbanState} isExample={isExample} />;
        }
        return null;
      case ViewType.Chat:
        return <ChatPanel
          history={chatHistory}
          isLoading={isChatLoading}
          onSendMessage={handleSendChatMessage}
          projectName={currentAnalysis?.projectName || ''}
        />;
      default:
        return <Dashboard history={history} usageTracking={usageTracking} onNavigate={handleNavigate} onLoadHistoryItem={handleLoadHistoryItem} selectedProject={selectedProject} onSelectProject={setSelectedProject} isExample={isExample} showEmptyState={history.length === 0 && !isExample} />;
    }
  };

  return (
    <div className="bg-gray-900 text-white min-h-screen font-sans selection:bg-purple-500/30">
      <div className="fixed top-0 left-0 w-full h-full bg-grid-gray-700/[0.05] -z-10"></div>
      {isLoading && <Loader />}

      <Header
        onProviderChange={setAiProvider}
        currentProvider={aiProvider}
        onUserMenuClick={() => setIsUserSettingsModalOpen(true)}
        onHistoryClick={() => setIsHistoryPanelOpen(true)}
        historyCount={history.length}
        userProfile={userProfile}
      />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <NavigationBar
          currentView={view}
          onNavigate={handleNavigate as (v: ViewType) => void}
          hasAnalysis={!!currentAnalysis}
          isAnalysisOpen={!currentAnalysis}
        />
        <div className="mt-8">
          {renderContent()}
        </div>
      </main>

      <HistoryPanel
        isOpen={isHistoryPanelOpen}
        onClose={() => setIsHistoryPanelOpen(false)}
        history={history}
        onLoad={handleLoadHistoryItem}
        onDelete={handleDeleteHistoryItem}
        onClear={handleClearHistory}
        onCompare={handleCompare}
        isExampleView={isExample}
        deletingHistoryId={deletingHistoryId}
      />

      <UserSettingsModal
        isOpen={isUserSettingsModalOpen}
        onClose={() => setIsUserSettingsModalOpen(false)}
        settings={settings}
        onSaveSettings={setSettings}
        profile={userProfile}
        onSaveProfile={setUserProfile}
        isExample={isExample}
      />

      <ConfirmationModal />
      <NotificationContainer />
      <NetworkStatusIndicator />
    </div>
  );
}

const App: React.FC = () => (
  <LanguageProvider>
    <NotificationProvider>
      <AuthProvider>
        <ConfirmationProvider>
          <AppProvider>
            <MainApp />
          </AppProvider>
        </ConfirmationProvider>
      </AuthProvider>
    </NotificationProvider>
  </LanguageProvider>
);

const MainApp: React.FC = () => {
  const { user } = useAuth();

  // A little trick to use hooks from LanguageProvider
  const { translations } = useLanguage();

  if (!user) {
    // Render landing page only after essential translations are loaded
    return Object.keys(translations).length > 0 ? <LandingPage /> : null;
  }
  return <DashboardWrapper />;
};

export default App;

/// frontend/components/analysis/EvolutionDisplay.tsx ///
import { motion, Variants } from 'framer-motion';
import { BrainCircuit, Calculator, Check, GitCompareArrows, Lightbulb, Repeat, TrendingDown, TrendingUp } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { AnalysisType, EvolutionAnalysis, Improvement, Priority, ViewType } from '../../types';
import DifficultyMeter from '../common/DifficultyMeter';

interface EvolutionDisplayProps {
  analysis: EvolutionAnalysis;
  onNavigate: (view: ViewType) => void;
}

const ImprovementCard: React.FC<{ improvement: Improvement; type: 'resolved' | 'new' | 'persistent' }> = ({ improvement, type }) => {
  const { t } = useTranslation(['analysis', 'common']);
  const typeConfig = {
    resolved: {
      icon: <Check className="w-5 h-5 text-green-400" />,
      borderColor: 'border-green-700/50',
      bgColor: 'bg-gradient-to-br from-gray-800 to-gray-900/50',
      hoverBorderColor: 'hover:border-green-500/50'
    },
    new: {
      icon: <Lightbulb className="w-5 h-5 text-yellow-400" />,
      borderColor: 'border-yellow-700/50',
      bgColor: 'bg-gradient-to-br from-gray-800 to-gray-900/50',
      hoverBorderColor: 'hover:border-yellow-500/50'
    },
    persistent: {
      icon: <Repeat className="w-5 h-5 text-red-400" />,
      borderColor: 'border-red-700/50',
      bgColor: 'bg-gradient-to-br from-gray-800 to-gray-900/50',
      hoverBorderColor: 'hover:border-red-500/50'
    },
  };

  const config = typeConfig[type];

  return (
    <div className={`p-4 rounded-lg border ${config.bgColor} ${config.borderColor} ${config.hoverBorderColor} transition-all duration-300 hover:scale-[1.02]`}>
      <div className="flex items-start gap-3">
        <div className="shrink-0 mt-1">{config.icon}</div>
        <div>
          <h4 className="font-semibold text-white">{improvement.title}</h4>
          <p className="mt-1 text-sm text-gray-400">{improvement.description}</p>
          <div className="mt-3 flex items-center gap-4 text-xs">
            <DifficultyMeter difficulty={improvement.difficulty} />
            <span className={`px-2 py-0.5 rounded-full font-mono text-xs ${improvement.priority === Priority.High ? 'bg-red-900/80 text-red-300' :
                improvement.priority === Priority.Medium ? 'bg-yellow-900/80 text-yellow-300' :
                  'bg-blue-900/80 text-blue-300'
              }`}>{t(`priority.${improvement.priority}`)}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

const EvolutionDisplay: React.FC<EvolutionDisplayProps> = ({ analysis, onNavigate }) => {
  const { keyMetrics: km } = analysis;
  const { t } = useTranslation(['analysis', 'common', 'input']);

  const typeLabels: Record<AnalysisType, string> = {
    [AnalysisType.General]: t('analysisTypes.GENERAL.label'),
    [AnalysisType.Security]: t('analysisTypes.SECURITY.label'),
    [AnalysisType.Scalability]: t('analysisTypes.SCALABILITY.label'),
    [AnalysisType.CodeQuality]: t('analysisTypes.CODE_QUALITY.label')
  };

  const cardVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: { delay: i * 0.1, duration: 0.5, ease: "easeOut" },
    }),
  };

  const MetricCard: React.FC<{ title: string; previous: number; current: number; custom: number }> = ({ title, previous, current, custom }) => {
    const change = current - previous;
    const isPositiveChange = title === t('evolution.metrics.improvements') ? change < 0 : change > 0;

    return (
      <motion.div variants={cardVariants} custom={custom} className="group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-4 rounded-lg flex flex-col justify-between text-center h-full transition-all duration-300 hover:border-blue-500/50 hover:scale-[1.02]">
        <h4 className="text-sm font-medium text-gray-400">{title}</h4>
        <div className="flex items-baseline justify-center gap-3 my-2">
          <span className="text-xl font-semibold text-gray-500 line-through">{previous}</span>
          <span className="text-4xl font-bold text-white transition-colors duration-300 group-hover:text-blue-300">{current}</span>
        </div>
        <div className="h-6 flex items-center justify-center">
          {change !== 0 && (
            <div className={`flex items-center justify-center gap-1 text-base font-bold ${isPositiveChange ? 'text-green-400' : 'text-red-400'}`}>
              {isPositiveChange ? <TrendingUp className="w-5 h-5" /> : <TrendingDown className="w-5 h-5" />}
              <span>{Math.abs(change)}</span>
            </div>
          )}
        </div>
      </motion.div>
    );
  };

  return (
    <div className="space-y-12">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="text-center">
          <div className="inline-flex items-center justify-center gap-3 text-purple-400">
            <GitCompareArrows className="w-8 h-8 md:w-10 md:h-10" />
            <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-teal-400">
              {t('evolution.title')}
            </h1>
            <BrainCircuit className="w-8 h-8 md:w-10 md:h-10" />
          </div>
          <p className="mt-3 text-lg text-gray-400">
            {t('evolution.subtitle', { projectName: analysis.projectName, analysisType: typeLabels[analysis.analysisType] })}
          </p>
        </div>
      </motion.div>

      {/* Summary and Metrics */}
      <motion.div
        className="grid grid-cols-1 lg:grid-cols-5 gap-8 bg-gray-900/30 p-6 rounded-xl border border-gray-800"
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
      >
        <motion.div
          variants={cardVariants}
          className="lg:col-span-3 bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6"
        >
          <h3 className="text-xl font-semibold text-white mb-3">{t('evolution.summary')}</h3>
          <p className="text-gray-300">{analysis.evolutionSummary}</p>
        </motion.div>
        <div className="lg:col-span-2 space-y-4">
          <MetricCard title={t('evolution.metrics.viabilityScore')} previous={km.previousScore} current={km.currentScore} custom={1} />
          <div className="grid grid-cols-2 gap-4">
            <MetricCard title={t('evolution.metrics.strengths')} previous={km.previousStrengths} current={km.currentStrengths} custom={2} />
            <MetricCard title={t('evolution.metrics.improvements')} previous={km.previousImprovements} current={km.currentImprovements} custom={3} />
          </div>
        </div>
      </motion.div>

      {analysis.usageMetadata && (
        <motion.div
          className="flex items-center justify-center gap-3 text-xs text-gray-400 p-2 bg-gray-800/50 border border-gray-700 rounded-lg max-w-md mx-auto"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.4 }}
          aria-label={t('evolution.usageAriaLabel')}
        >
          <Calculator className="w-4 h-4 text-gray-500 shrink-0" />
          <div className="flex flex-wrap items-center justify-center gap-x-2 gap-y-1">
            <span className="font-semibold">{t('evolution.comparisonCost')}:</span>
            <span>{analysis.usageMetadata.totalTokenCount.toLocaleString(t('localeCode'))} {t('results.usageMetadata.tokens')}</span>
          </div>
        </motion.div>
      )}

      {/* Improvements Breakdown */}
      <motion.div
        className="space-y-8"
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.15 } } }}
      >
        <h3 className="text-2xl font-bold text-center text-gray-200">{t('evolution.breakdown.title')}</h3>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Resolved */}
          <motion.div variants={cardVariants} className="space-y-4">
            <div className="flex items-center gap-3">
              <Check className="w-8 h-8 text-green-400 bg-green-900/50 p-1.5 rounded-full" />
              <h3 className="text-2xl font-semibold text-green-400">{t('evolution.breakdown.achievements')} ({analysis.resolvedImprovements.length})</h3>
            </div>
            {analysis.resolvedImprovements.length > 0 ? (
              analysis.resolvedImprovements.map((imp, i) => <ImprovementCard key={i} improvement={imp} type="resolved" />)
            ) : <p className="text-gray-500 italic p-4 text-center">{t('evolution.breakdown.noResolved')}</p>}
          </motion.div>

          {/* New */}
          <motion.div variants={cardVariants} className="space-y-4">
            <div className="flex items-center gap-3">
              <Lightbulb className="w-8 h-8 text-yellow-400 bg-yellow-900/50 p-1.5 rounded-full" />
              <h3 className="text-2xl font-semibold text-yellow-400">{t('evolution.breakdown.newChallenges')} ({analysis.newImprovements.length})</h3>
            </div>
            {analysis.newImprovements.length > 0 ? (
              analysis.newImprovements.map((imp, i) => <ImprovementCard key={i} improvement={imp} type="new" />)
            ) : <p className="text-gray-500 italic p-4 text-center">{t('evolution.breakdown.noNew')}</p>}
          </motion.div>

          {/* Persistent */}
          <motion.div variants={cardVariants} className="space-y-4">
            <div className="flex items-center gap-3">
              <Repeat className="w-8 h-8 text-red-400 bg-red-900/50 p-1.5 rounded-full" />
              <h3 className="text-2xl font-semibold text-red-400">{t('evolution.breakdown.technicalDebt')} ({analysis.persistentImprovements.length})</h3>
            </div>
            {analysis.persistentImprovements.length > 0 ? (
              analysis.persistentImprovements.map((imp, i) => <ImprovementCard key={i} improvement={imp} type="persistent" />)
            ) : <p className="text-gray-500 italic p-4 text-center">{t('evolution.breakdown.noPersistent')}</p>}
          </motion.div>
        </div>
      </motion.div>
    </div>
  );
};

export default EvolutionDisplay;

/// frontend/components/analysis/SuggestionsDisplay.tsx ///
import { AnimatePresence, motion, Variants } from 'framer-motion';
import { ArrowRight, BarChart, Briefcase, Calculator, CheckCircle, Download, FileText, Info, Lightbulb, LineChart, ListChecks, Star, Target, ThumbsDown, ThumbsUp, TrendingUp, X, Zap } from 'lucide-react';
import * as React from 'react';
import { useMemo, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { useLanguage } from '../../contexts/LanguageContext';
import { useTranslation } from '../../hooks/useTranslation';
import { HistoryItem, KanbanState, Priority, ProjectAnalysis } from '../../types';
import DifficultyMeter from '../common/DifficultyMeter';
import MaturityKpiCard from '../common/MaturityKpiCard';
import Sparkline from '../common/Sparkline';
import ViabilityScore from '../common/ViabilityScore';

interface SuggestionsDisplayProps {
  analysis: ProjectAnalysis;
  isExample: boolean;
  history?: HistoryItem[];
  onNavigateToKanban: () => void;
  onExitExample: () => void;
  kanbanState: KanbanState | null;
}

const cardVariants: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: (i: number) => ({
    opacity: 1,
    y: 0,
    transition: {
      delay: i * 0.1,
      duration: 0.5,
      ease: "easeOut"
    },
  }),
};

// Markdown renderer component with custom styling for dark theme
const Markdown: React.FC<{ children: string }> = ({ children }) => (
  <div className="prose prose-invert prose-sm max-w-none text-gray-400 prose-p:my-2 prose-ul:my-2 prose-ol:my-2 prose-headings:text-white">
    <ReactMarkdown
      children={children}
      remarkPlugins={[remarkGfm]}
      components={{
        ul: ({ node, ...props }) => <ul className="list-disc list-outside space-y-1 ml-4" {...props} />,
        ol: ({ node, ...props }) => <ol className="list-decimal list-outside space-y-1 ml-4" {...props} />,
        code: (props: any) => {
          const { node, inline, className, children, ...rest } = props;
          return !inline ? (
            <pre className="bg-gray-900/50 p-3 rounded-md my-2 overflow-x-auto">
              <code className={`font-mono text-sm ${className}`} {...rest}>
                {children}
              </code>
            </pre>
          ) : (
            <code className="bg-gray-700/50 text-purple-300 font-mono text-sm px-1.5 py-0.5 rounded-md" {...rest}>
              {children}
            </code>
          );
        },
        a: ({ node, ...props }) => <a className="text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer" {...props} />,
      }}
    />
  </div>
);

const getPriorityClass = (priority: Priority) => {
  switch (priority) {
    case Priority.High: return 'bg-red-900/50 border-red-700 text-red-300';
    case Priority.Medium: return 'bg-yellow-900/50 border-yellow-700 text-yellow-300';
    case Priority.Low: return 'bg-blue-900/50 border-blue-700 text-blue-300';
    default: return 'bg-gray-800 border-gray-700 text-gray-300';
  }
};

const getColorForScore = (s: number) => {
  if (s <= 3) return 'rgb(239 68 68)'; // red-500
  if (s <= 6) return 'rgb(245 158 11)'; // amber-500
  return 'rgb(34 197 94)'; // green-500
};

const InfoCard: React.FC<{ icon: React.ReactNode; title: string; children: React.ReactNode; custom: number }> = ({ icon, title, children, custom }) => (
  <motion.div
    className="bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6 backdrop-blur-sm h-full transition-all duration-300 hover:border-blue-500/50 hover:scale-[1.02]"
    variants={cardVariants}
    initial="hidden"
    animate="visible"
    custom={custom}
  >
    <div className="flex items-center gap-3 mb-4">
      {icon}
      <h3 className="text-xl font-semibold text-white">{title}</h3>
    </div>
    <div className="space-y-3 text-gray-400">{children}</div>
  </motion.div>
);

const SuggestionsDisplay: React.FC<SuggestionsDisplayProps> = ({ analysis, isExample, history, onNavigateToKanban, onExitExample, kanbanState }) => {
  const [feedback, setFeedback] = useState<'up' | 'down' | null>(null);
  const { t } = useTranslation(['analysis', 'common']);
  const { locale } = useLanguage();

  const scoreHistory = useMemo(() => {
    if (!history || isExample) return [];
    return history
      .filter(item =>
        item.projectName === analysis.projectName &&
        item.analysisType === analysis.analysisType
      )
      .sort((a, b) => a.id - b.id)
      .map(item => item.analysis.viability.score);
  }, [history, analysis, isExample]);

  const kanbanForProjectExists = !isExample && kanbanState?.projectName === analysis.projectName;

  const handleFeedback = (vote: 'up' | 'down') => {
    setFeedback(vote);
    try {
      const feedbackCounts = JSON.parse(localStorage.getItem('analysisFeedback') || '{"up": 0, "down": 0}');
      feedbackCounts[vote]++;
      localStorage.setItem('analysisFeedback', JSON.stringify(feedbackCounts));
    } catch (error) {
      console.error("Failed to save feedback to localStorage:", error);
    }
  };

  const handleExportJson = () => {
    if (!analysis) return;
    const jsonString = JSON.stringify(analysis, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis_${analysis.projectName.toLowerCase().replace(/\s+/g, '_')}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleExportLog = () => {
    if (!analysis) return;

    const sections: string[] = [];
    sections.push(`${t('export.logContent.mainTitle')}: ${analysis.projectName}`);
    sections.push('=================================================');
    sections.push('');

    sections.push(t('results.summary.title'));
    sections.push('-------');
    sections.push(analysis.summary);
    sections.push('');

    sections.push(t('results.viability.title'));
    sections.push('----------------------');
    sections.push(`${t('results.viability.scoreLabel')}: ${analysis.viability.score}/10`);
    sections.push(`${t('results.viability.assessmentLabel')}: ${analysis.viability.assessment}`);
    sections.push('');

    sections.push(t('results.roi.title'));
    sections.push('----------------');
    sections.push(`${t('results.roi.assessmentLabel')}: ${analysis.roiAnalysis.assessment}`);
    sections.push(`${t('results.roi.effortLabel')}: ${t(`effort.${analysis.roiAnalysis.estimatedEffort}`)}`);
    sections.push(t('results.roi.gainsLabel'));
    analysis.roiAnalysis.potentialGains.forEach(g => sections.push(`- ${g}`));
    sections.push('');

    sections.push(t('results.strengths.title'));
    sections.push('-------------');
    analysis.strengths.forEach(s => sections.push(`- ${s}`));
    sections.push('');

    sections.push(t('results.improvements.title'));
    sections.push('------------------');
    analysis.improvements.forEach(i => {
      sections.push(`${i.title} (${t('common.priority')}: ${t(`priority.${i.priority}`)}, ${t('common.difficulty')}: ${t(`difficulty.${i.difficulty}`)})`);
      sections.push(`  ${t('results.improvements.businessImpact')}: ${i.businessImpact}`);
      sections.push(`  ${t('common.description')}: ${i.description}`);
      sections.push('');
    });

    sections.push(t('results.nextSteps.title'));
    sections.push('---------------');
    sections.push(`${t('results.nextSteps.shortTerm')}:`);
    analysis.nextSteps.shortTerm.forEach(step => sections.push(`- ${step.title} (${t('common.difficulty')}: ${t(`difficulty.${step.difficulty}`)}): ${step.description}`));
    sections.push('');
    sections.push(`${t('results.nextSteps.longTerm')}:`);
    analysis.nextSteps.longTerm.forEach(step => sections.push(`- ${step.title} (${t('common.difficulty')}: ${t(`difficulty.${step.difficulty}`)}): ${step.description}`));

    const logContent = sections.join('\n');
    const blob = new Blob([logContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis_${analysis.projectName.toLowerCase().replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportButtonClass = "flex items-center shrink-0 gap-2 px-4 py-2 bg-gray-700/50 text-gray-300 border border-gray-600 rounded-lg font-medium hover:bg-gray-700 transition-colors duration-200";

  return (
    <AnimatePresence>
      <div className="mt-12">
        {isExample && (
          <motion.div
            className="mb-8 p-4 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-lg flex items-center justify-between gap-3"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <div className="flex items-center gap-3">
              <Info className="w-5 h-5 shrink-0" />
              <p className="text-sm font-medium">{t('results.exampleModeNotice')}</p>
            </div>
            <button
              onClick={onExitExample}
              className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-purple-200 bg-purple-800/50 border border-purple-600 rounded-md hover:bg-purple-700/50 transition-colors"
            >
              <X className="w-3.5 h-3.5" />
              {t('actions.exitExample')}
            </button>
          </motion.div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
          {/* Header: Project Name, Summary, Exports */}
          <motion.div
            className="lg:col-span-2 p-6 bg-gray-900/30 rounded-xl border border-gray-800 flex flex-col"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
              {t('results.title', { projectName: analysis.projectName })}
            </h2>
            <div className="mt-2 text-gray-400 max-w-3xl"><Markdown>{analysis.summary}</Markdown></div>
            <div className="flex flex-wrap items-center gap-3 mt-auto pt-4">
              <button
                onClick={onNavigateToKanban}
                className="group relative inline-flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-teal-500 text-white rounded-lg font-semibold hover:shadow-2xl hover:shadow-purple-500/20 hover:scale-105 transition-all duration-300"
              >
                <ListChecks className="w-5 h-5 transition-transform duration-300 group-hover:rotate-6" />
                {kanbanForProjectExists ? t('actions.viewKanbanBoard') : t('actions.createKanbanBoard')}
              </button>
              <button onClick={handleExportJson} className={exportButtonClass} aria-label={t('export.jsonAriaLabel')}>
                <Download className="w-4 h-4" />
                <span>{t('export.json')}</span>
              </button>
              <button onClick={handleExportLog} className={exportButtonClass} aria-label={t('export.logAriaLabel')}>
                <FileText className="w-4 h-4" />
                <span>{t('export.log')}</span>
              </button>
              {analysis.usageMetadata && (
                <motion.div
                  className="group relative flex items-center gap-3 text-xs text-gray-400 p-2 pr-3 bg-gradient-to-r from-gray-800 to-gray-900/50 border border-gray-700 rounded-lg transition-all duration-300 hover:border-blue-500/50 hover:shadow-lg hover:shadow-blue-500/10"
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: 0.1 }}
                  aria-label={t('results.usageMetadata.ariaLabel')}
                >
                  <div className="absolute -inset-px rounded-lg bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-md" aria-hidden="true"></div>
                  <Calculator className="w-4 h-4 text-gray-500 shrink-0" />
                  <div className="flex flex-wrap items-center gap-x-3 gap-y-1 z-10">
                    <span><strong>{t('results.usageMetadata.total')}:</strong> {analysis.usageMetadata.totalTokenCount.toLocaleString(locale)} {t('results.usageMetadata.tokens')}</span>
                  </div>
                </motion.div>
              )}
            </div>
          </motion.div>

          {analysis.maturity && (
            <MaturityKpiCard maturity={analysis.maturity} />
          )}
        </div>


        {/* Main Analysis Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">

          <InfoCard icon={<BarChart className="w-6 h-6 text-blue-400" />} title={t('results.viability.title')} custom={1}>
            <div className="flex flex-col items-center text-center">
              <ViabilityScore score={analysis.viability.score} />
              {scoreHistory.length > 1 && (
                <div className="mt-4 w-full">
                  <p className="text-xs text-gray-500 mb-1">{t('results.viability.scoreEvolution')}</p>
                  <div className="flex justify-center">
                    <Sparkline
                      data={scoreHistory}
                      width={120}
                      height={25}
                      stroke={getColorForScore(analysis.viability.score)}
                    />
                  </div>
                </div>
              )}
              <div className="mt-4 text-sm"><Markdown>{analysis.viability.assessment}</Markdown></div>
            </div>
          </InfoCard>

          <InfoCard icon={<LineChart className="w-6 h-6 text-teal-400" />} title={t('results.roi.title')} custom={2}>
            <div className="text-sm italic">"<Markdown>{analysis.roiAnalysis.assessment}</Markdown>"</div>
            <div className="mt-4 space-y-2">
              <div>
                <h4 className="font-semibold text-teal-300 mb-1">{t('results.roi.gainsLabel')}</h4>
                <ul className="list-inside space-y-1">
                  {analysis.roiAnalysis.potentialGains.map((gain, i) => (
                    <li key={i} className="flex items-start gap-2 text-sm">
                      <Target className="w-4 h-4 text-teal-500 mt-0.5 shrink-0" />
                      <span><Markdown>{gain}</Markdown></span>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-teal-300">{t('results.roi.effortLabel')}</h4>
                <p className="text-sm">{t(`effort.${analysis.roiAnalysis.estimatedEffort}`)}</p>
              </div>
            </div>
          </InfoCard>

          <InfoCard icon={<CheckCircle className="w-6 h-6 text-green-400" />} title={t('results.strengths.title')} custom={3}>
            <ul className="list-inside space-y-2">
              {analysis.strengths.map((strength, i) => (
                <li key={i} className="flex items-start gap-2">
                  <Star className="w-4 h-4 text-green-500 mt-1 flex-shrink-0" />
                  <span><Markdown>{strength}</Markdown></span>
                </li>
              ))}
            </ul>
          </InfoCard>

          <div className="lg:col-span-2">
            <InfoCard icon={<Lightbulb className="w-6 h-6 text-yellow-400" />} title={t('results.improvements.title')} custom={4}>
              <div className="space-y-4">
                {analysis.improvements.map((item, i) => (
                  <div key={i} className={`p-4 rounded-lg border ${getPriorityClass(item.priority)}`}>
                    <div className="flex justify-between items-start">
                      <h4 className="font-semibold text-white">{item.title}</h4>
                      <div className="flex flex-col items-end gap-1 shrink-0 ml-2">
                        <span className="text-xs font-mono px-2 py-1 rounded-full">{t(`priority.${item.priority}`)}</span>
                      </div>
                    </div>
                    <div className="mt-1 text-sm"><Markdown>{item.description}</Markdown></div>
                    <div className="mt-3 pt-3 border-t border-white/10 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                      <DifficultyMeter difficulty={item.difficulty} />
                      <div className="flex items-center gap-1.5 text-xs text-gray-300">
                        <Briefcase className="w-3.5 h-3.5 text-teal-400" />
                        <span className="font-medium">{t('results.improvements.impact')}:</span>
                        <span><Markdown>{item.businessImpact}</Markdown></span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </InfoCard>
          </div>

          <div className="lg:col-span-1">
            <InfoCard icon={<TrendingUp className="w-6 h-6 text-purple-400" />} title={t('results.nextSteps.title')} custom={5}>
              <div>
                <h4 className="font-semibold text-purple-300 mb-2">{t('results.nextSteps.shortTerm')}</h4>
                <ul className="space-y-3">
                  {analysis.nextSteps.shortTerm.map((step, i) => (
                    <li key={i} className="flex flex-col items-start gap-1 text-sm">
                      <div className="flex items-center gap-2">
                        <Zap className="w-4 h-4 text-purple-400 flex-shrink-0" />
                        <strong>{step.title}</strong>
                      </div>
                      <div className="pl-6">
                        <div><Markdown>{step.description}</Markdown></div>
                        <div className="mt-1"><DifficultyMeter difficulty={step.difficulty} /></div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-4 pt-4 border-t border-gray-700">
                <h4 className="font-semibold text-purple-300 mb-2">{t('results.nextSteps.longTerm')}</h4>
                <ul className="space-y-3">
                  {analysis.nextSteps.longTerm.map((step, i) => (
                    <li key={i} className="flex flex-col items-start gap-1 text-sm">
                      <div className="flex items-center gap-2">
                        <ArrowRight className="w-4 h-4 text-purple-400 flex-shrink-0" />
                        <strong>{step.title}</strong>
                      </div>
                      <div className="pl-6">
                        <div><Markdown>{step.description}</Markdown></div>
                        <div className="mt-1"><DifficultyMeter difficulty={step.difficulty} /></div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </InfoCard>
          </div>
        </div>

        {/* Feedback Section */}
        <motion.div
          className="mt-12 text-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5, duration: 0.5 }}
        >
          <AnimatePresence mode="wait">
            {!feedback ? (
              <motion.div
                key="feedback-question"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
              >
                <h4 className="text-lg font-medium text-gray-300">{t('feedback.question')}</h4>
                <div className="mt-4 flex justify-center gap-4">
                  <button
                    onClick={() => handleFeedback('up')}
                    className="p-3 bg-gray-700/50 border border-gray-600 rounded-full text-gray-400 hover:text-green-400 hover:border-green-500 transition-colors duration-200"
                    aria-label={t('feedback.useful')}
                  >
                    <ThumbsUp className="w-6 h-6" />
                  </button>
                  <button
                    onClick={() => handleFeedback('down')}
                    className="p-3 bg-gray-700/50 border border-gray-600 rounded-full text-gray-400 hover:text-red-400 hover:border-red-500 transition-colors duration-200"
                    aria-label={t('feedback.notUseful')}
                  >
                    <ThumbsDown className="w-6 h-6" />
                  </button>
                </div>
              </motion.div>
            ) : (
              <motion.div
                key="feedback-thanks"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="flex items-center justify-center gap-2 text-green-400"
              >
                <CheckCircle className="w-6 h-6" />
                <p className="text-lg font-medium">{t('feedback.thanks')}</p>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </div>
    </AnimatePresence>
  );
};

export default SuggestionsDisplay;

/// frontend/components/chat/ChatPanel.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { Bot, Loader2, Send, User } from 'lucide-react';
import * as React from 'react';
import { useEffect, useRef, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { useTranslation } from '../../hooks/useTranslation';
import { ChatMessage } from '../../types';

interface ChatPanelProps {
  history: ChatMessage[];
  isLoading: boolean;
  onSendMessage: (message: string) => void;
  projectName: string;
}

const ChatPanel: React.FC<ChatPanelProps> = ({ history, isLoading, onSendMessage, projectName }) => {
  const { t } = useTranslation(['chat', 'common']);
  const [input, setInput] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [history, isLoading]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim() && !isLoading) {
      onSendMessage(input.trim());
      setInput('');
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="bg-gray-800/50 border border-gray-700 rounded-xl flex flex-col h-[70vh]"
    >
      <div className="p-4 border-b border-gray-700">
        <h2 className="text-xl font-semibold text-white">{t('chat:title')}</h2>
        <p className="text-sm text-gray-400">{t('chat:subtitle', { projectName })}</p>
      </div>
      <div className="flex-grow p-4 overflow-y-auto space-y-6">
        {history.map((msg, index) => (
          <div key={index} className={`flex items-start gap-3 ${msg.role === 'user' ? 'justify-end' : ''}`}>
            {msg.role === 'model' && (
              <div className="w-8 h-8 rounded-full bg-purple-900/50 flex items-center justify-center shrink-0">
                <Bot className="w-5 h-5 text-purple-400" />
              </div>
            )}
            <div className={`max-w-xl p-3 rounded-lg ${msg.role === 'user' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300'}`}>
              <div className="prose prose-invert prose-sm max-w-none text-gray-300 prose-p:my-2 prose-ul:my-2 prose-ol:my-2 prose-headings:text-white">
                <ReactMarkdown remarkPlugins={[remarkGfm]}>
                  {msg.parts[0].text}
                </ReactMarkdown>
              </div>
            </div>
            {msg.role === 'user' && (
              <div className="w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center shrink-0">
                <User className="w-5 h-5 text-gray-300" />
              </div>
            )}
          </div>
        ))}
        <AnimatePresence>
          {isLoading && (!history.length || history[history.length - 1]?.role === 'user') && (
            <motion.div
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              className="flex items-start gap-3"
            >
              <div className="w-8 h-8 rounded-full bg-purple-900/50 flex items-center justify-center shrink-0">
                <Bot className="w-5 h-5 text-purple-400" />
              </div>
              <div className="max-w-xl p-3 rounded-lg bg-gray-700 flex items-center gap-2">
                <Loader2 className="w-4 h-4 animate-spin text-gray-400" />
                <span className="text-sm text-gray-400 italic">{t('chat:thinking')}</span>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
        <div ref={messagesEndRef} />
      </div>
      <div className="p-4 border-t border-gray-700">
        <form onSubmit={handleSubmit} className="flex items-center gap-3">
          <textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSubmit(e);
              }
            }}
            placeholder={t('chat:placeholder')}
            disabled={isLoading}
            rows={1}
            className="w-full p-2 bg-gray-900 border border-gray-600 rounded-md resize-none focus:ring-2 focus:ring-purple-500 focus:border-transparent disabled:opacity-60"
          />
          <button title={t('chat:send')} type="submit" disabled={isLoading || !input.trim()} className="p-3 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed">
            <Send className="w-5 h-5" />
          </button>
        </form>
      </div>
    </motion.div>
  );
};

export default ChatPanel;

/// frontend/components/common/ConfirmationModal.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { AlertTriangle } from 'lucide-react';
import * as React from 'react';
import { useConfirmation } from '../../contexts/ConfirmationContext';
import { useTranslation } from '../../hooks/useTranslation';

const ConfirmationModal: React.FC = () => {
  const { isOpen, options, hideConfirmation } = useConfirmation();
  const { t } = useTranslation('common');

  if (!options) return null;

  const handleConfirm = () => {
    options.onConfirm();
    hideConfirmation();
  };

  const handleCancel = () => {
    if (options.onCancel) {
      options.onCancel();
    }
    hideConfirmation();
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={handleCancel}
          className="fixed inset-0 bg-black/70 backdrop-blur-sm z-[100] flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 25 }}
            onClick={(e) => e.stopPropagation()}
            className="bg-gray-900 border border-red-700/80 rounded-xl w-full max-w-md flex flex-col shadow-2xl"
          >
            {/* Content */}
            <div className="p-6 text-center">
              <AlertTriangle className="w-12 h-12 text-red-500 mx-auto" />
              <h2 className="mt-4 text-xl font-bold text-white">{options.title}</h2>
              <p className="mt-2 text-sm text-gray-400">{options.message}</p>
            </div>

            {/* Footer */}
            <div className="p-4 bg-gray-800/50 border-t border-gray-700 flex justify-end gap-3">
              <button onClick={handleCancel} className="px-4 py-2 text-sm font-semibold text-gray-300 bg-gray-700 rounded-md hover:bg-gray-600">
                {options.cancelText || t('common.cancel')}
              </button>
              <button onClick={handleConfirm} className="px-4 py-2 text-sm font-semibold text-white bg-red-600 rounded-md hover:bg-red-700">
                {options.confirmText || t('common.confirm')}
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ConfirmationModal;

/// frontend/components/common/DifficultyMeter.tsx ///
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { Difficulty } from '../../types';

interface DifficultyMeterProps {
  difficulty: Difficulty;
}

const DifficultyMeter: React.FC<DifficultyMeterProps> = ({ difficulty }) => {
  const { t } = useTranslation('common');

  const config: Record<Difficulty, { colorClass: string; activeBars: number }> = {
    [Difficulty.Low]: { colorClass: 'bg-green-500', activeBars: 1 },
    [Difficulty.Medium]: { colorClass: 'bg-yellow-500', activeBars: 2 },
    [Difficulty.High]: { colorClass: 'bg-red-500', activeBars: 3 },
  };

  const { colorClass, activeBars } = config[difficulty];
  const label = t(`difficulty.${difficulty}`);

  return (
    <div className="flex items-center gap-2 text-xs text-gray-300">
      <span className="font-medium">{t('common.difficulty')}:</span>
      <div className="flex items-center gap-1" title={`${t('common.difficulty')}: ${label}`}>
        {[...Array(3)].map((_, i) => (
          <div
            key={i}
            className={`w-4 h-2 rounded-full transition-colors ${i < activeBars ? colorClass : 'bg-gray-600'}`}
          />
        ))}
      </div>
      <span className="w-10 text-left">{label}</span>
    </div>
  );
};

export default DifficultyMeter;

/// frontend/components/common/Loader.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from '../../hooks/useTranslation';

const Loader: React.FC = () => {
  const { t, isLoading } = useTranslation('common');
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);

  const loadingSteps: string[] = !isLoading ? (t('loader.steps') as any || []) : [];

  useEffect(() => {
    if (loadingSteps.length > 0) {
      const interval = setInterval(() => {
        setCurrentMessageIndex(prevIndex => (prevIndex + 1) % loadingSteps.length);
      }, 2500); // Change message every 2.5 seconds

      return () => clearInterval(interval);
    }
  }, [loadingSteps.length]);

  if (isLoading) return null; // Or a minimal spinner

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/80 backdrop-blur-sm"
      aria-label={t('loader.ariaLabel')}
    >
      <div className="relative h-16 w-16">
        <div className="absolute h-full w-full rounded-full border-4 border-t-blue-500 border-gray-700 animate-spin"></div>
        <div className="absolute h-full w-full rounded-full border-4 border-t-purple-500 border-gray-700 animate-spin [animation-delay:-0.2s]"></div>
      </div>
      <div className="mt-4 text-center h-12">
        <AnimatePresence mode="wait">
          <motion.p
            key={currentMessageIndex}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.4, ease: 'easeInOut' }}
            className="text-lg font-medium text-gray-400"
          >
            {loadingSteps[currentMessageIndex] || t('loader.message')}
          </motion.p>
        </AnimatePresence>
      </div>
      <p className="text-sm text-gray-500">{t('loader.subMessage')}</p>
    </motion.div>
  );
};

export default Loader;

/// frontend/components/common/MaturityKpiCard.tsx ///
import { motion } from 'framer-motion';
import { Rocket } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { MaturityLevel, ProjectMaturity } from '../../types';

interface MaturityKpiCardProps {
  maturity: ProjectMaturity;
}

const maturityConfig: Record<MaturityLevel, { labelKey: string; color: string; width: string }> = {
  [MaturityLevel.Prototype]: { labelKey: 'maturityLevels.PROTOTYPE', color: 'bg-red-500', width: '25%' },
  [MaturityLevel.MVP]: { labelKey: 'maturityLevels.MVP', color: 'bg-yellow-500', width: '50%' },
  [MaturityLevel.Production]: { labelKey: 'maturityLevels.PRODUCTION', color: 'bg-green-500', width: '75%' },
  [MaturityLevel.Optimized]: { labelKey: 'maturityLevels.OPTIMIZED', color: 'bg-blue-500', width: '100%' },
};

const MaturityKpiCard: React.FC<MaturityKpiCardProps> = ({ maturity }) => {
  const { t } = useTranslation(['analysis', 'common']);
  const config = maturityConfig[maturity.level];

  if (!config) {
    console.warn(`Unknown maturity level: ${maturity.level}`);
    return null;
  }

  return (
    <motion.div
      className="bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6 backdrop-blur-sm h-full transition-all duration-300 hover:border-purple-500/50 hover:scale-[1.02] flex flex-col justify-between"
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: 0.1, duration: 0.5 }}
    >
      <div>
        <div className="flex items-center gap-3 mb-4">
          <Rocket className="w-6 h-6 text-purple-400" />
          <h3 className="text-xl font-semibold text-white">{t('results.maturity.title')}</h3>
        </div>
        <p className="text-sm text-gray-400 italic">"{maturity.assessment}"</p>
      </div>

      <div className="mt-4">
        <div className="relative w-full bg-gray-700 rounded-full h-2.5">
          <motion.div
            className={`h-2.5 rounded-full ${config.color}`}
            initial={{ width: '0%' }}
            animate={{ width: config.width }}
            transition={{ duration: 1, ease: 'easeOut', delay: 0.5 }}
          />
        </div>
        <div className="flex justify-between text-xs text-gray-500 mt-1.5 px-1">
          <span>{t('maturityLevels.PROTOTYPE')}</span>
          <span>{t('maturityLevels.MVP')}</span>
          <span>{t('maturityLevels.PRODUCTION')}</span>
          <span>{t('maturityLevels.OPTIMIZED')}</span>
        </div>
        <div className="text-center mt-2">
          <span className={`text-lg font-bold ${config.color.replace('bg-', 'text-')}`}>
            {t(config.labelKey)}
          </span>
        </div>
      </div>
    </motion.div>
  );
};

export default MaturityKpiCard;

/// frontend/components/common/NetworkStatusIndicator.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { Wifi, WifiOff } from 'lucide-react';
import * as React from 'react';
import { useNetworkStatus } from '../../hooks/useNetworkStatus';
import { useTranslation } from '../../hooks/useTranslation';

const NetworkStatusIndicator: React.FC = () => {
  const isOnline = useNetworkStatus();
  const { t } = useTranslation('common');

  return (
    <div className="fixed bottom-4 left-4 z-[100]">
      <AnimatePresence mode="wait">
        {isOnline ? (
          <motion.div
            key="online"
            initial={{ opacity: 0, scale: 0.5 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.5 }}
            transition={{ type: 'spring', stiffness: 300, damping: 20 }}
            className="group flex items-center gap-2 h-10 px-3 bg-green-900/80 border border-green-700 text-green-300 rounded-full shadow-lg backdrop-blur-md cursor-default"
          >
            <Wifi className="w-5 h-5 flex-shrink-0" />
            <div className="w-0 group-hover:w-[55px] transition-all duration-300 ease-in-out overflow-hidden">
              <span className="text-sm font-medium whitespace-nowrap">{t('network.online')}</span>
            </div>
          </motion.div>
        ) : (
          <motion.div
            key="offline"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 10 }}
            className="p-3 bg-red-900/80 border border-red-700 text-red-300 rounded-lg flex items-center gap-3 shadow-lg backdrop-blur-md"
          >
            <WifiOff className="w-5 h-5" />
            <span className="text-sm font-medium">{t('network.offline')}</span>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default NetworkStatusIndicator;

/// frontend/components/common/NotificationContainer.tsx ///
import { AnimatePresence } from 'framer-motion';
import * as React from 'react';
import { useNotification } from '../../contexts/NotificationContext';
import NotificationToast from './NotificationToast';

const NotificationContainer: React.FC = () => {
  const { notifications, removeNotification } = useNotification();

  return (
    <div className="fixed bottom-4 right-4 z-[100] w-full max-w-sm space-y-3">
      <AnimatePresence>
        {notifications.map(notification => (
          <NotificationToast
            key={notification.id}
            notification={notification}
            onDismiss={() => removeNotification(notification.id)}
          />
        ))}
      </AnimatePresence>
    </div>
  );
};

export default NotificationContainer;

/// frontend/components/common/NotificationToast.tsx ///
import React, { useEffect } from 'react';
import { motion } from 'framer-motion';
import { CheckCircle, AlertTriangle, Info, X } from 'lucide-react';
import { Notification, NotificationType } from '../../types';

interface NotificationToastProps {
  notification: Notification;
  onDismiss: () => void;
}

const icons: Record<NotificationType, React.ElementType> = {
  success: CheckCircle,
  error: AlertTriangle,
  info: Info,
};

const theme: Record<NotificationType, { bg: string; border: string; icon: string }> = {
  success: {
    bg: 'bg-green-900/50',
    border: 'border-green-700',
    icon: 'text-green-400',
  },
  error: {
    bg: 'bg-red-900/50',
    border: 'border-red-700',
    icon: 'text-red-400',
  },
  info: {
    bg: 'bg-blue-900/50',
    border: 'border-blue-700',
    icon: 'text-blue-400',
  },
};

const NotificationToast: React.FC<NotificationToastProps> = ({ notification, onDismiss }) => {
  const { message, type, duration = 5000 } = notification;

  useEffect(() => {
    const timer = setTimeout(() => {
      onDismiss();
    }, duration);

    return () => clearTimeout(timer);
  }, [notification, duration, onDismiss]);

  const Icon = icons[type];
  const colors = theme[type];

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 50, scale: 0.5 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: 20, scale: 0.8 }}
      transition={{ type: 'spring', stiffness: 300, damping: 25 }}
      className={`p-4 w-full ${colors.bg} border ${colors.border} rounded-xl shadow-lg flex items-start gap-3 backdrop-blur-md`}
    >
      <div className={`shrink-0 ${colors.icon}`}>
        <Icon className="w-6 h-6" />
      </div>
      <div className="flex-grow text-sm text-gray-200">
        <p>{message}</p>
      </div>
      <button
        onClick={onDismiss}
        className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors"
        aria-label="Dismiss notification"
      >
        <X className="w-4 h-4" />
      </button>
    </motion.div>
  );
};

export default NotificationToast;

/// frontend/components/common/Sparkline.tsx ///
import * as React from 'react';

interface SparklineProps {
  data: number[];
  width?: number;
  height?: number;
  stroke?: string;
  strokeWidth?: number;
  className?: string;
}

const Sparkline: React.FC<SparklineProps> = ({
  data,
  width = 80,
  height = 20,
  stroke = "currentColor",
  strokeWidth = 1.5,
  className = "",
}) => {
  if (!data || data.length < 2) {
    return <div style={{ width, height }} className="flex items-center justify-center text-xs text-gray-600">--</div>;
  }

  const min = Math.min(...data);
  const max = Math.max(...data);
  // Handle case where all data points are the same
  const range = max - min === 0 ? 1 : max - min;

  const points = data
    .map((d, i) => {
      const x = (i / (data.length - 1)) * width;
      // If range is 1 (all points same), put line in middle
      const y = height - ((d - min) / range) * height;
      return `${x.toFixed(2)},${y.toFixed(2)}`;
    })
    .join(' ');

  return (
    <svg
      width={width}
      height={height}
      viewBox={`0 0 ${width} ${height}`}
      className={className}
      preserveAspectRatio="none"
    >
      <polyline
        points={points}
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export default Sparkline;

/// frontend/components/common/SubtleTokenUsage.tsx ///
import { motion } from 'framer-motion';
import * as React from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import { useTranslation } from '../../hooks/useTranslation';

interface SubtleTokenUsageProps {
  limit: number;
  consumed: number;
}

const SubtleTokenUsage: React.FC<SubtleTokenUsageProps> = ({ limit, consumed }) => {
  const { t } = useTranslation('common');
  const { locale } = useLanguage();

  if (limit <= 0) {
    return null; // Don't show if there's no limit
  }

  const percentage = Math.round((consumed / limit) * 100);

  let progressBarColor = 'bg-green-500';
  if (percentage >= 90) {
    progressBarColor = 'bg-red-500';
  } else if (percentage >= 70) {
    progressBarColor = 'bg-yellow-500';
  }

  return (
    <div className="w-full text-xs text-gray-400">
      <div className="flex justify-between mb-1">
        <span>{t('tokenUsage.monthlyUsage')}</span>
        <span>{`${consumed.toLocaleString(locale)} / ${limit.toLocaleString(locale)}`}</span>
      </div>
      <div className="w-full bg-gray-700 rounded-full h-1.5">
        <motion.div
          className={`h-1.5 rounded-full ${progressBarColor}`}
          initial={{ width: '0%' }}
          animate={{ width: `${Math.min(percentage, 100)}%` }}
          transition={{ duration: 0.5, ease: 'easeOut' }}
        />
      </div>
    </div>
  );
};

export default SubtleTokenUsage;

/// frontend/components/common/TokenUsageAlert.tsx ///
import { motion } from 'framer-motion';
import { AlertTriangle } from 'lucide-react';
import * as React from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import { useTranslation } from '../../hooks/useTranslation';

interface TokenUsageAlertProps {
  limit: number;
  consumed: number;
}

const TokenUsageAlert: React.FC<TokenUsageAlertProps> = ({ limit, consumed }) => {
  const { t } = useTranslation('common');
  const { locale } = useLanguage();

  if (limit <= 0) {
    return null;
  }

  const percentage = Math.round((consumed / limit) * 100);

  let progressBarColor = 'bg-green-500';
  let textColor = 'text-green-300';
  let borderColor = 'border-green-700/50';
  let bgColor = 'bg-green-900/20';

  if (percentage >= 90) {
    progressBarColor = 'bg-red-500';
    textColor = 'text-red-300';
    borderColor = 'border-red-700/50';
    bgColor = 'bg-red-900/20';
  } else if (percentage >= 70) {
    progressBarColor = 'bg-yellow-500';
    textColor = 'text-yellow-300';
    borderColor = 'border-yellow-700/50';
    bgColor = 'bg-yellow-900/20';
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`p-3 rounded-lg border ${borderColor} ${bgColor} ${textColor}`}
    >
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2 text-sm">
        <div className="flex items-center gap-2">
          <AlertTriangle className="w-4 h-4" />
          <span className="font-semibold">{t('tokenUsage.title')}</span>
        </div>
        <p>
          {t('tokenUsage.usageText', {
            consumed: consumed.toLocaleString(locale),
            limit: limit.toLocaleString(locale),
            percentage
          })}
        </p>
      </div>
      <div className="mt-2 w-full bg-gray-700 rounded-full h-1.5">
        <motion.div
          className={`h-1.5 rounded-full ${progressBarColor}`}
          initial={{ width: '0%' }}
          animate={{ width: `${Math.min(percentage, 100)}%` }}
          transition={{ duration: 0.5, ease: 'easeOut' }}
        />
      </div>
    </motion.div>
  );
};

export default TokenUsageAlert;

/// frontend/components/common/ViabilityScore.tsx ///
import { motion } from 'framer-motion';
import * as React from 'react';

interface ViabilityScoreProps {
  score: number; // score out of 10
}

const ViabilityScore: React.FC<ViabilityScoreProps> = ({ score }) => {
  const size = 120;
  const strokeWidth = 10;
  const center = size / 2;
  const radius = center - strokeWidth / 2;
  const circumference = 2 * Math.PI * radius;

  const scorePercentage = score / 10;
  const strokeDashoffset = circumference * (1 - scorePercentage);

  const getColor = (s: number) => {
    if (s <= 3) return '#ef4444'; // red-500
    if (s <= 6) return '#f59e0b'; // amber-500
    return '#22c55e'; // green-500
  };

  const color = getColor(score);

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="-rotate-90">
        {/* Background circle */}
        <circle
          cx={center}
          cy={center}
          r={radius}
          fill="transparent"
          stroke="rgba(255, 255, 255, 0.1)"
          strokeWidth={strokeWidth}
        />
        {/* Progress circle */}
        <motion.circle
          cx={center}
          cy={center}
          r={radius}
          fill="transparent"
          stroke={color}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeLinecap="round"
          initial={{ strokeDashoffset: circumference }}
          animate={{ strokeDashoffset }}
          transition={{ duration: 1.5, ease: "easeOut" }}
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <motion.span
          className="text-4xl font-bold text-white"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5, duration: 1 }}
        >
          {score}
        </motion.span>
        <span className="text-sm text-gray-400">/10</span>
      </div>
    </div>
  );
};

export default ViabilityScore;

/// frontend/components/dashboard/Dashboard.tsx ///
import React, { useMemo } from 'react';
import { motion, AnimatePresence, Variants } from 'framer-motion';
import { HistoryItem, UsageTracking, ViewType, AnalysisType } from '../../types';
import { BarChart3, FileText, Folder, ListChecks, Star, Zap } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';
import TrendChart from './TrendChart';
import DashboardEmptyState from './DashboardEmptyState';
import { useLanguage } from '../../contexts/LanguageContext';

interface DashboardProps {
  history: HistoryItem[];
  usageTracking: UsageTracking;
  onNavigate: (view: ViewType | 'history') => void;
  onLoadHistoryItem: (item: HistoryItem) => void;
  selectedProject: string | null;
  onSelectProject: (projectName: string | null) => void;
  isExample: boolean;
  showEmptyState?: boolean;
}

const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: { staggerChildren: 0.05, delayChildren: 0.1 }
    }
};

const itemVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 100 } }
};

const KPICard: React.FC<{ icon: React.ReactNode; title: string; value: string | number; description: string }> = ({ icon, title, value, description }) => (
    <div className="group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-4 rounded-lg flex items-center gap-4 transition-all duration-300">
        <div className="bg-gray-900/50 p-3 rounded-full">{icon}</div>
        <div>
            <p className="text-xs text-gray-400">{title}</p>
            <p className="text-xl font-bold text-white">{value}</p>
            <p className="text-xs text-gray-500">{description}</p>
        </div>
    </div>
);

const Dashboard: React.FC<DashboardProps> = ({ history, usageTracking, onNavigate, onLoadHistoryItem, selectedProject, onSelectProject, isExample, showEmptyState = false }) => {
  const { t, isLoading } = useTranslation(['dashboard', 'common', 'input']);
  const { locale } = useLanguage();

  const projects = useMemo(() => {
    const projectMap = new Map<string, number>();
    history.forEach(item => {
      projectMap.set(item.projectName, (projectMap.get(item.projectName) || 0) + 1);
    });
    return Array.from(projectMap.entries()).map(([name, count]) => ({ name, count }));
  }, [history]);

  const filteredHistory = useMemo(() => {
    if (!selectedProject) {
      return history;
    }
    return history.filter(item => item.projectName === selectedProject);
  }, [history, selectedProject]);

  const stats = useMemo(() => {
    const source = filteredHistory;
    if (source.length === 0) {
        return {
            totalAnalyses: 0,
            averageScore: 0,
            commonType: 'N/A',
            scoreTrend: [],
        };
    }
    const totalScore = source.reduce((sum, item) => sum + item.analysis.viability.score, 0);
    const typeCounts = source.reduce((acc, item) => {
      acc[item.analysisType] = (acc[item.analysisType] || 0) + 1;
      return acc;
    }, {} as Record<AnalysisType, number>);
    
    const commonType = Object.entries(typeCounts).sort((a, b) => Number(b[1]) - Number(a[1]))[0]?.[0] || 'N/A';
    const scoreTrend = [...source].reverse().map(item => item.analysis.viability.score);

    return {
      totalAnalyses: source.length,
      averageScore: parseFloat((totalScore / source.length).toFixed(1)),
      commonType,
      scoreTrend,
    };
  }, [filteredHistory]);

  if (showEmptyState) {
    return <DashboardEmptyState onNavigate={onNavigate} />;
  }

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8 animate-pulse">
        <div className="lg:col-span-1 bg-gray-900/30 p-4 rounded-xl border border-gray-800 h-64"></div>
        <div className="lg:col-span-3 space-y-8">
            <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
                <div className="xl:col-span-3 bg-gray-800/50 border border-gray-700 p-6 rounded-xl h-48"></div>
                <div className="xl:col-span-2 grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1 gap-4">
                    <div className="bg-gray-800/50 border border-gray-700 p-4 rounded-lg h-20"></div>
                    <div className="bg-gray-800/50 border border-gray-700 p-4 rounded-lg h-20"></div>
                </div>
            </div>
            <div className="bg-gray-900/30 p-6 rounded-xl border border-gray-800 h-64"></div>
        </div>
      </div>
    );
  }

  const typeLabels: Record<string, string> = {
    [AnalysisType.General]: t('analysisTypes.GENERAL.label'),
    [AnalysisType.Security]: t('analysisTypes.SECURITY.label'),
    [AnalysisType.Scalability]: t('analysisTypes.SCALABILITY.label'),
    [AnalysisType.CodeQuality]: t('analysisTypes.CODE_QUALITY.label'),
    'N/A': 'N/A'
  };

  const analysesToList = selectedProject ? filteredHistory : [...history].sort((a,b) => b.id - a.id).slice(0, 10);

  return (
    <motion.div
        className="grid grid-cols-1 lg:grid-cols-4 gap-8"
        variants={containerVariants}
        initial="hidden"
        animate="visible"
    >
      {/* Project List Sidebar */}
      <motion.div variants={itemVariants} className="lg:col-span-1 bg-gray-900/30 p-4 rounded-xl border border-gray-800 h-fit lg:sticky lg:top-24">
        <h2 className="text-lg font-bold text-white mb-4 px-2">{t('dashboard.projects.title')}</h2>
        <ul className="space-y-1">
          <li>
            <button
              onClick={() => onSelectProject(null)}
              className={`w-full text-left flex items-center gap-3 p-2 rounded-md transition-colors text-sm font-medium ${!selectedProject ? 'bg-blue-600/50 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}
            >
              <BarChart3 className="w-5 h-5 shrink-0" />
              <span className="flex-grow truncate">{t('dashboard.projects.allProjects')}</span>
              <span className="text-xs bg-gray-700/80 px-1.5 py-0.5 rounded">{history.length}</span>
            </button>
          </li>
          {projects.map(project => (
            <li key={project.name}>
              <button
                onClick={() => onSelectProject(project.name)}
                className={`w-full text-left flex items-center gap-3 p-2 rounded-md transition-colors text-sm ${selectedProject === project.name ? 'bg-blue-600/50 text-white' : 'text-gray-400 hover:bg-gray-700/50'}`}
              >
                <Folder className="w-5 h-5 shrink-0" />
                <span className="flex-grow truncate" title={project.name}>{project.name}</span>
                <span className="text-xs bg-gray-700/80 px-1.5 py-0.5 rounded">{project.count}</span>
              </button>
            </li>
          ))}
        </ul>
      </motion.div>

      {/* Main Content */}
      <motion.div className="lg:col-span-3 space-y-8">
        {/* KPIs and Chart */}
        <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
            className="grid grid-cols-1 xl:grid-cols-5 gap-8"
        >
            <div className="xl:col-span-3 bg-gray-800/50 border border-gray-700 p-6 rounded-xl flex flex-col">
              <h3 className="text-lg font-semibold text-white mb-2">{t('dashboard.scoreEvolution')}</h3>
              <div className="flex-grow h-48">
                <TrendChart data={stats.scoreTrend} />
              </div>
            </div>
            <div className="xl:col-span-2 grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-1 gap-4">
                <KPICard icon={<FileText className="w-6 h-6 text-purple-400"/>} title={t('dashboard.kpi.totalAnalyses')} value={stats.totalAnalyses} description={t('dashboard.kpi.totalAnalyses_description')} />
                <KPICard icon={<Star className="w-6 h-6 text-yellow-400"/>} title={t('dashboard.kpi.averageScore')} value={stats.averageScore} description={t('dashboard.kpi.averageScore_description')} />
                <KPICard icon={<ListChecks className="w-6 h-6 text-teal-400"/>} title={t('dashboard.kpi.commonType')} value={typeLabels[stats.commonType]} description={t('dashboard.kpi.commonType_description')} />
                <KPICard icon={<Zap className="w-6 h-6 text-blue-400"/>} title={t('dashboard.kpi.tokensThisMonth')} value={usageTracking.totalTokens.toLocaleString(locale)} description={t('dashboard.kpi.tokensThisMonth_description')} />
            </div>
        </motion.div>

        {/* Analyses List */}
        <motion.div variants={itemVariants} className="bg-gray-900/30 p-6 rounded-xl border border-gray-800">
            <h3 className="text-xl font-bold text-white mb-4">
              {selectedProject
                ? t('dashboard.projects.analysesFor', { projectName: selectedProject })
                : t('dashboard.projects.recentAnalyses')}
            </h3>
            <div className="space-y-3">
              <AnimatePresence>
                {analysesToList.map(item => (
                  <motion.div
                    key={item.id}
                    layout
                    variants={itemVariants}
                    initial="hidden"
                    animate="visible"
                    exit="hidden"
                    className="flex items-center justify-between gap-4 p-3 rounded-lg hover:bg-gray-800/60 transition-colors"
                  >
                    <div className="text-sm flex-grow overflow-hidden">
                      <p className="font-medium text-gray-300 truncate" title={item.projectName}>{item.projectName}</p>
                      <div className="flex items-center gap-3 text-xs text-gray-500">
                        <span>{typeLabels[item.analysisType]}</span>
                        <span className="hidden sm:inline">&bull;</span>
                        <span className="hidden sm:inline">{item.timestamp}</span>
                      </div>
                    </div>
                    <div className="flex items-center gap-3 shrink-0">
                      <div className="flex items-center gap-1.5">
                        <Star className="w-4 h-4 text-yellow-500" />
                        <span className="font-bold text-white text-lg">{item.analysis.viability.score}</span>
                      </div>
                      <button
                        onClick={() => onLoadHistoryItem(item)}
                        disabled={isExample}
                        className="px-3 py-1 text-xs font-semibold text-blue-300 bg-blue-900/50 border border-blue-700 rounded-md hover:bg-blue-800/50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {t('actions.view')}
                      </button>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default Dashboard;

/// frontend/components/dashboard/DashboardEmptyState.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, Variants } from 'framer-motion';
import { ViewType } from '../../types';
import { FileText, ListChecks, Sparkles, Star, TrendingUp, Zap, BarChart3 } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';

interface DashboardEmptyStateProps {
  onNavigate: (view: ViewType | 'history') => void;
}

const HeroBanner: React.FC<{ onNavigate: (view: ViewType | 'history') => void }> = ({ onNavigate }) => {
    const { t, isLoading } = useTranslation(['dashboard', 'common', 'landing']);
    const [dynamicTitle, setDynamicTitle] = useState('');

    useEffect(() => {
        if (!isLoading) {
            const titles = t('landing.dynamicPhrases') as unknown as string[];
            if (Array.isArray(titles) && titles.length > 0) {
                const randomIndex = Math.floor(Math.random() * titles.length);
                setDynamicTitle(titles[randomIndex]);
            }
        }
    }, [t, isLoading]);
    
    return (
        <div className="text-center p-8 bg-gray-900/30 rounded-xl border border-gray-800">
            <div className="inline-flex items-center justify-center gap-3 group h-16 md:h-20">
                <BarChart3 className="w-10 h-10 md:w-12 md:h-12 text-blue-400 transition-transform duration-300 group-hover:rotate-12" />
                <h1 className="text-4xl md:text-5xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
                  {isLoading ? '...' : dynamicTitle}
                </h1>
                <Sparkles className="w-10 h-10 md:w-12 md:h-12 text-purple-400 transition-transform duration-300 group-hover:-rotate-12" />
            </div>
            <p className="text-gray-400 mt-4 max-w-3xl mx-auto text-lg md:text-xl">
                {isLoading ? '...' : t('header.subtitle')}
            </p>
            <div className="mt-8">
                <button
                    onClick={() => onNavigate(ViewType.Input)}
                    className="group relative inline-flex items-center justify-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold text-lg hover:shadow-2xl hover:shadow-blue-500/30 hover:scale-105 transition-all duration-300"
                >
                    <span>{isLoading ? '...' : t('dashboard.emptyState.cta')}</span>
                </button>
            </div>
        </div>
    );
};

const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: { staggerChildren: 0.15 }
    }
};

const itemVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
        opacity: 1,
        y: 0,
        transition: { type: 'spring', stiffness: 100 }
    }
};

const InfoCard: React.FC<{ icon: React.ReactNode; title: string; description: string }> = ({ icon, title, description }) => (
    <div className="group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-4 rounded-lg flex items-center gap-4 transition-all duration-300">
        <div className="bg-gray-900/50 p-3 rounded-full">{icon}</div>
        <div>
            <p className="font-semibold text-white">{title}</p>
            <p className="text-sm text-gray-400">{description}</p>
        </div>
    </div>
);


const DashboardEmptyState: React.FC<DashboardEmptyStateProps> = ({ onNavigate }) => {
    const { t, isLoading } = useTranslation(['dashboard', 'common', 'landing']);
    
    if (isLoading) {
        return (
            <div className="space-y-12 animate-pulse">
                <div className="h-64 bg-gray-900/30 rounded-xl border border-gray-800"></div>
                <div className="h-96 bg-gray-900/30 p-6 rounded-xl border border-gray-800"></div>
            </div>
        );
    }
  
    return (
        <motion.div
            className="space-y-12"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
        >
            <motion.div variants={itemVariants}>
                <HeroBanner onNavigate={onNavigate} />
            </motion.div>

            <motion.div
                className="grid grid-cols-1 lg:grid-cols-5 gap-8 bg-gray-900/30 p-6 rounded-xl border border-gray-800"
                variants={itemVariants}
            >
                <div className="lg:col-span-3 bg-gray-800/50 border border-gray-700 p-8 rounded-xl flex flex-col items-center justify-center text-center">
                    <Sparkles className="w-12 h-12 text-purple-400 mb-4" />
                    <h3 className="text-2xl font-bold text-white">{t('dashboard.emptyState.title')}</h3>
                    <p className="text-gray-400 mt-2 max-w-md">
                        {t('dashboard.emptyState.subtitle')}
                    </p>
                </div>
                
                <div className="lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-4">
                    <InfoCard 
                        icon={<FileText className="w-6 h-6 text-purple-400"/>} 
                        title={t('dashboard.kpi.totalAnalyses')} 
                        description={t('dashboard.emptyState.kpi_total_description')} 
                    />
                    <InfoCard 
                        icon={<Star className="w-6 h-6 text-yellow-400"/>} 
                        title={t('dashboard.kpi.averageScore')} 
                        description={t('dashboard.emptyState.kpi_score_description')} 
                    />
                    <InfoCard 
                        icon={<ListChecks className="w-6 h-6 text-teal-400"/>} 
                        title={t('dashboard.kpi.commonType')} 
                        description={t('dashboard.emptyState.kpi_type_description')} 
                    />
                    <InfoCard 
                        icon={<Zap className="w-6 h-6 text-blue-400"/>} 
                        title={t('dashboard.kpi.tokensThisMonth')} 
                        description={t('dashboard.emptyState.kpi_tokens_description')} 
                    />
                </div>
            </motion.div>
        </motion.div>
    );
};

export default DashboardEmptyState;

/// frontend/components/dashboard/HeroBanner.tsx ///
import { BarChart3, Sparkles } from 'lucide-react';
import * as React from 'react';

const HeroBanner: React.FC = () => {
  return (
    <div className="p-8 text-center bg-gray-900/30 rounded-xl border border-gray-800">
      <div className="inline-flex items-center justify-center gap-3 group">
        <BarChart3 className="w-10 h-10 text-blue-400" />
        <h1 className="text-4xl font-bold text-white">Project Analyzer</h1>
        <Sparkles className="w-10 h-10 text-purple-400" />
      </div>
      <p className="text-gray-400 mt-4 max-w-3xl mx-auto">
        This is a placeholder Hero Banner. The main implementation is inside DashboardEmptyState.
      </p>
    </div>
  );
};

export default HeroBanner;

/// frontend/components/dashboard/TrendChart.tsx ///
import * as React from 'react';
import Sparkline from '../common/Sparkline';

interface TrendChartProps {
  data: number[];
  className?: string;
}

const TrendChart: React.FC<TrendChartProps> = ({ data, className = '' }) => {
  if (data.length < 2) {
    return (
      <div className="h-full w-full flex items-center justify-center bg-gray-900/30 rounded-lg">
        <p className="text-gray-500 text-sm">Dados insuficientes para exibir tendência</p>
      </div>
    );
  }

  return (
    <div className={`relative h-full w-full flex items-center ${className}`}>
      <div className="h-full flex flex-col justify-between text-xs text-gray-500 py-1 pr-2">
        <span>10</span>
        <span>5</span>
        <span>0</span>
      </div>
      <div className="relative h-full flex-grow">
        <div className="absolute top-0 left-0 w-full h-full border-b border-l border-gray-700/50">
          <div className="absolute top-1/2 left-0 w-full border-t border-dashed border-gray-700/50"></div>
        </div>
        <Sparkline
          data={data}
          width={400} // width/height will be controlled by parent's flex/size
          height={100}
          className="w-full h-full"
          stroke="rgb(96 165 250)"
          strokeWidth={2}
        />
      </div>
    </div>
  );
};

export default TrendChart;

/// frontend/components/examples/AIProviderDemo.tsx ///
// Example: How to integrate the unified AI service in the React app
import React, { useState } from 'react';
import { createAIService, getAvailableProviders, type AIProvider } from '../../services/unified-ai';
import { AnalysisType } from '../../types';

interface AIProviderSelectorProps {
  onProviderChange: (provider: AIProvider) => void;
  currentProvider: AIProvider;
}

export const AIProviderSelector: React.FC<AIProviderSelectorProps> = ({
  onProviderChange,
  currentProvider
}) => {
  const providers = getAvailableProviders();

  return (
    <div className="ai-provider-selector">
      <label className="block text-sm font-medium text-gray-700 mb-2">
        AI Provider
      </label>
      <select
        title='Select AI Provider'
        value={currentProvider}
        onChange={(e) => onProviderChange(e.target.value as AIProvider)}
        className="w-full p-2 border border-gray-300 rounded-md"
      >
        {providers.map((provider) => (
          <option key={provider.value} value={provider.value}>
            {provider.label}
          </option>
        ))}
      </select>
      <p className="text-xs text-gray-500 mt-1">
        {providers.find(p => p.value === currentProvider)?.description}
      </p>
    </div>
  );
};

// Example usage in main component
export const ExampleUsage: React.FC = () => {
  const [provider, setProvider] = useState<AIProvider>('gemini-direct');
  const [apiKey, setApiKey] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const handleTestConnection = async () => {
    try {
      const aiService = createAIService({
        provider,
        userApiKey: apiKey
      });

      await aiService.testConnection();
      setIsConnected(true);
      console.log('✅ Connection successful!');
    } catch (error) {
      setIsConnected(false);
      console.error('❌ Connection failed:', error);
    }
  };

  const handleAnalyzeProject = async () => {
    if (!isConnected) return;

    setIsAnalyzing(true);
    try {
      const aiService = createAIService({
        provider,
        userApiKey: apiKey
      });

      const analysis = await aiService.analyzeProject(
        "# Example Project\nThis is a test project...",
        AnalysisType.General,
        'en-US'
      );

      console.log('📊 Analysis result:', analysis);
    } catch (error) {
      console.error('❌ Analysis failed:', error);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const providerInfo = createAIService({ provider, userApiKey: apiKey }).getProviderInfo();

  return (
    <div className="p-6 max-w-md mx-auto bg-white rounded-lg shadow-md">
      <h2 className="text-xl font-bold mb-4">AI Provider Demo</h2>

      <AIProviderSelector
        currentProvider={provider}
        onProviderChange={setProvider}
      />

      {providerInfo.requiresApiKey && (
        <div className="mt-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            API Key
          </label>
          <input
            type="password"
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
            placeholder="Enter your API key..."
          />
        </div>
      )}

      <div className="mt-4 p-3 bg-gray-50 rounded-md text-sm">
        <h3 className="font-medium">Provider Info:</h3>
        <p><strong>Name:</strong> {providerInfo.name}</p>
        <p><strong>Type:</strong> {providerInfo.type}</p>
        <p><strong>Streaming:</strong> {providerInfo.supportsStreaming ? '✅' : '❌'}</p>
        <p><strong>Description:</strong> {providerInfo.description}</p>
      </div>

      <div className="mt-4 space-y-2">
        <button
          onClick={handleTestConnection}
          disabled={providerInfo.requiresApiKey && !apiKey}
          className="w-full py-2 px-4 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50"
        >
          Test Connection
        </button>

        {isConnected && (
          <button
            onClick={handleAnalyzeProject}
            disabled={isAnalyzing}
            className="w-full py-2 px-4 bg-green-500 text-white rounded-md hover:bg-green-600 disabled:opacity-50"
          >
            {isAnalyzing ? 'Analyzing...' : 'Test Analysis'}
          </button>
        )}
      </div>

      <div className="mt-4">
        <div className={`w-3 h-3 rounded-full inline-block mr-2 ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
        <span className="text-sm">
          {isConnected ? 'Connected' : 'Not connected'}
        </span>
      </div>
    </div>
  );
};

/**
 * Integration guide for existing App.tsx:
 *
 * 1. Add AI provider selection to settings:
 *    - Import AIProviderSelector
 *    - Add provider state to AppSettings
 *    - Add provider selector to UserSettingsModal
 *
 * 2. Replace direct Gemini calls:
 *    - Import createAIService instead of direct imports
 *    - Create AI service instance with selected provider
 *    - Replace analyzeProject calls with aiService.analyzeProject
 *
 * 3. Maintain backward compatibility:
 *    - Default to 'gemini-direct' for existing users
 *    - Gradual migration - add new providers as options
 *    - Keep existing UI/UX exactly the same
 *
 * Example migration in App.tsx:
 *
 * // OLD:
 * import { analyzeProject } from './services/gemini';
 * const analysis = await analyzeProject(context, type, locale, apiKey);
 *
 * // NEW:
 * import { createAIService } from './services/unified-ai';
 * const aiService = createAIService({ provider: settings.aiProvider, userApiKey: apiKey });
 * const analysis = await aiService.analyzeProject(context, type, locale);
 */

/// frontend/components/history/HistoryPanel.tsx ///
import React, { useState, useMemo, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { History, X, Trash2, FileUp, Info, GitCompareArrows, BarChart3, Zap, Loader2 } from 'lucide-react';
import { HistoryItem, AnalysisType } from '../../types';
import Sparkline from '../common/Sparkline';
import { useTranslation } from '../../hooks/useTranslation';
import { useLanguage } from '../../contexts/LanguageContext';
import { useConfirmation } from '../../contexts/ConfirmationContext';

interface HistoryPanelProps {
  isOpen: boolean;
  onClose: () => void;
  history: HistoryItem[];
  onLoad: (item: HistoryItem) => void;
  onDelete: (id: number) => void;
  onClear: () => void;
  onCompare: (ids: number[]) => void;
  isExampleView: boolean;
  deletingHistoryId: number | null;
}

const ITEMS_PER_PAGE = 10;

const HistoryPanel: React.FC<HistoryPanelProps> = ({ isOpen, onClose, history, onLoad, onDelete, onClear, onCompare, isExampleView, deletingHistoryId }) => {
  const [selectedIds, setSelectedIds] = useState<number[]>([]);
  const [visibleCount, setVisibleCount] = useState(ITEMS_PER_PAGE);
  const { t } = useTranslation(['common', 'settings', 'input']);
  const { locale } = useLanguage();
  const { showConfirmation } = useConfirmation();

  const typeLabels: Record<AnalysisType, string> = {
    [AnalysisType.General]: t('input:analysisTypes.GENERAL.label'),
    [AnalysisType.Security]: t('input:analysisTypes.SECURITY.label'),
    [AnalysisType.Scalability]: t('input:analysisTypes.SCALABILITY.label'),
    [AnalysisType.CodeQuality]: t('input:analysisTypes.CODE_QUALITY.label')
  };

  useEffect(() => {
    if (!isOpen) {
      setSelectedIds([]);
      setVisibleCount(ITEMS_PER_PAGE);
    }
  }, [isOpen]);

  const handleSelect = (id: number) => {
    if (isExampleView) return;
    setSelectedIds(prev => {
      if (prev.includes(id)) {
        return prev.filter(i => i !== id);
      }
      if (prev.length < 2) {
        return [...prev, id];
      }
      return prev; // No more than 2 selections
    });
  };

  const handleConfirmClear = () => {
    showConfirmation({
        title: t('history:clearConfirm.title'),
        message: t('history:clearConfirm.message'),
        confirmText: t('common.delete'),
        onConfirm: onClear,
    });
  };
  
  const historyWithSparklines = useMemo(() => {
    const projectGroups = new Map<string, HistoryItem[]>();

    // Group history by project and analysis type
    history.forEach(item => {
      const key = `${item.projectName}::${item.analysisType}`;
      if (!projectGroups.has(key)) {
        projectGroups.set(key, []);
      }
      projectGroups.get(key)!.push(item);
    });

    // Create data for each item, sorted chronologically
    return history.map(item => {
      const key = `${item.projectName}::${item.analysisType}`;
      const group = projectGroups.get(key)!.sort((a, b) => a.id - b.id);
      
      const scoreData = group.map(h => h.analysis.viability.score);
      const tokenData = group.map(h => h.analysis.usageMetadata?.totalTokenCount || 0);

      return {
        ...item,
        sparkline: {
          scoreData,
          tokenData,
        }
      };
    }).sort((a, b) => b.id - a.id); // sort final list to show newest first
  }, [history]);

  const historyToShow = historyWithSparklines.slice(0, visibleCount);

  const handleShowMore = () => {
    setVisibleCount(prev => prev + ITEMS_PER_PAGE);
  };

  const comparableItems = useMemo(() => {
    if (selectedIds.length !== 2) return null;
    const items = history.filter(item => selectedIds.includes(item.id));
    if (items.length === 2 && items[0].analysisType === items[1].analysisType) {
      return items;
    }
    return null;
  }, [selectedIds, history]);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.95, y: -20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.95, y: -20, opacity: 0 }}
            transition={{ duration: 0.2, ease: 'easeOut' }}
            onClick={(e) => e.stopPropagation()}
            className="bg-gray-800/80 border border-gray-700 rounded-xl w-full max-w-4xl max-h-[80vh] flex flex-col shadow-2xl"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700 shrink-0">
              <div className="flex items-center gap-3">
                <History className="w-6 h-6 text-blue-400" />
                <h2 className="text-xl font-bold text-white">{t('history.title')}</h2>
              </div>
              {isExampleView && (
                <div className="text-xs font-medium px-2 py-1 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-md">
                  {t('history.exampleMode')}
                </div>
              )}
              <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors">
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto grow">
              {historyWithSparklines.length > 0 ? (
                <>
                <div className="text-center mb-4 p-2 bg-gray-900/50 border border-gray-700 rounded-md text-sm text-gray-400">
                    <p>{t('history.compareInstruction')}</p>
                </div>
                <ul className="space-y-3">
                  {historyToShow.map((item) => {
                    const isSelected = selectedIds.includes(item.id);
                    const isDeleting = deletingHistoryId === item.id;
                    const isSelectionDisabled = (selectedIds.length >= 2 && !isSelected) || isExampleView;
                    const isDisabled = isDeleting || isSelectionDisabled;

                    return(
                    <motion.li
                      key={item.id}
                      layout
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, x: -10 }}
                      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                      className={`p-3 rounded-lg border flex items-start gap-3 transition-all duration-200 ${isSelected ? 'bg-blue-900/50 border-blue-600' : 'bg-gray-900/50 border-gray-700'} ${isExampleView ? 'opacity-70' : ''}`}
                    >
                      <input
                          type="checkbox"
                          checked={isSelected}
                          disabled={isDisabled}
                          onChange={() => handleSelect(item.id)}
                          className={`mt-1 shrink-0 w-4 h-4 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-600 focus:ring-2 ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                        />
                      <div className="flex-grow flex flex-col justify-between gap-2" onClick={() => !isDisabled && handleSelect(item.id)}>
                        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
                            <div className="flex-grow">
                                <p className="font-semibold text-white truncate" title={item.projectName}>{item.projectName}</p>
                                <div className="flex flex-wrap items-center gap-x-4 gap-y-1 text-xs text-gray-400 mt-1">
                                <span>
                                    <strong className="text-gray-300">{t('history.typeLabel')}:</strong> {typeLabels[item.analysisType] || item.analysisType}
                                </span>
                                <span>
                                    <strong className="text-gray-300">{t('history.dateLabel')}:</strong> {item.timestamp}
                                </span>
                                </div>
                            </div>
                            <div className="flex items-center gap-2 shrink-0 self-end sm:self-center">
                                <button 
                                disabled={isDeleting || isExampleView}
                                onClick={(e) => { e.stopPropagation(); onLoad(item); }}
                                className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-blue-300 bg-blue-900/50 border border-blue-700 rounded-md hover:bg-blue-800/50 transition-colors disabled:opacity-60 disabled:cursor-not-allowed"
                                >
                                <FileUp className="w-3.5 h-3.5" /> {t('actions.load')}
                                </button>
                                <button
                                disabled={isDeleting || isExampleView}
                                onClick={(e) => { e.stopPropagation(); onDelete(item.id); }}
                                className="p-2 w-8 h-8 flex items-center justify-center text-red-400 bg-red-900/30 border border-red-800/50 rounded-md hover:bg-red-900/50 transition-colors disabled:opacity-60 disabled:cursor-not-allowed"
                                aria-label={t('history.deleteAriaLabel')}
                                >
                                  {isDeleting ? (
                                    <Loader2 className="w-3.5 h-3.5 animate-spin" />
                                  ) : (
                                    <Trash2 className="w-3.5 h-3.5" />
                                  )}
                                </button>
                            </div>
                        </div>
                        <div className="mt-2 pt-2 border-t border-gray-700/50 flex flex-col sm:flex-row items-center justify-between gap-4">
                            <div className="flex items-center gap-2 text-xs text-gray-400" title={t('history.scoreTrendTitle')}>
                                <BarChart3 className="w-4 h-4 text-blue-400 shrink-0" />
                                <Sparkline data={item.sparkline.scoreData} stroke="rgb(96 165 250)" />
                                <span className="font-semibold text-white w-4 text-right">{item.analysis.viability.score}</span>
                            </div>
                            <div className="flex items-center gap-2 text-xs text-gray-400" title={t('history.tokenUsageTitle')}>
                                <Zap className="w-4 h-4 text-purple-400 shrink-0" />
                                <Sparkline data={item.sparkline.tokenData} stroke="rgb(192 132 252)" />
                                <span className="font-semibold text-white w-12 text-right">
                                    {item.analysis.usageMetadata?.totalTokenCount.toLocaleString(locale) || 'N/A'}
                                </span>
                            </div>
                        </div>
                      </div>
                    </motion.li>
                  )})}
                </ul>
                {historyWithSparklines.length > visibleCount && (
                  <div className="mt-4 text-center">
                    <button
                      onClick={handleShowMore}
                      className="px-4 py-2 text-sm font-semibold text-blue-300 bg-blue-900/50 border border-blue-700 rounded-md hover:bg-blue-800/50 transition-colors"
                    >
                      {t('actions.showMore')}
                    </button>
                  </div>
                )}
                </>
              ) : (
                <div className="text-center py-10">
                    <Info className="w-10 h-10 mx-auto text-gray-600" />
                    <p className="mt-4 font-medium text-gray-400">{t('history.empty.title')}</p>
                    <p className="text-sm text-gray-500">{t('history.empty.subtitle')}</p>
                </div>
              )}
            </div>

             {/* Footer */}
            <div className="p-4 border-t border-gray-700 shrink-0 flex justify-between items-center">
                <button
                    onClick={handleConfirmClear}
                    disabled={history.length === 0 || isExampleView}
                    className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-red-400 bg-red-900/50 border border-red-700 rounded-md hover:bg-red-800/50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <Trash2 className="w-3.5 h-3.5" /> {t('history.clear')}
                </button>
                <button
                    onClick={() => onCompare(selectedIds)}
                    disabled={!comparableItems || isExampleView}
                    className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-purple-600 rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <GitCompareArrows className="w-4 h-4" /> {t('history.compare')}
                </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default HistoryPanel;

/// frontend/components/input/GitHubSearchModal.tsx ///
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Search, Star, Loader2, GitBranch } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';
import { GitHubRepoListItem } from '../../types';
import { listUserRepos } from '../../services/integrations/github';
import { useNotification } from '../../contexts/NotificationContext';

interface GitHubSearchModalProps {
  isOpen: boolean;
  onClose: () => void;
  onImport: (owner: string, repo: string) => void;
  githubPat?: string;
}

const GitHubSearchModal: React.FC<GitHubSearchModalProps> = ({ isOpen, onClose, onImport, githubPat }) => {
    const { t } = useTranslation(['input', 'common']);
    const { addNotification } = useNotification();
    const [username, setUsername] = useState('');
    const [repos, setRepos] = useState<GitHubRepoListItem[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [searchedUsername, setSearchedUsername] = useState('');
    
    const handleSearch = async (e?: React.FormEvent) => {
        if (e) e.preventDefault();
        if (!githubPat) {
            addNotification({ message: t('notifications.noGithubPat'), type: 'error' });
            return;
        }
        if (!username) {
            addNotification({ message: t('input:githubSearch.emptyUsername'), type: 'error' });
            return;
        }
        setIsLoading(true);
        setSearchedUsername(username);
        try {
            const results = await listUserRepos(username, githubPat);
            setRepos(results);
        } catch (error: any) {
            addNotification({ message: error.message, type: 'error' });
            setRepos([]);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <AnimatePresence>
            {isOpen && (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    onClick={onClose}
                    className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
                >
                    <motion.div
                        initial={{ scale: 0.95, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        exit={{ scale: 0.95, opacity: 0 }}
                        onClick={(e) => e.stopPropagation()}
                        className="bg-gray-800 border border-gray-700 rounded-xl w-full max-w-2xl flex flex-col shadow-2xl h-[80vh]"
                    >
                        {/* Header */}
                        <div className="flex items-center justify-between p-4 border-b border-gray-700">
                            <div className="flex items-center gap-3">
                                <Search className="w-6 h-6 text-blue-400" />
                                <h2 className="text-xl font-bold text-white">{t('input:githubSearch.title')}</h2>
                            </div>
                            <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700">
                                <X className="w-5 h-5" />
                            </button>
                        </div>
                        
                        {/* Search Bar */}
                        <div className="p-4">
                            <form onSubmit={handleSearch} className="flex gap-2">
                                <input
                                    type="text"
                                    value={username}
                                    onChange={e => setUsername(e.target.value)}
                                    placeholder={t('input:githubSearch.placeholder')}
                                    className="flex-grow p-2 bg-gray-900 border border-gray-600 rounded-md text-sm"
                                    disabled={isLoading}
                                />
                                <button type="submit" disabled={isLoading} className="p-2 px-4 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-gray-600 flex items-center gap-2">
                                    {isLoading ? <Loader2 className="w-5 h-5 animate-spin" /> : <Search className="w-5 h-5" />}
                                    <span>{t('input:githubSearch.searchButton')}</span>
                                </button>
                            </form>
                        </div>

                        {/* Results */}
                        <div className="flex-grow p-4 pt-0 overflow-y-auto">
                            {isLoading ? (
                                <div className="flex items-center justify-center h-full">
                                    <Loader2 className="w-8 h-8 animate-spin text-gray-500" />
                                </div>
                            ) : searchedUsername && repos.length > 0 ? (
                                <div className="space-y-3">
                                    <h3 className="text-lg font-semibold text-gray-300">{t('input:githubSearch.resultsTitle', { username: searchedUsername })}</h3>
                                    {repos.map(repo => (
                                        <div key={repo.id} className="p-3 bg-gray-900/50 border border-gray-700 rounded-lg flex items-center justify-between gap-4">
                                            <div className="flex-grow overflow-hidden">
                                                <a href={repo.html_url} target="_blank" rel="noopener noreferrer" className="font-semibold text-blue-400 hover:underline truncate">{repo.name}</a>
                                                <p className="text-xs text-gray-400 truncate mt-1">{repo.description}</p>
                                                <div className="flex items-center gap-2 text-xs text-gray-500 mt-2">
                                                    <Star className="w-3 h-3 text-yellow-500" />
                                                    <span>{repo.stargazers_count.toLocaleString()}</span>
                                                </div>
                                            </div>
                                            <button 
                                                onClick={() => onImport(repo.owner.login, repo.name)}
                                                className="flex items-center gap-2 px-3 py-1.5 text-sm font-semibold text-white bg-blue-600 rounded-md hover:bg-blue-700"
                                            >
                                                <span>{t('input:githubSearch.importButton')}</span>
                                            </button>
                                        </div>
                                    ))}
                                </div>
                            ) : searchedUsername && repos.length === 0 ? (
                                <div className="flex flex-col items-center justify-center h-full text-center text-gray-500">
                                    <GitBranch className="w-12 h-12 mb-4" />
                                    <p className="font-semibold">{t('input:githubSearch.noReposFound')}</p>
                                    <p className="text-sm">Please check the username or organization and try again.</p>
                                </div>
                            ) : null}
                        </div>
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

export default GitHubSearchModal;

/// frontend/components/input/ProjectInput.tsx ///
import React, { useRef, useState, useMemo, useEffect } from 'react';
import { motion } from 'framer-motion';
import { FileText, Upload, Sparkles, AlertTriangle, ArrowLeft, Github, Package, Loader2, Plus, X, FolderOpen, Search } from 'lucide-react';
import { AnalysisType, AppSettings, UsageTracking, ProjectFile } from '../../types';
import TokenUsageAlert from '../common/TokenUsageAlert';
import SubtleTokenUsage from '../common/SubtleTokenUsage';
import { useTranslation } from '../../hooks/useTranslation';
import { useNotification } from '../../contexts/NotificationContext';
import { fetchRepoContents, fetchRepoForAnalysis } from '../../services/integrations/github';
import { fetchJiraProject } from '../../services/integrations/jira';
import GitHubSearchModal from './GitHubSearchModal';

interface ProjectInputProps {
  files: ProjectFile[];
  onFilesChange: (files: ProjectFile[]) => void;
  onAnalyze: (type: AnalysisType) => void;
  onShowExample: () => void;
  isLoading: boolean;
  settings: AppSettings;
  usageTracking: UsageTracking;
  isExample: boolean;
  onExitExample: () => void;
  hasRealData: boolean;
}

const colorMap = {
    blue: { text: 'text-blue-400', hoverBorder: 'hover:border-blue-500/50' },
    red: { text: 'text-red-400', hoverBorder: 'hover:border-red-500/50' },
    purple: { text: 'text-purple-400', hoverBorder: 'hover:border-purple-500/50' },
    teal: { text: 'text-teal-400', hoverBorder: 'hover:border-teal-500/50' },
};

const AnalysisButton: React.FC<{ 
  type: AnalysisType; 
  label: string; 
  description: string; 
  onAnalyze: (type: AnalysisType) => void; 
  isLoading: boolean;
  color: keyof typeof colorMap;
  icon: React.ElementType;
}> = ({ type, label, description, onAnalyze, isLoading, color, icon: Icon }) => {
  const styles = colorMap[color] || colorMap.blue;
  return (
    <button
      onClick={() => onAnalyze(type)}
      disabled={isLoading}
      className={`group p-4 bg-gray-800/50 border border-gray-700 rounded-lg text-left hover:bg-gray-700/50 ${styles.hoverBorder} transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-start gap-4`}
    >
      <Icon className={`w-6 h-6 shrink-0 mt-1 ${styles.text} transition-transform duration-300 group-hover:scale-110`} />
      <div>
        <p className="font-semibold text-white">{label}</p>
        <p className="text-sm text-gray-400 mt-1">{description}</p>
      </div>
    </button>
  );
};


const ProjectInput: React.FC<ProjectInputProps> = ({
  files,
  onFilesChange,
  onAnalyze,
  onShowExample,
  isLoading,
  settings,
  usageTracking,
  isExample,
  onExitExample,
  hasRealData,
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { t } = useTranslation(['input', 'common']);
  const { addNotification } = useNotification();
  
  const [isFetching, setIsFetching] = useState<null | 'github' | 'jira' | 'github-search'>(null);
  const [repoUrl, setRepoUrl] = useState('');
  
  const [selectedFileId, setSelectedFileId] = useState<number | null>(null);
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);

  const selectedFile = useMemo(() => files.find(f => f.id === selectedFileId), [files, selectedFileId]);

  useEffect(() => {
    if (!selectedFileId && files.length > 0) {
      setSelectedFileId(files[0].id);
    }
    if (selectedFileId && !files.some(f => f.id === selectedFileId)) {
      setSelectedFileId(files.length > 0 ? files[0].id : null);
    }
  }, [files, selectedFileId]);
  
  const analysisTypes = [
    { type: AnalysisType.General, label: t('analysisTypes.GENERAL.label'), description: t('analysisTypes.GENERAL.description'), color: 'blue', icon: FileText },
    { type: AnalysisType.Security, label: t('analysisTypes.SECURITY.label'), description: t('analysisTypes.SECURITY.description'), color: 'red', icon: Sparkles },
    { type: AnalysisType.Scalability, label: t('analysisTypes.SCALABILITY.label'), description: t('analysisTypes.SCALABILITY.description'), color: 'purple', icon: Sparkles },
    { type: AnalysisType.CodeQuality, label: t('analysisTypes.CODE_QUALITY.label'), description: t('analysisTypes.CODE_QUALITY.description'), color: 'teal', icon: Sparkles },
  ];

  const handleAddNewFile = () => {
    const newFile: ProjectFile = {
      id: Date.now(),
      name: `untitled-${files.length + 1}.txt`,
      content: '',
    };
    onFilesChange([...files, newFile]);
    setSelectedFileId(newFile.id);
  };

  const handleFileSelectedForUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        const newFile: ProjectFile = {
          id: Date.now(),
          name: file.name,
          content: event.target?.result as string,
        };
        onFilesChange([...files, newFile]);
        setSelectedFileId(newFile.id);
      };
      reader.readAsText(file);
    }
    // Reset file input to allow selecting the same file again
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleDeleteFile = (idToDelete: number) => {
    onFilesChange(files.filter(f => f.id !== idToDelete));
  };

  const handleUpdateFile = (updatedFile: ProjectFile) => {
    onFilesChange(files.map(f => f.id === updatedFile.id ? updatedFile : f));
  };
  
  const handleFetchGitHub = async () => {
      if (!repoUrl) {
          addNotification({ message: t('notifications.emptyRepoUrl'), type: 'error' });
          return;
      }
      if (!settings.githubPat) {
          addNotification({ message: t('notifications.noGithubPat'), type: 'error' });
          return;
      }
      setIsFetching('github');
      try {
          const content = await fetchRepoContents(repoUrl, settings.githubPat);
          const repoName = repoUrl.split('/').pop() || 'github-repo';
          const newFile: ProjectFile = {
            id: Date.now(),
            name: `${repoName}.md`,
            content: content,
          };
          onFilesChange([...files, newFile]);
          setSelectedFileId(newFile.id);
          addNotification({ message: t('notifications.repoDataFetched'), type: 'success' });
      } catch (error: any) {
          addNotification({ message: error.message, type: 'error' });
      } finally {
          setIsFetching(null);
      }
  };
  
  const handleImportRepo = async (owner: string, repo: string) => {
      if (!settings.githubPat) {
          addNotification({ message: t('notifications.noGithubPat'), type: 'error' });
          return;
      }
      setIsFetching('github-search');
      setIsSearchModalOpen(false);
      try {
          const content = await fetchRepoForAnalysis(owner, repo, settings.githubPat);
          const newFile: ProjectFile = {
            id: Date.now(),
            name: `${owner}-${repo}.md`,
            content: content,
          };
          onFilesChange([...files, newFile]);
          setSelectedFileId(newFile.id);
          addNotification({ message: t('notifications.repoImportSuccess'), type: 'success' });
      } catch (error: any) {
          addNotification({ message: error.message, type: 'error' });
      } finally {
          setIsFetching(null);
      }
  };

  // This is still mocked, but adds a file.
  const handleFetchJira = async () => {
      setIsFetching('jira');
      try {
          const content = await fetchJiraProject("MOCK", settings);
          const newFile: ProjectFile = {
            id: Date.now(),
            name: 'jira-project.md',
            content: content
          };
          onFilesChange([...files, newFile]);
          setSelectedFileId(newFile.id);
          addNotification({ message: t('notifications.jiraDataFetched'), type: 'info' });
      } catch (error: any) {
          addNotification({ message: error.message, type: 'error' });
      } finally {
          setIsFetching(null);
      }
  };
  
  const tokenPercentage = settings.tokenLimit > 0 ? (usageTracking.totalTokens / settings.tokenLimit) * 100 : 0;

  return (
    <>
      <div className="space-y-8">
        {isExample && (
          <motion.div 
              className="mb-8 p-4 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-lg flex items-center justify-between gap-3"
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
          >
              <div className="flex items-center gap-3">
                <AlertTriangle className="w-5 h-5 shrink-0" />
                <p className="text-sm font-medium">{t('exampleMode.notice')}</p>
              </div>
              <button
                onClick={onExitExample}
                className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-purple-200 bg-purple-800/50 border border-purple-600 rounded-md hover:bg-purple-700/50 transition-colors"
              >
                <ArrowLeft className="w-3.5 h-3.5" />
                {t('exampleMode.exit')}
              </button>
          </motion.div>
        )}

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="grid grid-cols-1 lg:grid-cols-2 gap-8"
        >
          {/* Left Side: File Management UI */}
          <div className="bg-gray-800/50 border border-gray-700 rounded-xl p-6 flex flex-col">
              <div className="flex items-center gap-3 mb-4">
                  <FolderOpen className="w-6 h-6 text-blue-400" />
                  <h2 className="text-xl font-semibold text-white">{t('files.title')}</h2>
              </div>
              <div className="flex-grow flex gap-4 min-h-[450px]">
                  {/* File List */}
                  <div className="w-1/3 border-r border-gray-600 pr-4 flex flex-col">
                      <ul className="space-y-1 flex-grow overflow-y-auto">
                          {files.map(file => (
                              <li key={file.id}>
                                  <button onClick={() => setSelectedFileId(file.id)} className={`w-full flex items-center justify-between gap-2 p-2 rounded-md text-left text-sm transition-colors ${selectedFileId === file.id ? 'bg-blue-600/50 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}>
                                      <span className="truncate flex-grow">{file.name}</span>
                                      <X onClick={(e) => { e.stopPropagation(); handleDeleteFile(file.id); }} className="w-4 h-4 text-gray-500 hover:text-red-400 shrink-0"/>
                                  </button>
                              </li>
                          ))}
                      </ul>
                      <div className="space-y-2 pt-2 border-t border-gray-600">
                          <input type="file" ref={fileInputRef} onChange={handleFileSelectedForUpload} className="hidden" accept=".txt,.md,.js,.ts,.jsx,.tsx,.json,.html,.css" />
                          <button onClick={handleAddNewFile} className="w-full text-sm flex items-center gap-2 p-2 justify-center rounded-md bg-gray-700 hover:bg-gray-600"><Plus className="w-4 h-4" /> {t('files.addFile')}</button>
                          <button onClick={() => fileInputRef.current?.click()} className="w-full text-sm flex items-center gap-2 p-2 justify-center rounded-md bg-gray-700 hover:bg-gray-600"><Upload className="w-4 h-4" /> {t('files.addFromUpload')}</button>
                      </div>
                  </div>
                  {/* Editor */}
                  <div className="w-2/3 flex flex-col gap-2">
                      {selectedFile ? (
                          <>
                              <input type="text" value={selectedFile.name} onChange={(e) => handleUpdateFile({...selectedFile, name: e.target.value})} placeholder={t('files.fileName')} className="p-2 bg-gray-900 border border-gray-600 rounded-md text-sm shrink-0"/>
                              <textarea value={selectedFile.content} onChange={(e) => handleUpdateFile({...selectedFile, content: e.target.value})} placeholder={t('files.fileContent')} className="w-full h-full p-2 bg-gray-900 border border-gray-600 rounded-md resize-none text-sm font-mono flex-grow"/>
                          </>
                      ) : (
                          <div className="w-full h-full flex items-center justify-center text-center text-gray-500 border-2 border-dashed border-gray-700 rounded-lg p-4">
                              {t('files.emptyState')}
                          </div>
                      )}
                  </div>
              </div>
              <div className="mt-4 pt-4 border-t border-gray-700 space-y-3">
                  <div className="flex gap-2">
                      <input type="text" value={repoUrl} onChange={e => setRepoUrl(e.target.value)} placeholder={t('dataSources.github.placeholder')} className="flex-grow p-2 bg-gray-900 border border-gray-600 rounded-md text-sm" disabled={!!isFetching}/>
                      <button onClick={handleFetchGitHub} disabled={!!isFetching || !repoUrl} className="p-2 px-3 bg-gray-700 rounded-md hover:bg-gray-600 disabled:opacity-50 flex items-center gap-2 text-sm"><Github className="w-4 h-4"/>{isFetching === 'github' && <Loader2 className="w-4 h-4 animate-spin"/>}</button>
                      <button onClick={() => setIsSearchModalOpen(true)} disabled={!!isFetching} className="p-2 px-3 bg-gray-700 rounded-md hover:bg-gray-600 disabled:opacity-50 flex items-center gap-2 text-sm">
                        {isFetching === 'github-search' ? <Loader2 className="w-4 h-4 animate-spin" /> : <Search className="w-4 h-4" />}
                        <span className="hidden sm:inline">{t('githubSearch.button')}</span>
                      </button>
                  </div>
                  {!hasRealData && !isExample && (
                      <div className="text-center">
                          <button onClick={onShowExample} disabled={isLoading || !!isFetching} className="text-sm text-purple-400 hover:underline">
                              {t('showExample')}
                          </button>
                      </div>
                  )}
              </div>
          </div>

          {/* Right Side: Analysis Options */}
          <div className="space-y-6">
            <div className="bg-gray-800/50 border border-gray-700 rounded-xl p-6">
              <div className="flex items-center gap-3 mb-4">
                  <Sparkles className="w-6 h-6 text-purple-400" />
                  <h2 className="text-xl font-semibold text-white">{t('analysisTitle')}</h2>
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-4">
                  {analysisTypes.map(at => (
                      <AnalysisButton 
                          key={at.type}
                          type={at.type}
                          label={at.label}
                          description={at.description}
                          onAnalyze={onAnalyze}
                          isLoading={isLoading || files.length === 0 || !!isFetching}
                          color={at.color as any}
                          icon={at.icon}
                      />
                  ))}
              </div>
            </div>
            <div className="bg-gray-800/50 border border-gray-700 rounded-xl p-6">
              {tokenPercentage > 70 ? (
                  <TokenUsageAlert limit={settings.tokenLimit} consumed={usageTracking.totalTokens} />
              ) : (
                  <SubtleTokenUsage limit={settings.tokenLimit} consumed={usageTracking.totalTokens} />
              )}
            </div>
          </div>
        </motion.div>
      </div>
      <GitHubSearchModal
        isOpen={isSearchModalOpen}
        onClose={() => setIsSearchModalOpen(false)}
        onImport={handleImportRepo}
        githubPat={settings.githubPat}
      />
    </>
  );
};

export default ProjectInput;

/// frontend/components/kanban/EditCardModal.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Save, Trash2, Edit, AlertTriangle, Info } from 'lucide-react';
import { KanbanCard, Priority, Difficulty } from '../../types';
import { useTranslation } from '../../hooks/useTranslation';

interface EditCardModalProps {
  isOpen: boolean;
  onClose: () => void;
  card: KanbanCard | Omit<KanbanCard, 'id'> | null;
  onSave: (card: KanbanCard | Omit<KanbanCard, 'id'>) => void;
  onDelete: (cardId: string) => void;
  isExample?: boolean;
}

const EditCardModal: React.FC<EditCardModalProps> = ({ isOpen, onClose, card, onSave, onDelete, isExample = false }) => {
  const { t } = useTranslation(['kanban', 'common']);
  const [formData, setFormData] = useState<Partial<KanbanCard>>({});
  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);

  useEffect(() => {
    if (card) {
      setFormData(card);
    } else {
      setFormData({
        title: '',
        description: '',
        priority: Priority.Medium,
        difficulty: Difficulty.Medium,
        tags: [],
        notes: '',
      });
    }
  }, [card]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSave = () => {
    if (isExample) return;
    if (formData.title) {
      onSave(formData as KanbanCard | Omit<KanbanCard, 'id'>);
    }
  };
  
  const handleDelete = () => {
    if (isExample) return;
    if ('id' in formData && formData.id) {
        onDelete(formData.id);
    }
    setIsDeleteConfirmOpen(false);
  };

  const isNewCard = !('id' in formData) || !formData.id;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            onClick={(e) => e.stopPropagation()}
            className="bg-gray-800 border border-gray-700 rounded-xl w-full max-w-lg flex flex-col shadow-2xl max-h-[90vh]"
          >
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <div className="flex items-center gap-3">
                <Edit className="w-6 h-6 text-blue-400" />
                <h2 className="text-xl font-bold text-white">
                  {isNewCard ? t('kanban.addCard') : t('kanban.editCard')}
                </h2>
              </div>
              <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700">
                <X className="w-5 h-5" />
              </button>
            </div>
            
            <div className="p-6 space-y-4 overflow-y-auto">
              {isExample && (
                <div className="p-3 mb-2 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-lg flex items-center gap-3 text-sm">
                  <Info className="w-5 h-5 shrink-0" />
                  <p>{t('kanban.exampleModeNotice')}</p>
                </div>
              )}
              <div>
                <label className="text-sm font-medium text-gray-300">{t('common.title')}</label>
                <input
                  name="title"
                  value={formData.title || ''}
                  onChange={handleChange}
                  className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
                />
              </div>
              
              {!isNewCard && (
                <div>
                    <label className="text-sm font-medium text-gray-400">{t('kanban.originalDescription')}</label>
                    <div className="w-full p-2 mt-1 bg-gray-900/50 border border-gray-700 rounded-md text-sm text-gray-400 max-h-28 overflow-y-auto">
                        {formData.description || ''}
                    </div>
                </div>
              )}
              
              {isNewCard && (
                  <div>
                    <label className="text-sm font-medium text-gray-300">{t('common.description')}</label>
                    <textarea
                      name="description"
                      value={formData.description || ''}
                      onChange={handleChange}
                      rows={3}
                      className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md resize-y"
                    />
                  </div>
              )}

              <div>
                <label className="text-sm font-medium text-gray-300">{t('kanban.notes')}</label>
                <textarea
                  name="notes"
                  value={formData.notes || ''}
                  onChange={handleChange}
                  rows={4}
                  placeholder={t('kanban.notesPlaceholder')}
                  className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md resize-y"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-sm font-medium text-gray-300">{t('common.priority')}</label>
                  <select
                    name="priority"
                    value={formData.priority || Priority.Medium}
                    onChange={handleChange}
                    className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
                  >
                    {Object.values(Priority).map(p => <option key={p} value={p}>{t(`priority.${p}`)}</option>)}
                  </select>
                </div>
                <div>
                  <label className="text-sm font-medium text-gray-300">{t('common.difficulty')}</label>
                  <select
                    name="difficulty"
                    value={formData.difficulty || Difficulty.Medium}
                    onChange={handleChange}
                    className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
                  >
                    {Object.values(Difficulty).map(d => <option key={d} value={d}>{t(`difficulty.${d}`)}</option>)}
                  </select>
                </div>
              </div>
            </div>

            <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-between items-center">
                {!isNewCard ? (
                     <button
                        onClick={() => setIsDeleteConfirmOpen(true)}
                        disabled={isExample}
                        className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-red-400 bg-transparent border border-transparent rounded-md hover:bg-red-900/50 hover:border-red-700/50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <Trash2 className="w-4 h-4" /> {t('common.delete')}
                    </button>
                ) : <div />}
                 <button
                    onClick={handleSave}
                    disabled={isExample}
                    className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-purple-600 rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <Save className="w-4 h-4" /> {t('common.save')}
                </button>
            </div>

            {/* Delete Confirmation Dialog */}
            <AnimatePresence>
                {isDeleteConfirmOpen && (
                    <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className="absolute inset-0 bg-gray-800/80 backdrop-blur-sm z-10 flex items-center justify-center p-4"
                    >
                        <motion.div
                            initial={{ scale: 0.9, opacity: 0 }}
                            animate={{ scale: 1, opacity: 1 }}
                            exit={{ scale: 0.9, opacity: 0 }}
                            className="bg-gray-900 border border-red-700 rounded-xl p-6 max-w-sm text-center"
                        >
                            <AlertTriangle className="w-12 h-12 text-red-500 mx-auto" />
                            <h3 className="mt-4 text-lg font-bold text-white">{t('kanban.deleteConfirm.title')}</h3>
                            <p className="mt-2 text-sm text-gray-400">{t('kanban.deleteConfirm.message')}</p>
                            <div className="mt-6 flex justify-center gap-4">
                                <button onClick={() => setIsDeleteConfirmOpen(false)} className="px-4 py-2 text-sm font-semibold text-gray-300 bg-gray-700 rounded-md hover:bg-gray-600">{t('common.cancel')}</button>
                                <button onClick={handleDelete} className="px-4 py-2 text-sm font-semibold text-white bg-red-600 rounded-md hover:bg-red-700">{t('kanban.deleteConfirm.confirm')}</button>
                            </div>
                        </motion.div>
                    </motion.div>
                )}
            </AnimatePresence>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default EditCardModal;

/// frontend/components/kanban/KanbanBoard.tsx ///
import React, { useState, useRef } from 'react';
import { motion, PanInfo } from 'framer-motion';
import { KanbanSquare, Plus } from 'lucide-react';
import { KanbanState, KanbanCard, KanbanColumnId, Priority, Difficulty, KanbanColumn } from '../../types';
import KanbanCardComponent from './KanbanCardComponent';
import EditCardModal from './EditCardModal';
import { useTranslation } from '../../hooks/useTranslation';

interface KanbanBoardProps {
  initialState: KanbanState;
  onStateChange: (state: KanbanState) => void;
  isExample?: boolean;
}

const DropIndicator = () => (
    <div className="my-1 h-1 w-full bg-blue-500 rounded-full" />
);

const KanbanBoard: React.FC<KanbanBoardProps> = ({ initialState, onStateChange, isExample = false }) => {
  const { t } = useTranslation(['kanban', 'common']);
  const [boardState, setBoardState] = useState(initialState);
  const [editingCard, setEditingCard] = useState<KanbanCard | null>(null);
  const [targetColumn, setTargetColumn] = useState<KanbanColumnId | null>(null);

  const [draggedCard, setDraggedCard] = useState<{ card: KanbanCard, sourceColumnId: KanbanColumnId } | null>(null);
  const [dropIndicator, setDropIndicator] = useState<{ columnId: KanbanColumnId; index: number } | null>(null);

  const columnRefs = {
    backlog: useRef<HTMLDivElement>(null),
    todo: useRef<HTMLDivElement>(null),
    inProgress: useRef<HTMLDivElement>(null),
    done: useRef<HTMLDivElement>(null),
  };
  
  const { projectName, columns } = boardState;

  const updateAndPersistState = (newState: KanbanState) => {
    setBoardState(newState); // Always update local state for immediate feedback
    if (!isExample) {
      onStateChange(newState); // Only persist changes if not in example mode
    }
  };

  const handleDragStart = (card: KanbanCard, sourceColumnId: KanbanColumnId) => {
    setDraggedCard({ card, sourceColumnId });
  };

  const handleDrag = (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => {
    if (!draggedCard) return;

    const { point } = info;
    let dropColumnId: KanbanColumnId | null = null;

    for (const [id, ref] of Object.entries(columnRefs)) {
        if (ref.current) {
            const rect = ref.current.getBoundingClientRect();
            if (point.x > rect.left && point.x < rect.right && point.y > rect.top && point.y < rect.bottom) {
                dropColumnId = id as KanbanColumnId;
                break;
            }
        }
    }

    if (dropColumnId) {
        const columnEl = columnRefs[dropColumnId].current!;
        const cards = Array.from(columnEl.querySelectorAll('[data-kanban-card="true"]')) as HTMLElement[];
        
        let closest = { offset: Number.NEGATIVE_INFINITY, index: cards.length };

        cards.forEach((card, index) => {
            const box = card.getBoundingClientRect();
            const offset = point.y - (box.top + box.height / 2);
            if (offset < 0 && offset > closest.offset) {
                closest = { offset, index };
            }
        });
        setDropIndicator({ columnId: dropColumnId, index: closest.index });
    } else {
        setDropIndicator(null);
    }
  };
  
  const handleDragEnd = () => {
    if (!draggedCard || !dropIndicator) {
      setDraggedCard(null);
      setDropIndicator(null);
      return;
    }

    const { card, sourceColumnId } = draggedCard;
    const { columnId: destColumnId, index: destIndex } = dropIndicator;
    
    const newColumns = JSON.parse(JSON.stringify(boardState.columns));
    
    const sourceCards = newColumns[sourceColumnId].cards;
    const sourceIndex = sourceCards.findIndex((c: KanbanCard) => c.id === card.id);
    
    if (sourceIndex > -1) {
      const [removedCard] = sourceCards.splice(sourceIndex, 1);
      
      let adjustedDestIndex = destIndex;
      if (sourceColumnId === destColumnId && sourceIndex < destIndex) {
        adjustedDestIndex--;
      }
      
      const destCards = newColumns[destColumnId].cards;
      destCards.splice(adjustedDestIndex, 0, removedCard);
      
      updateAndPersistState({ ...boardState, columns: newColumns });
    }
    
    setDraggedCard(null);
    setDropIndicator(null);
  };

  const handleUpdateCard = (updatedCard: KanbanCard) => {
    const newColumns = { ...columns };
    for (const columnId in newColumns) {
      const col = newColumns[columnId as KanbanColumnId];
      const cardIndex = col.cards.findIndex(c => c.id === updatedCard.id);
      if (cardIndex > -1) {
        col.cards[cardIndex] = updatedCard;
        updateAndPersistState({ ...boardState, columns: newColumns });
        setEditingCard(null);
        return;
      }
    }
  };

  const handleAddCard = (newCard: Omit<KanbanCard, 'id'>) => {
    if (!targetColumn) return;
    const cardWithId: KanbanCard = { ...newCard, id: `card-${Date.now()}` };
    const newColumns = { ...columns };
    newColumns[targetColumn].cards.unshift(cardWithId);
    updateAndPersistState({ ...boardState, columns: newColumns });
    setEditingCard(null);
    setTargetColumn(null);
  };
  
  const handleSaveCard = (card: KanbanCard | Omit<KanbanCard, 'id'>) => {
    if ('id' in card && card.id) {
      handleUpdateCard(card);
    } else {
      handleAddCard(card);
    }
  };

  const handleDeleteCard = (cardId: string) => {
    const newColumns = { ...columns };
    for (const columnId in newColumns) {
        const col = newColumns[columnId as KanbanColumnId];
        col.cards = col.cards.filter(c => c.id !== cardId);
    }
    updateAndPersistState({ ...boardState, columns: newColumns });
    setEditingCard(null);
  };
  
  const handleOpenAddModal = (columnId: KanbanColumnId) => {
    setTargetColumn(columnId);
    setEditingCard({
        id: '', // Temporary, indicates a new card
        title: '',
        description: '',
        priority: Priority.Medium,
        difficulty: Difficulty.Medium,
        tags: [],
        notes: '',
    });
  };

  return (
    <>
      <div className="space-y-8">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <div className="flex items-baseline gap-3">
            <KanbanSquare className="w-8 h-8 text-purple-400" />
            <div>
              <h1 className="text-3xl font-bold text-white">{t('kanban.title')}</h1>
              {projectName && <p className="text-lg text-gray-400">{t('kanban.projectHeader')}: {projectName}</p>}
            </div>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 items-start">
          {Object.values(columns).map((column) => {
            const isDropTargetColumn = dropIndicator?.columnId === column.id;
            return (
              <div 
                key={column.id}
                ref={columnRefs[column.id]}
                className={`bg-gray-800/50 border border-gray-700 rounded-xl flex flex-col h-full transition-colors duration-300 ${isDropTargetColumn ? 'bg-blue-900/30 border-blue-500' : ''}`}
              >
                <div className="p-4 border-b border-gray-700 flex justify-between items-center">
                  <h3 className="font-semibold text-white">{column.title}</h3>
                  <span className="text-sm font-mono bg-gray-700/80 text-gray-300 px-2 py-0.5 rounded-md">{column.cards.length}</span>
                </div>
                <div className="p-4 space-y-3 flex-grow min-h-[200px]">
                  {column.cards.map((card, index) => (
                    <React.Fragment key={card.id}>
                      {isDropTargetColumn && dropIndicator.index === index && <DropIndicator />}
                      <KanbanCardComponent 
                        card={card} 
                        onEdit={() => setEditingCard(card)} 
                        onDragStart={() => handleDragStart(card, column.id)}
                        onDrag={handleDrag}
                        onDragEnd={handleDragEnd}
                      />
                    </React.Fragment>
                  ))}
                  {isDropTargetColumn && dropIndicator.index === column.cards.length && <DropIndicator />}
                  <button 
                    onClick={() => handleOpenAddModal(column.id)}
                    className="w-full flex items-center justify-center gap-2 p-2 text-sm text-gray-400 border-2 border-dashed border-gray-600 rounded-lg hover:bg-gray-700/50 hover:text-white hover:border-solid hover:border-gray-500 transition-all"
                  >
                    <Plus className="w-4 h-4" />
                    {t('kanban.addCard')}
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
      <EditCardModal 
        isOpen={!!editingCard}
        onClose={() => setEditingCard(null)}
        card={editingCard}
        onSave={handleSaveCard}
        onDelete={handleDeleteCard}
        isExample={isExample}
      />
    </>
  );
};

export default KanbanBoard;

/// frontend/components/kanban/KanbanCardComponent.tsx ///
import { motion, PanInfo } from 'framer-motion';
import { StickyNote } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { KanbanCard, Priority } from '../../types';
import DifficultyMeter from '../common/DifficultyMeter';

interface KanbanCardComponentProps {
  card: KanbanCard;
  onEdit: () => void;
  onDragStart?: () => void;
  onDrag: (event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) => void;
  onDragEnd: () => void;
}

const getPriorityClass = (priority: Priority) => {
  switch (priority) {
    case Priority.High: return 'bg-red-500';
    case Priority.Medium: return 'bg-yellow-500';
    case Priority.Low: return 'bg-blue-500';
    default: return 'bg-gray-500';
  }
};

const KanbanCardComponent: React.FC<KanbanCardComponentProps> = ({ card, onEdit, onDragStart = () => { }, onDrag, onDragEnd }) => {
  const { t } = useTranslation('common');
  const cursorClass = 'cursor-grab active:cursor-grabbing';

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, scale: 0.9 }}
      drag={true}
      dragElastic={0.8}
      onDragStart={onDragStart}
      onDrag={onDrag}
      onDragEnd={onDragEnd}
      whileDrag={{ scale: 1.05, boxShadow: "0px 10px 20px rgba(0,0,0,0.2)", zIndex: 50 }}
      onClick={onEdit}
      data-kanban-card="true"
      className={`p-3 bg-gray-900/70 border border-gray-700 rounded-lg transition-all relative hover:bg-gray-800/80 hover:border-gray-600 ${cursorClass}`}
    >
      <div className="flex justify-between items-start gap-2">
        <p className="text-sm font-semibold text-white pr-2">{card.title}</p>
        <div className="flex items-center gap-2 shrink-0">
          {card.notes && <span title={t('kanban.notes')!}><StickyNote className="w-4 h-4 text-gray-500" /></span>}
          <div className={`w-3 h-3 rounded-full shrink-0 mt-0.5 ${getPriorityClass(card.priority)}`} title={`${t('common.priority')}: ${t(`priority.${card.priority}`)}`}></div>
        </div>
      </div>
      <div className="mt-2">
        <DifficultyMeter difficulty={card.difficulty} />
      </div>
    </motion.div>
  );
};

export default KanbanCardComponent;

/// frontend/components/landing/FeatureDetailModal.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { X } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { AnalysisFeature } from './LandingPage';

interface FeatureDetailModalProps {
  feature: AnalysisFeature | null;
  onClose: () => void;
}

const colorMap = {
  blue: { text: 'text-blue-400', border: 'border-blue-600/60', shadowRgb: '96, 165, 250' },
  red: { text: 'text-red-400', border: 'border-red-600/60', shadowRgb: '248, 113, 113' },
  purple: { text: 'text-purple-400', border: 'border-purple-600/60', shadowRgb: '192, 132, 252' },
  teal: { text: 'text-teal-400', border: 'border-teal-600/60', shadowRgb: '45, 212, 191' },
};

const FeatureDetailModal: React.FC<FeatureDetailModalProps> = ({ feature, onClose }) => {
  const { t } = useTranslation(['landing', 'input']);

  return (
    <AnimatePresence>
      {feature && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 25 }}
            onClick={(e) => e.stopPropagation()}
            style={{ '--shadow-rgb': colorMap[feature.color].shadowRgb } as React.CSSProperties}
            className={`bg-gray-800 border ${colorMap[feature.color].border} rounded-xl w-full max-w-2xl max-h-[80vh] flex flex-col shadow-2xl relative shadow-[0_4px_30px_rgba(var(--shadow-rgb),0.2)]`}
          >
            {/* Header */}
            <div className="flex items-start justify-between p-6 border-b border-gray-700">
              <div className="flex items-center gap-4">
                <div className="bg-gray-900/50 p-3 rounded-full">
                  <feature.icon className={`w-7 h-7 ${colorMap[feature.color].text}`} />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">{t(feature.titleKey)}</h2>
                  <p className="text-gray-400">{t(feature.descriptionKey)}</p>
                </div>
              </div>
              <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors absolute top-4 right-4">
                <X className="w-6 h-6" />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto">
              <p className="text-gray-300 whitespace-pre-line leading-relaxed">
                {t(feature.detailKey)}
              </p>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default FeatureDetailModal;

/// frontend/components/landing/LandingPage.tsx ///
import React, { useState, useEffect } from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { FileText, ShieldCheck, Layers3, CodeXml, Star, BarChart3, Sparkles } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { motion } from 'framer-motion';
import FeatureDetailModal from './FeatureDetailModal';

export interface AnalysisFeature {
    icon: React.ElementType;
    titleKey: string;
    descriptionKey: string;
    detailKey: string;
    color: 'blue' | 'red' | 'purple' | 'teal';
}

const colorMap = {
    blue: { text: 'text-blue-400', hoverBorder: 'hover:border-blue-500/50', hoverShadow: 'hover:shadow-blue-500/20' },
    red: { text: 'text-red-400', hoverBorder: 'hover:border-red-500/50', hoverShadow: 'hover:shadow-red-500/20' },
    purple: { text: 'text-purple-400', hoverBorder: 'hover:border-purple-500/50', hoverShadow: 'hover:shadow-purple-500/20' },
    teal: { text: 'text-teal-400', hoverBorder: 'hover:border-teal-500/50', hoverShadow: 'hover:shadow-teal-500/20' },
};

const features: AnalysisFeature[] = [
    { 
        icon: FileText, 
        titleKey: 'input:analysisTypes.GENERAL.label',
        descriptionKey: 'input:analysisTypes.GENERAL.description',
        detailKey: 'landing.featureDetails.GENERAL',
        color: 'blue',
    },
    { 
        icon: ShieldCheck, 
        titleKey: 'input:analysisTypes.SECURITY.label',
        descriptionKey: 'input:analysisTypes.SECURITY.description',
        detailKey: 'landing.featureDetails.SECURITY',
        color: 'red',
    },
    { 
        icon: Layers3,
        titleKey: 'input:analysisTypes.SCALABILITY.label',
        descriptionKey: 'input:analysisTypes.SCALABILITY.description',
        detailKey: 'landing.featureDetails.SCALABILITY',
        color: 'purple',
    },
    { 
        icon: CodeXml, 
        titleKey: 'input:analysisTypes.CODE_QUALITY.label',
        descriptionKey: 'input:analysisTypes.CODE_QUALITY.description',
        detailKey: 'landing.featureDetails.CODE_QUALITY',
        color: 'teal',
    }
];

const FeatureCard: React.FC<{ feature: AnalysisFeature, onClick: () => void }> = ({ feature, onClick }) => {
    const { t, isLoading } = useTranslation(['landing', 'input']);
    const Icon = feature.icon;
    const styles = colorMap[feature.color];
    
    if (isLoading) {
        return <div className="bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-6 rounded-xl h-[164px] animate-pulse"></div>;
    }

    return (
        <button 
            onClick={onClick}
            className={`group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-6 rounded-xl flex flex-col items-start gap-4 text-left transition-all duration-300 hover:scale-[1.03] ${styles.hoverBorder} hover:shadow-2xl ${styles.hoverShadow} cursor-pointer`}
        >
            <div className="bg-gray-900/50 p-3 rounded-full transition-transform duration-300 group-hover:scale-110">
                <Icon className={`w-7 h-7 ${styles.text} transition-transform duration-300 group-hover:-rotate-12`}/>
            </div>
            <div>
                <p className="font-semibold text-white text-lg">{t(feature.titleKey)}</p>
                <p className="text-sm text-gray-400 mt-1">{t(feature.descriptionKey)}</p>
            </div>
        </button>
    );
};


const LandingPage: React.FC = () => {
    const { t, isLoading } = useTranslation(['landing', 'common']);
    const { login } = useAuth();
    const [selectedFeature, setSelectedFeature] = useState<AnalysisFeature | null>(null);
    const [dynamicTitle, setDynamicTitle] = useState('');

    useEffect(() => {
        if (!isLoading) {
            const titles = t('landing.dynamicPhrases') as unknown as string[];
            if (Array.isArray(titles) && titles.length > 0) {
                const randomIndex = Math.floor(Math.random() * titles.length);
                setDynamicTitle(titles[randomIndex]);
            }
        }
    }, [t, isLoading]);

    if (isLoading) {
      return <div className="bg-gray-900 text-white min-h-screen"></div>;
    }

  return (
    <div className="bg-gray-900 text-white min-h-screen font-sans selection:bg-purple-500/30">
        <div className="fixed top-0 left-0 w-full h-full bg-grid-gray-700/[0.05] -z-10"></div>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-20 space-y-20">
            
            {/* Hero Section */}
            <motion.div 
                className="text-center"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.7 }}
            >
                {/* Combined Title */}
                <div className="flex flex-wrap items-baseline justify-center gap-x-4 gap-y-2 group">
                    <div
                        className="text-3xl md:text-5xl font-bold text-gray-200"
                    >
                        <span>{t('header.title')}</span>
                    </div>
                    
                    <div className="inline-flex items-baseline justify-center gap-3">
                        <BarChart3 className="w-8 h-8 md:w-10 md:h-10 text-blue-400 transition-transform duration-300 group-hover:rotate-6" />
                        <h1 className="text-4xl md:text-6xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
                          {dynamicTitle}
                        </h1>
                        <Sparkles className="w-8 h-8 md:w-10 md:h-10 text-purple-400 transition-transform duration-300 group-hover:-rotate-6" />
                    </div>
                </div>
                
                <p className="text-gray-400 mt-6 max-w-3xl mx-auto text-lg md:text-xl">
                    {t('header.subtitle')}
                </p>
                <div className="mt-10">
                    <button
                        onClick={login}
                        className="group relative inline-flex items-center justify-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold text-lg hover:shadow-2xl hover:shadow-blue-500/30 hover:scale-105 transition-all duration-300"
                    >
                        <span>{t('landing.cta')}</span>
                        <div className="absolute -right-2 -top-2 w-5 h-5 bg-teal-400 rounded-full flex items-center justify-center animate-pulse">
                            <Star className="w-3 h-3 text-teal-900" />
                        </div>
                    </button>
                </div>
            </motion.div>

            {/* Features Section */}
            <motion.div 
                className="space-y-12"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3, duration: 0.7 }}
            >
                <div className="text-center">
                    <h2 className="text-3xl font-bold text-white">{t('landing.featuresTitle')}</h2>
                    <p className="text-gray-400 mt-2 max-w-2xl mx-auto">{t('landing.featuresSubtitle')}</p>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    {features.map((feature, index) => (
                        <FeatureCard 
                            key={index}
                            feature={feature}
                            onClick={() => setSelectedFeature(feature)}
                        />
                    ))}
                </div>
            </motion.div>
        </div>
        <FeatureDetailModal 
            feature={selectedFeature}
            onClose={() => setSelectedFeature(null)}
        />
    </div>
  );
};

export default LandingPage;

/// frontend/components/settings/ProviderSelector.tsx ///
import { ChevronDown, Cloud, Cpu, Zap } from 'lucide-react';
import * as React from 'react';
import { useState } from 'react';
import { AIProvider } from '../../services/unified-ai';

interface ProviderSelectorProps {
  currentProvider: AIProvider;
  onProviderChange: (provider: AIProvider) => void;
}

const providerInfo = {
  'gemini-direct': {
    name: 'Gemini Direct',
    icon: Zap,
    color: 'text-blue-400',
    description: 'Direct API access'
  },
  'gateway-gemini': {
    name: 'Gateway Gemini',
    icon: Cloud,
    color: 'text-green-400',
    description: 'Via gateway with streaming'
  },
  'gateway-openai': {
    name: 'Gateway OpenAI',
    icon: Cpu,
    color: 'text-orange-400',
    description: 'OpenAI via gateway'
  },
  'gateway-anthropic': {
    name: 'Gateway Anthropic',
    icon: Cloud,
    color: 'text-purple-400',
    description: 'Anthropic via gateway'
  }
};

const ProviderSelector: React.FC<ProviderSelectorProps> = ({ currentProvider, onProviderChange }) => {
  const [isOpen, setIsOpen] = useState(false);
  const currentInfo = providerInfo[currentProvider];
  const CurrentIcon = currentInfo.icon;

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 px-3 py-2 text-gray-300 hover:text-white hover:bg-gray-700/50 rounded-lg transition-colors border border-gray-600 hover:border-gray-500"
        aria-label="Select AI Provider"
      >
        <CurrentIcon className={`w-4 h-4 ${currentInfo.color}`} />
        <span className="text-sm font-medium hidden md:block">{currentInfo.name}</span>
        <ChevronDown className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>

      {isOpen && (
        <>
          {/* Backdrop */}
          <div
            className="fixed inset-0 z-10"
            onClick={() => setIsOpen(false)}
          />

          {/* Dropdown */}
          <div className="absolute right-0 mt-1 w-64 bg-gray-800 border border-gray-600 rounded-lg shadow-xl z-20">
            <div className="p-2 space-y-1">
              {Object.entries(providerInfo).map(([provider, info]) => {
                const Icon = info.icon;
                const isSelected = provider === currentProvider;

                return (
                  <button
                    key={provider}
                    onClick={() => {
                      onProviderChange(provider as AIProvider);
                      setIsOpen(false);
                    }}
                    className={`w-full flex items-center gap-3 px-3 py-2 rounded-md transition-colors text-left ${isSelected
                        ? 'bg-gray-700 text-white'
                        : 'text-gray-300 hover:bg-gray-700/50 hover:text-white'
                      }`}
                  >
                    <Icon className={`w-4 h-4 ${info.color}`} />
                    <div className="flex-1">
                      <div className="font-medium">{info.name}</div>
                      <div className="text-xs text-gray-400">{info.description}</div>
                    </div>
                    {isSelected && (
                      <div className="w-2 h-2 bg-green-400 rounded-full" />
                    )}
                  </button>
                );
              })}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default ProviderSelector;

/// frontend/components/settings/SettingsModal.tsx ///
import React, { useState } from 'react';
import { AppSettings, Theme } from '../../types';
import { useTranslation } from '../../hooks/useTranslation';
import { useLanguage } from '../../contexts/LanguageContext';
import { testApiKey } from '../../services/gemini/api';
import { useNotification } from '../../contexts/NotificationContext';
import { Check, Loader2, X, Github, Key, Settings as SettingsIcon } from 'lucide-react';

interface SettingsTabsProps {
  settings: AppSettings;
  onSettingsChange: (settings: AppSettings) => void;
}

const SettingsTabs: React.FC<SettingsTabsProps> = ({ settings, onSettingsChange }) => {
    const { t } = useTranslation(['settings', 'common']);
    const { locale, setLocale } = useLanguage();
    const { addNotification } = useNotification();

    const [apiKey, setApiKey] = useState(settings.userApiKey || '');
    const [isTestingKey, setIsTestingKey] = useState(false);
    const [testStatus, setTestStatus] = useState<'success' | 'failure' | null>(null);

    const handleFieldChange = (key: keyof AppSettings, value: any) => {
        onSettingsChange({ ...settings, [key]: value });
    };
    
    const handleApiKeyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const newKey = e.target.value;
        setApiKey(newKey);
        handleFieldChange('userApiKey', newKey);
        setTestStatus(null);
    };

    const handleTestApiKey = async () => {
        setIsTestingKey(true);
        setTestStatus(null);
        try {
            await testApiKey(apiKey);
            setTestStatus('success');
            addNotification({ message: t('notifications.apiKeyTestSuccess'), type: 'success' });
        } catch (error: any) {
            setTestStatus('failure');
            const errorMessage = error.message === "API_KEY_EMPTY" 
                ? t('notifications.apiKeyTestEmpty') 
                : t('notifications.apiKeyTestFailure');
            addNotification({ message: errorMessage, type: 'error' });
        } finally {
            setIsTestingKey(false);
        }
    };

    const renderTestButton = () => {
        if (isTestingKey) {
            return <div className="flex items-center gap-2"><Loader2 className="w-4 h-4 animate-spin" /> {t('apiKeys.gemini.testing')}</div>;
        }
        if (testStatus === 'success') {
            return <div className="flex items-center gap-2 text-green-400"><Check className="w-4 h-4" /> {t('apiKeys.gemini.testSuccess')}</div>;
        }
        if (testStatus === 'failure') {
            return <div className="flex items-center gap-2 text-red-400"><X className="w-4 h-4" /> {t('apiKeys.gemini.testFailure')}</div>;
        }
        return t('apiKeys.gemini.testButton');
    };

    return (
        <div className="space-y-8">
            {/* Preferences */}
            <section>
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2"><SettingsIcon className="w-5 h-5 text-gray-400"/> {t('tabs.preferences')}</h3>
                <div className="space-y-4">
                    <div className="flex items-start justify-between">
                        <div>
                            <label htmlFor="saveHistory" className="font-medium text-gray-200">{t('saveHistory.label')}</label>
                            <p className="text-sm text-gray-400">{t('saveHistory.description')}</p>
                        </div>
                        <input
                            id="saveHistory"
                            type="checkbox"
                            checked={settings.saveHistory}
                            onChange={(e) => handleFieldChange('saveHistory', e.target.checked)}
                            className="mt-1 w-4 h-4 rounded bg-gray-700 border-gray-600 text-purple-600 focus:ring-purple-500"
                        />
                    </div>
                    <div>
                        <label htmlFor="language" className="text-sm font-medium text-gray-300">{t('language.label')}</label>
                        <select
                            id="language"
                            value={locale}
                            onChange={(e) => setLocale(e.target.value as 'en-US' | 'pt-BR')}
                            className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
                        >
                            <option value="en-US">English (US)</option>
                            <option value="pt-BR">Português (Brasil)</option>
                        </select>
                    </div>
                </div>
            </section>

            {/* API Keys */}
            <section>
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2"><Key className="w-5 h-5 text-gray-400"/> {t('apiKeys.gemini.title')}</h3>
                <p className="text-sm text-gray-400 mb-4">{t('apiKeys.gemini.description')}</p>
                <div>
                    <label htmlFor="geminiApiKey" className="text-sm font-medium text-gray-300">{t('apiKeys.gemini.label')}</label>
                    <div className="flex gap-2 mt-1">
                        <input
                            type="password"
                            id="geminiApiKey"
                            value={apiKey}
                            onChange={handleApiKeyChange}
                            placeholder={t('apiKeys.gemini.placeholder')}
                            className="flex-grow p-2 bg-gray-900 border border-gray-600 rounded-md"
                        />
                        <button
                            onClick={handleTestApiKey}
                            disabled={isTestingKey}
                            className="px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-gray-600"
                        >
                            {renderTestButton()}
                        </button>
                    </div>
                </div>
            </section>

            {/* Integrations */}
            <section>
                <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2"><Github className="w-5 h-5 text-gray-400"/> {t('tabs.integrations')}</h3>
                <p className="text-sm text-gray-400 mb-4">{t('integrations.description')}</p>
                <div>
                    <label htmlFor="githubPat" className="text-sm font-medium text-gray-300">{t('integrations.github.patLabel')}</label>
                    <input
                        type="password"
                        id="githubPat"
                        value={settings.githubPat || ''}
                        onChange={(e) => handleFieldChange('githubPat', e.target.value)}
                        placeholder={t('integrations.github.patPlaceholder')}
                        className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
                    />
                </div>
            </section>
        </div>
    );
};

export default SettingsTabs;

/// frontend/components/settings/UserSettingsModal.tsx ///
import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { User, Settings, Database, GitBranch, Save } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';
import { useNotification } from '../../contexts/NotificationContext';
import { useConfirmation } from '../../contexts/ConfirmationContext';
import { useAppContext } from '../../contexts/AppContext';

import ProfileTab from '../user/ProfileModal';
import SettingsTabs from './SettingsModal';

import { AppSettings, UserProfile, HistoryItem, KanbanState, AllChatHistories } from '../../types';
import { get, set } from '../../lib/idb';
import { clearAllAppData } from '../../lib/storage';
import { defaultSettings, defaultUserProfile } from '../../constants';

interface UserSettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
  settings: AppSettings;
  onSaveSettings: (settings: AppSettings) => void;
  profile: UserProfile;
  onSaveProfile: (profile: UserProfile) => void;
  isExample: boolean;
}

interface BackupData {
    timestamp: string;
    version: string;
    settings: AppSettings;
    profile: UserProfile;
    history: HistoryItem[];
    kanban: KanbanState | null;
    chats: AllChatHistories;
}

const TabButton: React.FC<{ label: string; icon: React.ElementType; isActive: boolean; onClick: () => void }> = ({ label, icon: Icon, isActive, onClick }) => (
    <button
        onClick={onClick}
        className={`flex-1 flex items-center justify-center gap-2 py-3 px-2 text-sm font-medium border-b-2 transition-all duration-200
        ${isActive
            ? 'text-white border-purple-500'
            : 'text-gray-400 border-transparent hover:text-white hover:bg-gray-800/50'
        }`}
    >
        <Icon className="w-5 h-5" />
        <span className="hidden sm:inline">{label}</span>
    </button>
);

const UserSettingsModal: React.FC<UserSettingsModalProps> = ({ isOpen, onClose, settings, onSaveSettings, profile, onSaveProfile, isExample }) => {
    const { t } = useTranslation(['settings', 'common']);
    const { addNotification } = useNotification();
    const { showConfirmation } = useConfirmation();
    const { resetApplication } = useAppContext();
    const importFileRef = useRef<HTMLInputElement>(null);

    const [activeTab, setActiveTab] = useState('profile');
    const [currentSettings, setCurrentSettings] = useState(settings);
    const [currentProfile, setCurrentProfile] = useState(profile);

    // Reset local state when modal opens or props change
    useEffect(() => {
        if (isOpen) {
            setCurrentSettings(settings);
            setCurrentProfile(profile);
        }
    }, [isOpen, settings, profile]);

    const handleSaveProfile = () => {
        onSaveProfile(currentProfile);
        addNotification({ message: t('notifications.profileSaved'), type: 'success' });
    };

    const handleSaveSettings = () => {
        onSaveSettings(currentSettings);
        addNotification({ message: t('notifications.settingsSaved'), type: 'success' });
    };

    const handleSave = () => {
        if (activeTab === 'profile') {
            handleSaveProfile();
        } else {
            handleSaveSettings();
        }
        onClose();
    };

    const handleExport = async () => {
        try {
            const history = await get<HistoryItem[]>('analysisHistory') || [];
            const kanban = await get<KanbanState | null>('kanbanState') || null;
            const chats = await get<AllChatHistories>('allChatHistories') || {};

            if (history.length === 0 && !kanban && Object.keys(chats).length === 0) {
                 addNotification({ message: t('importExport.noData'), type: 'info' });
                 return;
            }

            const backupData: BackupData = {
                timestamp: new Date().toISOString(),
                version: '1.0.0', // Basic versioning
                settings: settings,
                profile: profile,
                history: history,
                kanban: kanban,
                chats: chats,
            };

            const jsonString = JSON.stringify(backupData, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            const date = new Date().toISOString().split('T')[0];
            a.download = `gemx_backup_${date}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            addNotification({ message: t('notifications.exportSuccess'), type: 'success' });
        } catch (error: any) {
            console.error('Export failed:', error);
            addNotification({ message: t('notifications.exportError'), type: 'error' });
        }
    };
    
    const handleImport = async (file: File) => {
        if (!file) return;

        const reader = new FileReader();
        reader.onload = async (event) => {
            try {
                const content = event.target?.result as string;
                if (!content) {
                    throw new Error(t('importExport.emptyFile'));
                }
                const importedData: BackupData = JSON.parse(content);
                
                // Basic validation
                if (!importedData.version || !importedData.settings || !importedData.profile || !Array.isArray(importedData.history)) {
                    throw new Error(t('importExport.invalidFile'));
                }
                
                showConfirmation({
                    title: t('importExport.confirm.title'),
                    message: t('importExport.confirm.message'),
                    confirmText: t('importExport.importLabel'),
                    onConfirm: async () => {
                        try {
                            await clearAllAppData();
                            
                            // Merge imported settings with defaults to ensure compatibility
                            const finalSettings = { ...defaultSettings, ...importedData.settings };
                            const finalProfile = { ...defaultUserProfile, ...importedData.profile };

                            await set('appSettings', finalSettings);
                            await set('userProfile', finalProfile);
                            await set('analysisHistory', importedData.history);
                            await set('kanbanState', importedData.kanban);
                            await set('allChatHistories', importedData.chats);
                            
                            addNotification({ message: t('notifications.importSuccess'), type: 'success' });

                            // Use the context to trigger a "hard reset" without a full page reload
                            resetApplication();
                            
                        } catch (error: any) {
                            addNotification({ message: error.message, type: 'error' });
                        }
                    },
                    onCancel: () => {
                         addNotification({ message: t('notifications.importAborted'), type: 'info' });
                    }
                });

            } catch (error: any) {
                console.error('Import failed:', error);
                addNotification({ message: error.message || t('notifications.importError'), type: 'error' });
            } finally {
                if (importFileRef.current) importFileRef.current.value = '';
            }
        };
        reader.readAsText(file);
    };

    const tabs = [
        { id: 'profile', label: t('tabs.profile'), icon: User },
        { id: 'preferences', label: t('tabs.preferences'), icon: Settings },
        { id: 'integrations', label: t('tabs.integrations'), icon: GitBranch },
        { id: 'data', label: t('tabs.data'), icon: Database },
    ];

    const renderTabContent = () => {
        switch (activeTab) {
            case 'profile':
                return <ProfileTab profile={currentProfile} onProfileChange={setCurrentProfile} />;
            case 'preferences':
            case 'integrations':
                return <SettingsTabs settings={currentSettings} onSettingsChange={setCurrentSettings} />;
            case 'data':
                return (
                     <div className="p-4 space-y-4">
                        <h3 className="text-lg font-semibold text-white">{t('importExport.title')}</h3>
                        <p className="text-sm text-gray-400">{t('importExport.description')}</p>
                        <div className="p-4 bg-yellow-900/30 border border-yellow-700/50 text-yellow-300 rounded-lg text-sm">
                            {t('importExport.warning')}
                        </div>
                        <div className="flex gap-4">
                            <input type="file" ref={importFileRef} onChange={(e) => e.target.files && handleImport(e.target.files[0])} className="hidden" accept=".json" />
                            <button onClick={() => importFileRef.current?.click()} className="flex-1 px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-md hover:bg-blue-700">
                                {t('importExport.importLabel')}
                            </button>
                            <button onClick={handleExport} disabled={isExample} className="flex-1 px-4 py-2 text-sm font-semibold text-white bg-gray-700 rounded-md hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed">
                                {t('importExport.exportLabel')}
                            </button>
                        </div>
                    </div>
                );
            default:
                return null;
        }
    };

    return (
        <AnimatePresence>
            {isOpen && (
                <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                    onClick={onClose}
                    className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
                >
                    <motion.div
                        initial={{ scale: 0.95, opacity: 0 }}
                        animate={{ scale: 1, opacity: 1 }}
                        exit={{ scale: 0.95, opacity: 0 }}
                        onClick={(e) => e.stopPropagation()}
                        className="bg-gray-800 border border-gray-700 rounded-xl w-full max-w-4xl flex flex-col shadow-2xl h-[680px]"
                    >
                        <div className="p-4 border-b border-gray-700">
                            <h2 className="text-xl font-bold text-white text-center">{t('title')}</h2>
                        </div>
                        
                        <div className="flex border-b border-gray-700">
                            {tabs.map(tab => (
                                <TabButton
                                    key={tab.id}
                                    label={tab.label}
                                    icon={tab.icon}
                                    isActive={activeTab === tab.id}
                                    onClick={() => setActiveTab(tab.id)}
                                />
                            ))}
                        </div>
                        
                        <div className="overflow-y-auto grow p-4">
                            {renderTabContent()}
                        </div>

                        <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-end">
                            <button
                                onClick={handleSave}
                                disabled={isExample && activeTab !== 'data'}
                                className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-purple-600 rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                <Save className="w-4 h-4" />
                                {activeTab === 'profile' ? t('profile.save') : t('save')}
                            </button>
                        </div>
                    </motion.div>
                </motion.div>
            )}
        </AnimatePresence>
    );
};

export default UserSettingsModal;

/// frontend/components/user/ProfileModal.tsx ///
import { Mail, User } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { UserProfile } from '../../types';

interface ProfileTabProps {
  profile: UserProfile;
  onProfileChange: (profile: UserProfile) => void;
}

const ProfileTab: React.FC<ProfileTabProps> = ({ profile, onProfileChange }) => {
  const { t } = useTranslation(['common', 'settings']);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onProfileChange({ ...profile, [e.target.name]: e.target.value });
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        {profile.avatar ? (
          <img src={profile.avatar} alt="User Avatar" className="w-20 h-20 rounded-full object-cover" />
        ) : (
          <div className="w-20 h-20 rounded-full bg-gray-700 flex items-center justify-center">
            <User className="w-10 h-10 text-gray-400" />
          </div>
        )}
        <div>
          <h3 className="text-xl font-semibold text-white">{profile.name}</h3>
          <p className="text-gray-400">{profile.email}</p>
          <button className="mt-2 text-sm text-blue-400 hover:underline">{t('profile.avatar.change')}</button>
        </div>
      </div>

      <div className="space-y-4">
        <div>
          <label htmlFor="name" className="text-sm font-medium text-gray-300 flex items-center gap-2">
            <User className="w-4 h-4" />
            {t('profile.nameLabel')}
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={profile.name}
            onChange={handleChange}
            placeholder={t('profile.namePlaceholder')}
            className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
          />
        </div>
        <div>
          <label htmlFor="email" className="text-sm font-medium text-gray-300 flex items-center gap-2">
            <Mail className="w-4 h-4" />
            {t('profile.emailLabel')}
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={profile.email || ''}
            onChange={handleChange}
            placeholder={t('profile.emailPlaceholder')}
            className="w-full p-2 mt-1 bg-gray-900 border border-gray-600 rounded-md"
          />
        </div>
      </div>
    </div>
  );
};

export default ProfileTab;

/// frontend/constants/index.ts ///
import { AppSettings, UserProfile } from '../types';

export const initialProjectContext = `# LookAtni Code - Gerado automaticamente
# Data: 2025-09-09T01:43:34.950Z
# Fonte: ./
# Total de arquivos: 186

// / RELEASE_NOTES.md / //
# 🚀 Kortex v0.1.0 - Release Notes

**Release Date:** July 25, 2025  
**Version:** 0.1.0  
**Status:** Production Ready

---

## 🎉 Major Milestone: Complete Desmocking Strategy

This release marks the successful completion of the **desmocking strategy**, transforming Kortex from a prototype with mock data into a production-ready monitoring dashboard with real API integrations.

---

## ✨ What's New

### 🔄 Real Data Integration

- **Dashboard**: Live GitHub and Azure DevOps data integration
- **Servers Page**: Real-time MCP server monitoring and management
- **Analytics**: Comprehensive data aggregation from multiple sources
- **Helm/Kubernetes**: Full cluster and release management capabilities
- **API Configuration**: Dynamic API endpoint management

### 🚀 Performance & Reliability

- **WebSocket System**: Real-time updates with auto-reconnection
- **Resilient Fallbacks**: Graceful degradation when APIs are unavailable
- **Visual Indicators**: Clear data source status (Real Data vs Demo Mode)
- **Auto-refresh**: Intelligent background data refresh (3-5 minute intervals)
- **Error Handling**: Comprehensive error boundaries and retry mechanisms

### 🛠️ Developer Experience

- **TypeScript 100%**: Strict type safety with zero compilation errors
- **Mock API Server**: Complete development environment with 10 endpoints
- **Modular Architecture**: Clean separation of concerns and reusable components
- **Hot Reload**: Fast development cycle with instant updates
- **Build Optimization**: Static site generation for fast deployments

---

## 🏗️ Technical Achievements

### Architecture Overhaul

\`\`\`
BEFORE: Static mock data → Simple UI rendering
AFTER:  Real APIs → Resilient Service Layer → WebSocket Updates → UI with Fallbacks
\`\`\`

### Performance Metrics

- **Build Success**: 14/14 pages compiling successfully
- **TypeScript Errors**: 0 compilation errors
- **API Coverage**: 10 endpoints fully implemented and tested
- **Real Data Coverage**: 5/5 major pages fully desmocked

### Quality Improvements

- **Code Coverage**: Comprehensive error handling and edge cases
- **Documentation**: Complete technical documentation and guides
- **Standards Compliance**: Follows TypeScript and Markdown best practices
- **Accessibility**: Responsive design with dark mode support

---

## 🔮 Future Roadmap

### Immediate Next Steps (v0.2.0)
- Connect to production StatusRafa and Kosmos APIs
- Implement authentication and authorization
- Add advanced alerting and notification systems
- Expand monitoring capabilities

### Planned Enhancements
- **Multi-cloud Support**: AWS, GCP integration
- **Advanced Analytics**: Machine learning insights
- **Custom Dashboards**: User-configurable interfaces
- **Mobile Application**: React Native companion app

---

// / docs/README.md / //
# Kortex Documentation

This directory contains the complete documentation for Kortex, built with MkDocs Material.

## 🚀 Quick Start

### Prerequisites

- Python 3.8+
- UV package manager installed

### Setup

1. **Install dependencies**:

   \`\`\`bash
   uv sync
   \`\`\`

2. **Activate virtual environment**:

   \`\`\`bash
   source .venv/bin/activate
   \`\`\`

3. **Start development server**:

   \`\`\`bash
   mkdocs serve
   \`\`\`

   Or use the helper script:

   \`\`\`bash
   ./docs-dev.sh serve
   \`\`\`

4. **Open in browser**: <http://localhost:8000>

## 🌐 Real-Time DevOps & AI Monitoring Dashboard

**Kortex** is a production-ready, enterprise-grade monitoring dashboard designed for modern development teams. It provides real-time insights into API usage, system health, and development workflows across GitHub, Azure DevOps, Kubernetes, and AI infrastructure.

Built with **Next.js 15**, **TypeScript**, and **Tailwind CSS**, Kortex offers a responsive, real-time interface powered by WebSocket connections and resilient API integrations.

---

## 🏗️ Architecture

\`\`\`mermaid
graph TD
    A[Kortex Dashboard] --> B[Real-Time Hooks]
    B --> C[Resilient Service Layer]
    C --> D[Mock API Server]
    C --> E[Production APIs]
    
    D --> F[GitHub API Mock]
    D --> G[Azure DevOps Mock]
    D --> H[MCP Server Mock]
    D --> I[Helm/K8s Mock]
    
    E --> J[StatusRafa MCP]
    E --> K[Kosmos Backend]
    E --> L[External APIs]
    
    A --> M[WebSocket System]
    M --> N[Real-time Events]
    M --> O[Auto-reconnect]
\`\`\`

### Core Components

- **Frontend**: Next.js 15 with TypeScript and Tailwind CSS
- **State Management**: React Context API with custom hooks
- **Real-time**: WebSocket connections with automatic reconnection
- **API Layer**: Resilient service layer with fallback mechanisms
- **Development**: Mock API server for local development
- **Production**: Integration with StatusRafa MCP and Kosmos backends
`;

export const defaultSettings: AppSettings = {
    saveHistory: true,
    theme: 'dark',
    tokenLimit: 1000000,
    userApiKey: '',
    githubPat: '',
    jiraInstanceUrl: '',
    jiraUserEmail: '',
    jiraApiToken: '',
};

export const defaultUserProfile: UserProfile = {
    name: 'GemX User',
    email: '',
    avatar: '',
};

/// frontend/contexts/AppContext.tsx ///
import React, { createContext, useState, useContext, ReactNode, useCallback } from 'react';

interface AppContextType {
  resetApplication: () => void;
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export const AppProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [appKey, setAppKey] = useState(0);

  const resetApplication = useCallback(() => {
    setAppKey(prevKey => prevKey + 1);
  }, []);

  // By passing the key down, we allow the consumer to force a remount
  // of any component that uses this key.
  return (
    <AppContext.Provider value={{ resetApplication }}>
      {React.cloneElement(children as React.ReactElement, { key: appKey })}
    </AppContext.Provider>
  );
};

export const useAppContext = (): AppContextType => {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useAppContext must be used within an AppProvider');
  }
  return context;
};

/// frontend/contexts/AuthContext.tsx ///
import React, { createContext, useState, useContext, ReactNode } from 'react';

// Define the shape of our mock user
interface User {
  name: string;
}

interface AuthContextType {
  user: User | null;
  login: () => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// A simple provider component that wraps our app
export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  // Mock login function - in a real app, this would involve API calls
  const login = () => {
    // For now, just set a mock user object
    setUser({ name: 'Mock User' });
  };

  // Logout function
  const logout = () => {
    setUser(null);
  };

  const value = { user, login, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook to easily access auth context
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

/// frontend/contexts/ConfirmationContext.tsx ///
import React, { createContext, useState, useContext, ReactNode, useCallback } from 'react';

interface ConfirmationOptions {
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
  onConfirm: () => void;
  onCancel?: () => void;
}

interface ConfirmationContextType {
  showConfirmation: (options: ConfirmationOptions) => void;
  hideConfirmation: () => void;
  options: ConfirmationOptions | null;
  isOpen: boolean;
}

const ConfirmationContext = createContext<ConfirmationContextType | undefined>(undefined);

export const ConfirmationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [options, setOptions] = useState<ConfirmationOptions | null>(null);
  const [isOpen, setIsOpen] = useState(false);

  const showConfirmation = useCallback((opts: ConfirmationOptions) => {
    setOptions(opts);
    setIsOpen(true);
  }, []);
  
  const hideConfirmation = useCallback(() => {
    setIsOpen(false);
    // Give time for animation before clearing options
    setTimeout(() => setOptions(null), 300);
  }, []);

  const value = {
    showConfirmation,
    hideConfirmation,
    options,
    isOpen,
  };

  return (
    <ConfirmationContext.Provider value={value}>
      {children}
    </ConfirmationContext.Provider>
  );
};

export const useConfirmation = (): ConfirmationContextType => {
  const context = useContext(ConfirmationContext);
  if (context === undefined) {
    throw new Error('useConfirmation must be used within a ConfirmationProvider');
  }
  return context;
};

/// frontend/contexts/LanguageContext.tsx ///
import * as React from 'react';
import { createContext, ReactNode, useCallback, useContext, useEffect, useState } from 'react';

type Locale = 'en-US' | 'pt-BR';
type Translations = Record<string, any>;

interface LanguageContextType {
  locale: Locale;
  setLocale: (locale: Locale) => void;
  translations: Translations;
  loadNamespace: (namespace: string) => Promise<void>;
  isLoading?: boolean;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const getInitialLocale = (): Locale => {
  const storedLocale = localStorage.getItem('locale') as Locale;
  if (storedLocale && ['en-US', 'pt-BR'].includes(storedLocale)) {
    return storedLocale;
  }
  const browserLang = navigator.language;
  if (browserLang.startsWith('pt')) {
    return 'pt-BR';
  }
  return 'en-US';
};

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [locale, setLocaleState] = useState<Locale>(getInitialLocale());
  const [translations, setTranslations] = useState<Translations>({});
  const [loadedNamespaces, setLoadedNamespaces] = useState<Record<string, boolean>>({});
  const [loadingNamespaces, setLoadingNamespaces] = useState<Record<string, boolean>>({});
  const [isInitialLoad, setIsInitialLoad] = useState(true);
  const [isLoading, setIsLoading] = useState(true);

  const setLocale = (newLocale: Locale) => {
    setLocaleState(newLocale);
    setTranslations({});
    setLoadedNamespaces({});
    setLoadingNamespaces({});
    setIsInitialLoad(true);
    localStorage.setItem('locale', newLocale);
  };

  const loadNamespace = useCallback(async (namespace: string) => {
    const namespaceKey = `${locale}-${namespace}`;
    if (loadedNamespaces[namespaceKey] || loadingNamespaces[namespaceKey]) {
      return;
    }

    setLoadingNamespaces(prev => ({ ...prev, [namespaceKey]: true }));
    try {
      const response = await fetch(`/locales/${locale}/${namespace}.json`);
      if (!response.ok) {
        throw new Error(`Failed to load translations for ${locale}/${namespace}`);
      }
      const data = await response.json();
      setTranslations(prev => ({
        ...prev,
        [namespace]: data,
      }));
      setLoadedNamespaces(prev => ({ ...prev, [namespaceKey]: true }));
    } catch (error) {
      console.error(error);
    } finally {
      setLoadingNamespaces(prev => ({ ...prev, [namespaceKey]: false }));
    }
  }, [locale, loadedNamespaces, loadingNamespaces]);

  useEffect(() => {
    if (isInitialLoad) {
      loadNamespace('common').finally(() => {
        setIsInitialLoad(false);
      });
    }
  }, [locale, isInitialLoad, loadNamespace]);

  const value = {
    locale,
    setLocale,
    translations,
    loadNamespace,
  };

  return (
    <LanguageContext.Provider value={value}>
      {!isInitialLoad ? children : null}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

/// frontend/contexts/NotificationContext.tsx ///
import React, { createContext, useState, useContext, ReactNode, useCallback } from 'react';
import { Notification, NotificationType } from '../types';

interface NotificationContextType {
  notifications: Notification[];
  addNotification: (notification: Omit<Notification, 'id'>) => void;
  removeNotification: (id: number) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const removeNotification = useCallback((id: number) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  }, []);

  const addNotification = useCallback((notification: Omit<Notification, 'id'>) => {
    const id = Date.now();
    setNotifications(prev => [...prev, { ...notification, id }]);
  }, []);

  const value = {
    notifications,
    addNotification,
    removeNotification,
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = (): NotificationContextType => {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

/// frontend/data/exampleAnalysis.ts ///
import { ProjectAnalysis, HistoryItem, Priority, Difficulty, Effort, AnalysisType, MaturityLevel } from '../types';

type TFunction = (key: string, options?: any) => string;

// Este é o item mais recente da história, o que será exibido.
export const exampleAnalysis = (t: TFunction): ProjectAnalysis => ({
  projectName: t('example:kortex.projectName'),
  analysisType: AnalysisType.General,
  summary: t('example:kortex.summary'),
  strengths: [
    t('example:kortex.strengths.s1'),
    t('example:kortex.strengths.s2'),
    t('example:kortex.strengths.s3'),
    t('example:kortex.strengths.s4'),
    t('example:kortex.strengths.s5')
  ],
  improvements: [
    {
      title: t('example:kortex.improvements.i1.title'),
      description: t('example:kortex.improvements.i1.description'),
      priority: Priority.High,
      difficulty: Difficulty.Medium,
      businessImpact: t('example:kortex.improvements.i1.businessImpact')
    },
    {
      title: t('example:kortex.improvements.i2.title'),
      description: t('example:kortex.improvements.i2.description'),
      priority: Priority.Medium,
      difficulty: Difficulty.High,
      businessImpact: t('example:kortex.improvements.i2.businessImpact')
    },
    {
      title: t('example:kortex.improvements.i3.title'),
      description: t('example:kortex.improvements.i3.description'),
      priority: Priority.Medium,
      difficulty: Difficulty.Medium,
      businessImpact: t('example:kortex.improvements.i3.businessImpact')
    }
  ],
  nextSteps: {
    shortTerm: [
      {
        title: t('example:kortex.nextSteps.shortTerm.s1.title'),
        description: t('example:kortex.nextSteps.shortTerm.s1.description'),
        difficulty: Difficulty.Medium
      },
      {
        title: t('example:kortex.nextSteps.shortTerm.s2.title'),
        description: t('example:kortex.nextSteps.shortTerm.s2.description'),
        difficulty: Difficulty.Low
      }
    ],
    longTerm: [
      {
        title: t('example:kortex.nextSteps.longTerm.l1.title'),
        description: t('example:kortex.nextSteps.longTerm.l1.description'),
        difficulty: Difficulty.High
      },
      {
        title: t('example:kortex.nextSteps.longTerm.l2.title'),
        description: t('example:kortex.nextSteps.longTerm.l2.description'),
        difficulty: Difficulty.High
      }
    ]
  },
  viability: {
    score: 9,
    assessment: t('example:kortex.viability.assessment')
  },
  roiAnalysis: {
    assessment: t('example:kortex.roi.assessment'),
    potentialGains: [
      t('example:kortex.roi.gains.g1'),
      t('example:kortex.roi.gains.g2'),
      t('example:kortex.roi.gains.g3'),
      t('example:kortex.roi.gains.g4')
    ],
    estimatedEffort: Effort.Medium,
  },
  maturity: {
    level: MaturityLevel.Production,
    assessment: t('example:kortex.maturity.assessment')
  },
  usageMetadata: {
    promptTokenCount: 1850,
    candidatesTokenCount: 650,
    totalTokenCount: 2500,
  }
});

// Histórico fictício expandido para o modo de exemplo
export const exampleHistory = (t: TFunction, locale: 'en-US' | 'pt-BR'): HistoryItem[] => {
    const mainAnalysis = exampleAnalysis(t);

    return [
      // --- Projeto: Kortex ---
      // Mais recente (corresponde a `exampleAnalysis`)
      {
        id: 1004,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-25T10:00:00").toLocaleString(locale),
        analysis: mainAnalysis,
        projectContext: t('example:projectContext'),
      },
      // Análise intermediária (teve uma queda)
      {
        id: 1003,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-18T14:30:00").toLocaleString(locale),
        analysis: {
          ...mainAnalysis,
          viability: { score: 7, assessment: t('example:history.kortex.h1.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.MVP },
          usageMetadata: { promptTokenCount: 1800, candidatesTokenCount: 590, totalTokenCount: 2390 },
        },
        projectContext: t('example:projectContext'),
      },
      // Análise inicial
      {
        id: 1002,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-10T09:15:00").toLocaleString(locale),
        analysis: {
          ...mainAnalysis,
          viability: { score: 8, assessment: t('example:history.kortex.h2.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.MVP },
          usageMetadata: { promptTokenCount: 1750, candidatesTokenCount: 610, totalTokenCount: 2360 },
        },
        projectContext: t('example:projectContext'),
      },
      // Análise de segurança (outro tipo)
      {
        id: 1001,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.Security,
        timestamp: new Date("2025-07-05T11:00:00").toLocaleString(locale),
        analysis: {
          ...mainAnalysis,
          analysisType: AnalysisType.Security,
          summary: t('example:history.kortex.h3.summary'),
          viability: { score: 7, assessment: t('example:history.kortex.h3.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.Prototype },
          usageMetadata: { promptTokenCount: 2100, candidatesTokenCount: 720, totalTokenCount: 2820 },
        },
        projectContext: t('example:projectContext'),
      },
      // Análise mais antiga (score mais baixo)
      {
        id: 1000,
        projectName: t('example:history.kortex.h4.projectName'),
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-02T16:45:00").toLocaleString(locale),
        analysis: {
          ...mainAnalysis,
          projectName: t('example:history.kortex.h4.projectName'),
          viability: { score: 6, assessment: t('example:history.kortex.h4.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.Prototype },
          usageMetadata: { promptTokenCount: 1700, candidatesTokenCount: 550, totalTokenCount: 2250 },
        },
        projectContext: t('example:projectContext'),
      },

      // --- Projeto: Orion UI Kit ---
      {
        id: 1005,
        projectName: t('example:history.orion.projectName'),
        analysisType: AnalysisType.CodeQuality,
        timestamp: new Date("2025-07-26T11:00:00").toLocaleString(locale),
        analysis: {
          ...mainAnalysis, // Reutilizando a estrutura para simplificar
          projectName: t('example:history.orion.projectName'),
          analysisType: AnalysisType.CodeQuality,
          summary: t('example:history.orion.summary'),
          viability: { score: 8, assessment: t('example:history.orion.assessment') },
          maturity: { level: MaturityLevel.Optimized, assessment: t('example:history.orion.maturityAssessment') },
          usageMetadata: { promptTokenCount: 1500, candidatesTokenCount: 450, totalTokenCount: 1950 },
        },
        projectContext: t('example:projectContext'),
      },
    ];
};

/// frontend/hooks/useNetworkStatus.ts ///
import { useState, useEffect } from 'react';

export const useNetworkStatus = () => {
  const [isOnline, setIsOnline] = useState(typeof navigator !== 'undefined' ? navigator.onLine : true);

  useEffect(() => {
    if (typeof window === 'undefined') return;

    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return isOnline;
};

/// frontend/hooks/usePersistentState.ts ///
import { useState, useEffect, useCallback } from 'react';
import { get, set } from '../lib/idb';

type SetValue<T> = (value: T | ((prevValue: T) => T)) => void;

/**
 * A custom hook that provides a state management solution similar to `useState`,
 * but with the added feature of persisting the state to client-side storage.
 *
 * It prioritizes using IndexedDB for its larger storage capacity and asynchronous nature,
 * making it suitable for storing complex objects or large amounts of data. If IndexedDB
 * is unavailable or fails, it gracefully falls back to using `localStorage`.
 *
 * This hook abstracts away the complexities of data persistence, allowing components
 * to manage state without being concerned about the underlying storage mechanism.
 *
 * @template T The type of the state to be managed.
 * @param {string} key The unique key to identify the state in storage.
 * @param {T} defaultValue The initial value of the state if none is found in storage.
 * @returns {[T, SetValue<T>]} A tuple containing the current state and a function to update it.
 */
export const usePersistentState = <T>(key: string, defaultValue: T): [T, SetValue<T>] => {
  const [value, setValue] = useState<T>(defaultValue);

  // Load the persisted state from storage on initial render.
  useEffect(() => {
    let isMounted = true;
    
    const loadState = async () => {
      try {
        // 1. Try IndexedDB first (asynchronous)
        const idbValue = await get<T>(key);
        if (idbValue !== undefined && isMounted) {
          setValue(idbValue);
          return;
        }

        // 2. Fallback to localStorage (synchronous)
        const lsValue = localStorage.getItem(key);
        if (lsValue !== null && isMounted) {
          setValue(JSON.parse(lsValue));
          return;
        }

      } catch (error) {
        console.error(`Failed to load state for key "${key}" from storage.`, error);
      }
      
      // 3. Use default value if nothing is found
      if (isMounted) {
        setValue(defaultValue);
      }
    };

    loadState();
    
    return () => { isMounted = false; };
  }, [key]); // Only run on mount or if key changes

  // Persist the state to storage whenever it changes.
  useEffect(() => {
    // We don't want to persist the initial default value until it's been
    // explicitly set by the user or loaded from storage.
    // This check prevents overwriting existing stored data with the default on first render.
    if (value === defaultValue && localStorage.getItem(key) === null) {
      // A more complex check could be done with IDB but this is a reasonable heuristic.
      return;
    }
    
    const saveState = async () => {
      try {
        // Write to both to ensure data is available even if one system fails
        // and to keep localStorage as a simple, readable backup.
        await set(key, value);
        localStorage.setItem(key, JSON.stringify(value));
      } catch (error) {
        console.error(`Failed to save state for key "${key}" to storage.`, error);
      }
    };
    
    saveState();
  }, [key, value, defaultValue]);

  return [value, setValue];
};

/// frontend/hooks/useTranslation.ts ///
import { useEffect, useMemo } from 'react';
import { useLanguage } from '../contexts/LanguageContext';

const getDeepValue = (obj: any, path: string[]): any => {
    return path.reduce((acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined), obj);
};

export const useTranslation = (namespaces: string | string[] = 'common') => {
  const { translations, loadNamespace } = useLanguage();
  const nsArray = Array.isArray(namespaces) ? namespaces : [namespaces];

  useEffect(() => {
    nsArray.forEach(ns => {
      loadNamespace(ns);
    });
  }, [nsArray, loadNamespace]);

  const isLoading = useMemo(() => {
    return nsArray.some(ns => translations[ns] === undefined);
  }, [nsArray, translations]);
  
  const t = (key: string, options?: Record<string, string | number>): string => {
      // Prevent running t function if translations are not ready
      if (isLoading) return '';

      const keyParts = key.split(':');
      let result: any;

      if (keyParts.length > 1) {
          const [ns, lookupKey] = keyParts;
          const path = lookupKey.split('.');
          result = getDeepValue(translations[ns], path);
      } else {
          const path = key.split('.');
          for (const searchNs of nsArray) {
              const found = getDeepValue(translations[searchNs], path);
              if (found !== undefined) {
                  result = found;
                  break;
              }
          }
      }

      if (result === undefined) {
          console.warn(`Translation key not found: ${key}`);
          return key;
      }
      
      if (options && typeof result === 'string') {
          return Object.keys(options).reduce((acc, optionKey) => {
              const regex = new RegExp(`{${optionKey}}`, 'g');
              return acc.replace(regex, String(options[optionKey]));
          }, result);
      }

      return result;
  };

  return { t, isLoading };
};

/// frontend/index.css ///
/*
 * Global styles
 */

/* @tailwind postcss; */
/* @tailwindcss/postcss */
/* @import 'tailwindcss'; */
/* @import 'tailwindcss/base'; */

/// frontend/index.html ///
<!DOCTYPE html>
<html lang="en">

  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="UTF-8" />

    <!-- Enhanced SEO & Branding for Kubex.world -->
    <title>GemX Analyzer: AI Prompt Crafter | Kubex — Code Fast. Own Everything.</title>
    <meta name="description"
      content="GemX Analyzer: Transform raw ideas into professional AI prompts. Part of Kubex Ecosystem — modular, open-source, AI-powered tools for Devs, Ops & Builders. No lock-in. No excuses." />
    <meta name="keywords"
      content="AI prompts, prompt engineering, Kubex, open source, no lock-in, modular tools, AI development" />
    <meta name="author" content="Kubex Ecosystem" />

    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="GemX Analyzer: AI Prompt Crafter | Kubex — Code Fast. Own Everything." />
    <meta property="og:description"
      content="Transform raw ideas into professional AI prompts. Democratizing modular, accessible and powerful tech. From old laptops to enterprise clusters." />
    <meta property="og:url" content="https://kubex.world/grompt" />
    <meta property="og:image" content="https://kubex.world/assets/kubex_og.png" />
    <meta property="og:site_name" content="Kubex Ecosystem" />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="GemxAnalyzer: AI Prompt Crafter | Kubex Ecosystem" />
    <meta name="twitter:description"
      content="AI-powered prompt engineering tool. Open-source ecosystem. No lock-in. No excuses." />
    <meta name="twitter:image" content="https://kubex.world/assets/kubex_og.png" />

    <!-- Favicons & App Icons -->
    <link rel="icon" href="/assets/favicon.ico" />
    <link rel="icon" type="image/svg+xml" href="/assets/icons/favicon.svg" />
    <link rel="apple-touch-icon" href="/assets/apple-touch-icon.png" />
    <link rel="mask-icon" href="/assets/safari-pinned-tab.svg" color="#00f0ff" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <!-- Viewport & PWA -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#0a0f14" id="theme-color-meta">

    <!-- tailwindcss -->
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

    <link rel="canonical" href="https://kubex.world/grompt" />
    <script>
      // Configure Tailwind CSS to use class-based dark mode
      tailwind = {
        config: {
          darkMode: 'class',
        }
      }

      // Detect browsers that don't support theme-color
      function isThemeColorSupported() {
        const userAgent = navigator.userAgent.toLowerCase();
        const isFirefox = userAgent.includes('firefox');
        const isOpera = userAgent.includes('opera') || userAgent.includes('opr');
        return !(isFirefox || isOpera);
      }

      // Update theme color meta tag based on theme
      function updateThemeColor(theme) {
        const metaThemeColor = document.getElementById('theme-color-meta');
        if (metaThemeColor) {
          metaThemeColor.setAttribute('content', theme === 'dark' ? '#0a0f14' : '#f9fafb');
        }

        // Apply visual fallback for unsupported browsers
        if (!isThemeColorSupported()) {
          const fallbackStyle = document.getElementById('theme-color-fallback') || document.createElement('style');
          if (!fallbackStyle.id) {
            fallbackStyle.id = 'theme-color-fallback';
            document.head.appendChild(fallbackStyle);
          }

          const color = theme === 'dark' ? '#0a0f14' : '#f9fafb';
          fallbackStyle.textContent = `
            /* Theme color fallback for unsupported browsers */
            html { border-top: 4px solid ${color}; }
            body::before {
              content: '';
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 4px;
              background: ${color};
              z-index: 9999;
              pointer-events: none;
            }
          `;
        }
      }

      // Initialize theme color on page load
      document.addEventListener('DOMContentLoaded', function () {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');
        updateThemeColor(initialTheme);

        // Listen for theme changes
        const observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
              const isDark = document.documentElement.classList.contains('dark');
              updateThemeColor(isDark ? 'dark' : 'light');
            }
          });
        });

        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ['class']
        });
      });
    </script>
    <!-- <script src="https://cdn.tailwindcss.com"></script> -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700;900&family=IBM+Plex+Mono:wght@400;500&display=swap"
      rel="stylesheet">
    <style>
      body {
        font-family: 'IBM Plex Mono', monospace;
        transition: background-color 0.3s ease-in-out;
      }

      body.dark-theme {
        background-color: #0a0f14;
        background-image:
          radial-gradient(circle at 25px 25px, rgba(0, 240, 255, 0.1) 2%, transparent 0%),
          radial-gradient(circle at 75px 75px, rgba(0, 240, 255, 0.05) 2%, transparent 0%);
        background-size: 100px 100px;
      }

      body.light-theme {
        background-color: #f9fafb;
        background-image:
          radial-gradient(circle at 25px 25px, rgba(0, 0, 0, 0.03) 2%, transparent 0%),
          radial-gradient(circle at 75px 75px, rgba(0, 0, 0, 0.02) 2%, transparent 0%);
        background-size: 100px 100px;
      }

      .font-orbitron {
        font-family: 'Orbitron', sans-serif;
      }

      .font-plex-mono {
        font-family: 'IBM Plex Mono', monospace;
      }

      .neon-glow-cyan {
        text-shadow: 0 0 5px rgba(0, 240, 255, 0.7), 0 0 10px rgba(0, 240, 255, 0.5), 0 0 15px rgba(0, 240, 255, 0.3);
      }

      .light-shadow-sky {
        text-shadow: 0 0 8px rgba(14, 165, 233, 0.4);
      }

      .neon-glow-green {
        text-shadow: 0 0 5px rgba(0, 230, 118, 0.7), 0 0 10px rgba(0, 230, 118, 0.5), 0 0 15px rgba(0, 230, 118, 0.3);
      }

      .light-shadow-emerald {
        text-shadow: 0 0 8px rgba(16, 185, 129, 0.4);
      }

      .neon-border-cyan {
        box-shadow: 0 0 2px #fff, 0 0 4px #fff, 0 0 6px #00f0ff, 0 0 10px #00f0ff, 0 0 12px #00f0ff, 0 0 15px #00f0ff, 0 0 20px #00f0ff;
      }

      .line-clamp-2 {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        line-clamp: 2;
        -webkit-box-orient: vertical;
      }
    </style>
    <script type="importmap">
{
  "imports": {
    "react/": "https://esm.sh/react@^19.1.1/",
    "react": "https://esm.sh/react@^19.1.1",
    "react-dom/": "https://esm.sh/react-dom@^19.1.1/",
    "react-dom/client": "https://esm.sh/react-dom@^19.1.1/client",
    "@google/genai": "https://esm.sh/@google/genai@^1.17.0",
    "lucide-react": "https://esm.sh/lucide-react@^0.542.0",
    "react-markdown": "https://esm.sh/react-markdown@9.0.1",
    "remark-gfm": "https://esm.sh/remark-gfm@4.0.0",
    "react-syntax-highlighter": "https://esm.sh/react-syntax-highlighter@15.5.0",
    "react-syntax-highlighter/dist/esm/styles/prism": "https://esm.sh/react-syntax-highlighter@15.5.0/dist/esm/styles/prism"
  }
}
</script>
    <link rel="stylesheet" href="/index.css">
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/index.tsx"></script>
  </body>

</html>

/// frontend/index.tsx ///
import * as React from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './App';

// const swExceptions = [
//   '//ai.studio',
//   'scf.usercontent.goog',
//   'generativelanguage.googleapis.com'
// ]

// // Register the service worker for PWA capabilities
// if ('serviceWorker' in navigator && swExceptions.filter((v, i) => ((window.location || {}).origin || '').indexOf(v) < 0).length == 0) {
//   window.addEventListener('load', () => {
//     navigator.serviceWorker.register('/sw.ts')
//       .then(registration => {
//         console.log('ServiceWorker registration successful with scope: ', registration.scope);
//       })
//       .catch(err => {
//         console.log('ServiceWorker registration failed: ', err);
//       });
//   });
// }

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

/// frontend/lib/idb.ts ///
const DB_NAME = 'project-analyzer-db';
const DB_VERSION = 1;
const STORE_NAME = 'keyval';

let dbPromise: Promise<IDBDatabase> | null = null;

/**
 * Creates and initializes the IndexedDB database and object store.
 * This function handles the initial setup and version upgrades.
 * @returns A promise that resolves with the IDBDatabase instance.
 */
function createDB(): Promise<IDBDatabase> {
  if (dbPromise) {
    return dbPromise;
  }

  dbPromise = new Promise((resolve, reject) => {
    if (typeof indexedDB === 'undefined') {
        reject('IndexedDB is not supported in this browser.');
        return;
    }

    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME);
      }
    };

    request.onsuccess = (event) => {
      resolve((event.target as IDBOpenDBRequest).result);
    };

    request.onerror = (event) => {
      console.error('IndexedDB error:', (event.target as IDBOpenDBRequest).error);
      reject('IndexedDB error');
      dbPromise = null; // Reset promise on error
    };
  });

  return dbPromise;
}

/**
 * Retrieves a value from the IndexedDB store by its key.
 * @template T The expected type of the value.
 * @param {string} key The key of the item to retrieve.
 * @returns {Promise<T | undefined>} A promise that resolves with the value, or undefined if not found.
 */
export async function get<T>(key: string): Promise<T | undefined> {
  const db = await createDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORE_NAME, 'readonly');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.get(key);

    request.onsuccess = () => {
      resolve(request.result as T);
    };

    request.onerror = () => {
      console.error('Error getting data from IndexedDB:', request.error);
      reject(request.error);
    };
  });
}

/**
 * Stores a value in the IndexedDB store with a given key.
 * @param {string} key The key to store the value under.
 * @param {any} value The value to be stored.
 * @returns {Promise<void>} A promise that resolves when the operation is complete.
 */
export async function set(key: string, value: any): Promise<void> {
  const db = await createDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORE_NAME, 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.put(value, key);

    request.onsuccess = () => {
      resolve();
    };

    request.onerror = () => {
      console.error('Error setting data in IndexedDB:', request.error);
      reject(request.error);
    };
  });
}

/**
 * Clears all key-value pairs from the object store.
 * @returns {Promise<void>} A promise that resolves when the operation is complete.
 */
export async function clear(): Promise<void> {
  const db = await createDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORE_NAME, 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.clear();

    request.onsuccess = () => {
      resolve();
    };

    request.onerror = () => {
      console.error('Error clearing IndexedDB store:', request.error);
      reject(request.error);
    };
  });
}

/// frontend/lib/storage.ts ///
import { clear as clearIdb } from './idb';

// List of all keys managed by usePersistentState or stored directly
const APP_STORAGE_KEYS = [
    'projectFiles',
    'analysisHistory',
    'kanbanState',
    'appSettings',
    'userProfile',
    'usageTracking',
    'allChatHistories',
    'locale', // From LanguageContext
    'analysisFeedback' // From SuggestionsDisplay
];

/**
 * Clears all application data from both IndexedDB and localStorage.
 * This is a destructive operation used for data import or a hard reset.
 */
export const clearAllAppData = async (): Promise<void> => {
    try {
        // Clear IndexedDB store
        await clearIdb();
        console.log('IndexedDB store cleared.');

        // Clear localStorage keys
        APP_STORAGE_KEYS.forEach(key => {
            localStorage.removeItem(key);
        });
        console.log('LocalStorage app keys cleared.');
        
    } catch (error) {
        console.error('Failed to clear all application data:', error);
        throw new Error('Could not clear existing application data. Import aborted.');
    }
};

/// frontend/metadata.json ///
{
  "name": "GemX Analyzer",
  "description": "Uma aplicação web que utiliza a API Gemini para analisar a documentação de um projeto de software e fornecer sugestões sobre sua continuidade e viabilidade. O usuário pode colar a documentação, e a IA gera uma análise estruturada.",
  "requestFramePermissions": []
}

/// frontend/package.json ///
{
  "name": "gemx-analyzer",
  "private": false,
  "version": "2.0.0",
  "description": "AI prompt crafting tool that transforms raw ideas into professional prompts. Part of Kubex Ecosystem — modular, open-source tools following principles of radical simplicity and no lock-in.",
  "keywords": [
    "ai",
    "prompts",
    "prompt-engineering",
    "kubex",
    "open-source",
    "no-lock-in",
    "modular",
    "react",
    "typescript"
  ],
  "markdown": "github",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kubex-ecosystem/analyzer.git"
  },
  "author": "Rafael Mori <faelmori@live.com>",
  "license": "MIT",
  "homepage": "https://kubex.world",
  "readme": "https://github.com/kubex-ecosystem/analyzer/README.md",
  "bugs": {
    "url": "https://github.com/kubex-ecosystem/analyzer/issues"
  },
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "build:static": "vite build --mode production",
    "serve": "vite preview --port 4173 --host"
  },
  "dependencies": {
    "lucide-react": "^0.542.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-markdown": "9.0.1",
    "react-syntax-highlighter": "^15.6.6",
    "remark-gfm": "4.0.0"
  },
  "devDependencies": {
    "@google/genai": "^1.18.0",
    "@types/node": "^22.14.0",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.1.9",
    "@types/react-syntax-highlighter": "^15.5.13",
    "framer-motion": "^12.23.12",
    "typescript": "~5.8.2",
    "vite": "^6.2.0"
  },
  "browserslist": [
    "last 1 version",
    "> 1%",
    "maintained node versions",
    "not dead"
  ],
  "browser": {
    "fs": false,
    "path": false,
    "os": false,
    "child_process": false
  },
  "engines": {
    "node": ">=22"
  },
  "main": "src/index.tsx",
  "files": [
    "src",
    "services",
    "types.d.ts",
    "index.html",
    "index.css",
    "assets",
    "package.json",
    "README.md",
    "LICENSE"
  ]
}

/// frontend/public/locales/en-US/analysis.json ///
{
  "results": {
    "title": "Analysis for: {projectName}",
    "summary": {
      "title": "Executive Summary"
    },
    "viability": {
      "title": "Project Viability",
      "scoreLabel": "Score",
      "assessmentLabel": "Assessment",
      "scoreEvolution": "Score Evolution"
    },
    "roi": {
      "title": "ROI & Effort Analysis",
      "assessmentLabel": "Assessment",
      "effortLabel": "Estimated Effort",
      "gainsLabel": "Potential Gains"
    },
    "strengths": {
      "title": "Key Strengths"
    },
    "improvements": {
      "title": "Suggested Improvements",
      "impact": "Impact",
      "businessImpact": "Business Impact"
    },
    "nextSteps": {
      "title": "Next Steps",
      "shortTerm": "Short-Term",
      "longTerm": "Long-Term"
    },
    "maturity": {
      "title": "Project Maturity"
    },
    "exampleModeNotice": "You are viewing an example analysis. To analyze your own project, start a new analysis.",
    "usageMetadata": {
      "ariaLabel": "Analysis Token Usage",
      "total": "Total",
      "tokens": "tokens"
    }
  },
  "maturityLevels": {
    "PROTOTYPE": "Prototype",
    "MVP": "MVP",
    "PRODUCTION": "Production",
    "OPTIMIZED": "Optimized"
  },
  "feedback": {
    "question": "Was this analysis helpful?",
    "thanks": "Thank you for your feedback!",
    "useful": "Useful",
    "notUseful": "Not useful"
  },
  "evolution": {
    "title": "Evolution Analysis",
    "subtitle": "Comparing two analyses for {projectName} ({analysisType})",
    "summary": "Evolution Summary",
    "metrics": {
      "viabilityScore": "Viability Score",
      "strengths": "Strengths",
      "improvements": "Improvements"
    },
    "usageAriaLabel": "Comparison Token Usage Information",
    "comparisonCost": "Comparison Cost",
    "breakdown": {
      "title": "Improvements Breakdown",
      "achievements": "Achievements",
      "noResolved": "No resolved improvements identified.",
      "newChallenges": "New Challenges",
      "noNew": "No new challenges identified.",
      "technicalDebt": "Technical Debt",
      "noPersistent": "No persistent technical debt found."
    }
  },
  "export": {
    "json": "Export JSON",
    "log": "Export Log",
    "jsonAriaLabel": "Export analysis as a JSON file",
    "logAriaLabel": "Export analysis as a text log file",
    "logContent": {
      "mainTitle": "Project Analysis Report"
    }
  }
}

/// frontend/public/locales/en-US/chat.json ///
{
    "title": "Project Chat",
    "subtitle": "Ask questions about \"{projectName}\"",
    "placeholder": "Ask something about the analysis...",
    "thinking": "Thinking..."
}

/// frontend/public/locales/en-US/common.json ///
{
  "header": {
    "title": "GemX Analyzer",
    "subtitle": "Transform your project documentation into actionable insights with AI-driven analysis."
  },
  "navigation": {
    "dashboard": "Dashboard",
    "newAnalysis": "New Analysis",
    "currentAnalysis": "Current Analysis",
    "kanban": "Kanban",
    "history": "History",
    "chat": "Chat"
  },
  "actions": {
    "analyzeProject": "Analyze Project",
    "analyzing": "Analyzing",
    "uploadFile": "Upload File",
    "showExample": "Show me an example",
    "exitExample": "Exit Example Mode",
    "load": "Load",
    "showMore": "Show More",
    "view": "View",
    "createKanbanBoard": "Create Kanban Board",
    "viewKanbanBoard": "View Kanban Board"
  },
  "common": {
    "title": "Title",
    "description": "Description",
    "priority": "Priority",
    "difficulty": "Difficulty",
    "delete": "Delete",
    "save": "Save",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "connect": "Connect",
    "notConnected": "Not Connected"
  },
  "priority": {
    "Low": "Low",
    "Medium": "Medium",
    "High": "High"
  },
  "difficulty": {
    "Low": "Low",
    "Medium": "Medium",
    "High": "High"
  },
  "effort": {
    "Low": "Low",
    "Medium": "Medium",
    "High": "High"
  },
  "tokenUsage": {
    "title": "Token Usage Warning",
    "usageText": "You have used {percentage}% of your monthly token limit ({consumed} / {limit}).",
    "monthlyUsage": "Monthly Token Usage"
  },
  "profile": {
    "title": "User Profile",
    "nameLabel": "Your Name",
    "namePlaceholder": "e.g., Alex Doe",
    "emailLabel": "Email",
    "emailPlaceholder": "e.g., alex.doe@example.com",
    "avatar": {
      "label": "Profile Picture",
      "change": "Change"
    },
    "social": {
      "title": "Social Logins",
      "google": "Connect with Google"
    },
    "save": "Save Profile"
  },
  "auth": {
    "logout": "Logout"
  },
  "history": {
    "title": "Analysis History",
    "exampleMode": "Example Mode",
    "compareInstruction": "Select two analyses of the same type to compare their evolution.",
    "typeLabel": "Type",
    "dateLabel": "Date",
    "deleteAriaLabel": "Delete history item",
    "scoreTrendTitle": "Viability Score Trend",
    "tokenUsageTitle": "Token Usage Trend",
    "empty": {
      "title": "No History Found",
      "subtitle": "Your completed analyses will appear here."
    },
    "clear": "Clear History",
    "clearConfirm": {
      "title": "Clear entire history?",
      "message": "Are you sure you want to permanently delete all analysis history? This action cannot be undone."
    },
    "compare": "Compare Selected"
  },
  "notifications": {
    "analysisSuccess": "Analysis completed successfully!",
    "analysisError": "Analysis failed. Please try again.",
    "comparisonSuccess": "Comparison generated successfully!",
    "comparisonError": "Comparison failed. Please try again.",
    "fileLoaded": "File '{fileName}' loaded into the text area.",
    "exampleLoaded": "Example analysis has been loaded.",
    "historyDeleted": "History item deleted.",
    "historyCleared": "Analysis history has been cleared.",
    "settingsSaved": "Settings saved successfully!",
    "profileSaved": "Profile updated successfully!",
    "noAnalysisForChat": "You must load an analysis before starting a chat.",
    "chatError": "An error occurred during the chat session.",
    "emptyRepoUrl": "Please enter a GitHub repository URL.",
    "noGithubPat": "GitHub Personal Access Token not found. Please set it in Settings > Integrations.",
    "repoDataFetched": "Successfully fetched repository data!",
    "repoImportSuccess": "Repository content imported successfully!",
    "repoImportError": "Failed to import repository content.",
    "emptyJiraKey": "Please enter a Jira project key.",
    "noJiraCredentials": "Jira credentials not found. Please set them in Settings > Integrations.",
    "jiraDataFetched": "Successfully fetched Jira project data (mocked)!",
    "apiKeyTestSuccess": "API Key connection successful!",
    "apiKeyTestFailure": "API Key test failed. Please check the key and try again.",
    "apiKeyTestEmpty": "API Key cannot be empty. Please enter a key to test.",
    "emptyContext": "Project context is empty. Please add one or more files before analyzing.",
    "exportSuccess": "Data exported successfully!",
    "exportError": "Failed to export data. See console for details.",
    "importSuccess": "Data imported successfully! The app will now reload.",
    "importError": "Failed to import data. The file may be corrupt or invalid.",
    "importAborted": "Import operation was cancelled."
  },
  "network": {
    "online": "Online",
    "offline": "You are currently offline."
  },
  "loader": {
    "ariaLabel": "Analysis in progress",
    "message": "Analyzing your project...",
    "subMessage": "This may take a moment.",
    "steps": [
      "Parsing project context...",
      "Identifying key architectural components...",
      "Evaluating potential strengths and weaknesses...",
      "Calculating viability score...",
      "Formulating actionable next steps...",
      "Finalizing the report..."
    ]
  }
}

/// frontend/public/locales/en-US/dashboard.json ///
{
  "dashboard": {
    "scoreEvolution": "Score Evolution Trend",
    "kpi": {
      "totalAnalyses": "Total Analyses",
      "totalAnalyses_description": "Number of reports generated",
      "averageScore": "Average Score",
      "averageScore_description": "Viability score across all projects",
      "commonType": "Most Common Type",
      "commonType_description": "Most frequent analysis type",
      "tokensThisMonth": "Tokens This Month",
      "tokensThisMonth_description": "API usage in the current month"
    },
    "projects": {
      "title": "Your Projects",
      "subtitle": "Recent analyses for your projects.",
      "analysisCount": "{count, plural, one {# analysis} other {# analyses}}",
      "allProjects": "All Projects",
      "selectProject": "Select a Project",
      "analysesFor": "Analyses for {projectName}",
      "recentAnalyses": "Recent Analyses"
    },
    "emptyState": {
      "cta": "Start Your First Analysis",
      "title": "Welcome to GemX Analyzer!",
      "subtitle": "You haven't analyzed any projects yet. Click the button above to begin and see your dashboard populate with valuable insights.",
      "kpi_total_description": "Tracks your report count",
      "kpi_score_description": "Aggregates viability scores",
      "kpi_type_description": "Highlights your focus areas",
      "kpi_tokens_description": "Monitors your API usage"
    }
  }
}

/// frontend/public/locales/en-US/example.json ///
{
  "projectContext": "The project context from the `constants` file would be here.",
  "kortex": {
    "projectName": "Kortex Dashboard",
    "summary": "Kortex is a robust, production-ready DevOps monitoring dashboard that has successfully transitioned from mock data to real-time API integrations. Its architecture is modern, leveraging Next.js 15 and TypeScript, with a focus on resilience and real-time updates via WebSockets. The project demonstrates a high level of technical maturity, strong developer experience, and a clear roadmap, indicating excellent viability for continued development and enterprise adoption.",
    "strengths": {
      "s1": "**Production-Ready Architecture:** Successfully desmocked, with real-time data from GitHub, Azure, and Kubernetes.",
      "s2": "**Resilient & Performant:** Implements WebSockets, auto-reconnection, and graceful fallbacks for API unavailability.",
      "s3": "**Excellent Developer Experience:** 100% TypeScript with strict typing, a complete mock API server, and hot reloading.",
      "s4": "**High Code Quality:** Modular architecture, zero compilation errors, and adherence to modern best practices.",
      "s5": "**Clear and Ambitious Roadmap:** Well-defined future goals, including multi-cloud support and advanced analytics."
    },
    "improvements": {
      "i1": {
        "title": "Implement Authentication and Authorization",
        "description": "The current version lacks a security layer to control access. Implementing a robust authentication (e.g., OAuth 2.0) and authorization system is critical before exposing sensitive DevOps data.",
        "businessImpact": "Prevents unauthorized access to critical infrastructure data, ensuring security and compliance."
      },
      "i2": {
        "title": "Expand Monitoring with Production APIs",
        "description": "The dashboard is connected to several sources but needs integration with production APIs like StatusRafa and Kosmos to provide comprehensive, real-world value.",
        "businessImpact": "Unlocks the core business value of the dashboard by providing a single pane of glass for all critical systems."
      },
      "i3": {
        "title": "Develop an Advanced Alerting System",
        "description": "The dashboard monitors data but doesn't yet proactively notify users of anomalies. An alerting system (e.g., email, Slack notifications) is needed for critical events.",
        "businessImpact": "Reduces system downtime and incident response time by proactively alerting engineers to issues."
      }
    },
    "nextSteps": {
      "shortTerm": {
        "s1": {
          "title": "Integrate with a User Management Service",
          "description": "Choose and implement a service like Auth0, Firebase Auth, or a custom solution to handle user identities and roles."
        },
        "s2": {
          "title": "Add API Keys and Secrets Management",
          "description": "Securely store and manage API keys for production services using a vault or environment variable management system."
        }
      },
      "longTerm": {
        "l1": {
          "title": "Build a Configurable Alerting Engine",
          "description": "Design a system where users can define custom alert rules, thresholds, and notification channels."
        },
        "l2": {
          "title": "Explore Multi-Cloud Integration (AWS, GCP)",
          "description": "Develop a strategy and architecture to extend monitoring capabilities to other major cloud providers beyond the current stack."
        }
      }
    },
    "viability": {
      "assessment": "The project has extremely high viability. It solves a clear business need, is built on a modern and scalable tech stack, and has a well-defined plan for growth. The transition from mock to real data is a major de-risking event."
    },
    "roi": {
      "assessment": "The potential ROI is significant. By centralizing monitoring and providing real-time insights, Kortex can drastically reduce engineering time spent on diagnostics, improve system uptime, and accelerate incident response.",
      "gains": {
        "g1": "Reduced Mean Time to Resolution (MTTR) for incidents.",
        "g2": "Increased developer productivity by centralizing data.",
        "g3": "Improved decision-making with a holistic view of system health.",
        "g4": "Proactive issue detection before they impact users."
      }
    },
    "maturity": {
      "assessment": "The project is at a 'Production' level. It has a stable core, real data integration, and robust error handling. It's ready for initial user adoption, with clear steps outlined to reach a fully optimized state."
    }
  },
  "history": {
    "kortex": {
      "h1": {
        "assessment": "Viability dropped slightly due to the discovery of complexities in API integration, but the project remains on a positive trajectory. Now considered a strong MVP."
      },
      "h2": {
        "assessment": "The project shows strong potential with a solid architecture, though it still relies on mock data. The core features are well-defined, making it a viable MVP."
      },
      "h3": {
        "summary": "This is a specialized security analysis of the Kortex prototype. It focuses on identifying potential vulnerabilities in the planned architecture and dependencies.",
        "assessment": "The planned architecture has some security gaps that need to be addressed before production. Viability is contingent on implementing proper authentication and data handling."
      },
      "h4": {
        "projectName": "Kortex Prototype",
        "assessment": "The project is in its early stages but shows promise. The core concept is solid, but significant work is needed to move beyond the prototype phase."
      }
    },
    "orion": {
      "projectName": "Orion UI Kit",
      "summary": "Analysis of the Orion UI Kit, a component library. It focuses on code quality, reusability, and documentation.",
      "assessment": "The component library is well-structured and documented, showing high viability for adoption within the organization.",
      "maturityAssessment": "The library is highly optimized, with excellent code quality, comprehensive test coverage, and a streamlined contribution process."
    }
  }
}

/// frontend/public/locales/en-US/input.json ///
{
  "title": "Project Context",
  "placeholder": "Paste your project documentation, README files, or any relevant text here...",
  "upload": "Upload File",
  "showExample": "Show me an example",
  "analysisTitle": "Choose Analysis Type",
  "analysisTypes": {
    "GENERAL": {
      "label": "General Viability",
      "description": "Overall assessment of project health, goals, and potential."
    },
    "SECURITY": {
      "label": "Security Audit",
      "description": "Analyzes for vulnerabilities and security best practices."
    },
    "SCALABILITY": {
      "label": "Scalability Review",
      "description": "Identifies performance bottlenecks and scaling issues."
    },
    "CODE_QUALITY": {
      "label": "Code Quality Check",
      "description": "Evaluates structure, maintainability, and best practices."
    }
  },
  "exampleMode": {
    "notice": "You are in example mode. Your input is disabled.",
    "exit": "Exit Example"
  },
  "dataSources": {
    "title": "Data Source",
    "manual": {
      "label": "Manual"
    },
    "github": {
      "label": "GitHub",
      "description": "Analyze an entire repository by providing its URL.",
      "placeholder": "e.g., https://github.com/owner/repo",
      "fetchButton": "Fetch Repository Data",
      "patNotice": "Requires a Personal Access Token set in Settings."
    },
    "jira": {
      "label": "Jira",
      "description": "Analyze a project's epics, stories, and tasks.",
      "placeholder": "e.g., PROJ",
      "fetchButton": "Fetch Project Data",
      "credentialsNotice": "Requires Jira credentials set in Settings."
    }
  },
  "files": {
    "title": "Project Files",
    "addFile": "Add New File",
    "addFromUpload": "Add from Upload",
    "emptyState": "No files in context. Add a file to begin analysis.",
    "editorPlaceholder": "Select a file to view or edit its content.",
    "fileName": "File Name",
    "fileContent": "File Content"
  },
  "githubSearch": {
    "button": "Search Repositories",
    "title": "Search GitHub Repositories",
    "placeholder": "Enter a GitHub username or organization",
    "searchButton": "Search",
    "importButton": "Import",
    "noReposFound": "No public repositories found for this user.",
    "emptyUsername": "Please enter a GitHub username or organization.",
    "resultsTitle": "Repositories for \"{username}\""
  }
}

/// frontend/public/locales/en-US/kanban.json ///
{
  "kanban": {
    "title": "Kanban Board",
    "projectHeader": "Project",
    "addCard": "Add New Card",
    "editCard": "Edit Card",
    "originalDescription": "Original Description (AI Generated)",
    "notes": "Notes",
    "notesPlaceholder": "Add your implementation notes or comments here...",
    "deleteConfirm": {
      "title": "Delete Card?",
      "message": "Are you sure you want to permanently delete this card? This action cannot be undone.",
      "confirm": "Delete"
    },
    "exampleModeNotice": "You are in example mode. Changes will not be saved."
  }
}

/// frontend/public/locales/en-US/landing.json ///
{
  "landing": {
    "cta": "Start Analyzing Now",
    "featuresTitle": "Powerful Analysis Capabilities",
    "featuresSubtitle": "Go beyond simple linting. Get deep, actionable insights into your project's core.",
    "dynamicPhrases": [
      "Unlock Your Project's Potential",
      "From Code to Clarity",
      "AI-Powered Project Insights"
    ],
    "featureDetails": {
      "GENERAL": "Provides a 360-degree view of your project. It assesses the overall health, identifies strengths and weaknesses, calculates a viability score, and performs a high-level ROI analysis. It's the perfect starting point to understand where your project stands and its potential for success.",
      "SECURITY": "Performs a specialized audit focused on security. It scans for common vulnerabilities (like injection flaws, broken authentication), checks for best practice adherence, and suggests concrete mitigation strategies. This analysis helps you proactively secure your application against threats.",
      "SCALABILITY": "Examines the project's architecture and design for its ability to handle growth. It identifies potential performance bottlenecks, evaluates database schemas, and suggests strategies for horizontal and vertical scaling. Ensure your application is ready to grow with your user base.",
      "CODE_QUALITY": "Dives deep into your codebase to evaluate its quality and maintainability. It analyzes code structure, complexity, adherence to coding standards (like DRY, SOLID), and suggests refactoring opportunities. A clean codebase is crucial for long-term development and team productivity."
    }
  }
}

/// frontend/public/locales/en-US/settings.json ///
{
  "title": "Profile & Settings",
  "tabs": {
    "profile": "Profile",
    "preferences": "Preferences",
    "integrations": "Integrations",
    "data": "Data"
  },
  "saveHistory": {
    "label": "Save Analysis History",
    "description": "Automatically save each analysis to your local history."
  },
  "save": "Save Settings",
  "importExport": {
    "title": "Application Data",
    "description": "Save or load your entire application state, including history and settings.",
    "importLabel": "Import",
    "exportLabel": "Export",
    "warning": "Importing data will overwrite your current history and settings.",
    "confirm": {
      "title": "Import Application Data?",
      "message": "This will overwrite all current data (history, settings, etc.) and reload the application. This action cannot be undone."
    },
    "invalidFile": "Invalid backup file format. The file may be corrupt or not a GemX backup.",
    "emptyFile": "The selected file is empty.",
    "noData": "There is no data to export."
  },
  "theme": {
    "label": "Theme",
    "light": "Light",
    "dark": "Dark",
    "system": "System"
  },
  "language": {
    "label": "Language"
  },
  "integrations": {
    "description": "Provide API keys and credentials for third-party services to enable direct data fetching.",
    "github": {
      "title": "GitHub Integration",
      "description": "Used to fetch repository data for analysis.",
      "patLabel": "Personal Access Token (PAT)",
      "patPlaceholder": "Enter your GitHub PAT (repo scope)"
    },
    "jira": {
      "title": "Jira Integration",
      "description": "Used to fetch project data from your Jira instance.",
      "instanceUrlLabel": "Jira Instance URL",
      "instanceUrlPlaceholder": "https://your-company.atlassian.net",
      "emailLabel": "Jira Account Email",
      "apiTokenLabel": "Jira API Token",
      "apiTokenPlaceholder": "Enter your Jira API token"
    }
  },
  "apiKeys": {
    "gemini": {
      "title": "Google Gemini API Key (BYOK)",
      "description": "Optionally, provide your own key. This will be stored securely in your browser and used for all analyses.",
      "label": "Gemini API Key",
      "placeholder": "Enter your API key here",
      "testButton": "Test",
      "testing": "Testing...",
      "testSuccess": "Success",
      "testFailure": "Failed"
    }
  }
}

/// frontend/public/locales/pt-BR/analysis.json ///
{
  "results": {
    "title": "Análise para: {projectName}",
    "summary": {
      "title": "Resumo Executivo"
    },
    "viability": {
      "title": "Viabilidade do Projeto",
      "scoreLabel": "Pontuação",
      "assessmentLabel": "Avaliação",
      "scoreEvolution": "Evolução da Pontuação"
    },
    "roi": {
      "title": "Análise de ROI e Esforço",
      "assessmentLabel": "Avaliação",
      "effortLabel": "Esforço Estimado",
      "gainsLabel": "Ganhos Potenciais"
    },
    "strengths": {
      "title": "Pontos Fortes"
    },
    "improvements": {
      "title": "Melhorias Sugeridas",
      "impact": "Impacto",
      "businessImpact": "Impacto de Negócio"
    },
    "nextSteps": {
      "title": "Próximos Passos",
      "shortTerm": "Curto Prazo",
      "longTerm": "Longo Prazo"
    },
    "maturity": {
      "title": "Maturidade do Projeto"
    },
    "exampleModeNotice": "Você está visualizando uma análise de exemplo. Para analisar seu próprio projeto, inicie uma nova análise.",
    "usageMetadata": {
      "ariaLabel": "Uso de Tokens da Análise",
      "total": "Total",
      "tokens": "tokens"
    }
  },
  "maturityLevels": {
    "PROTOTYPE": "Protótipo",
    "MVP": "MVP",
    "PRODUCTION": "Produção",
    "OPTIMIZED": "Otimizado"
  },
  "feedback": {
    "question": "Esta análise foi útil?",
    "thanks": "Obrigado pelo seu feedback!",
    "useful": "Útil",
    "notUseful": "Não útil"
  },
  "evolution": {
    "title": "Análise de Evolução",
    "subtitle": "Comparando duas análises para {projectName} ({analysisType})",
    "summary": "Resumo da Evolução",
    "metrics": {
      "viabilityScore": "Pontuação de Viabilidade",
      "strengths": "Pontos Fortes",
      "improvements": "Melhorias"
    },
    "usageAriaLabel": "Informação de Uso de Tokens da Comparação",
    "comparisonCost": "Custo da Comparação",
    "breakdown": {
      "title": "Detalhamento das Melhorias",
      "achievements": "Conquistas",
      "noResolved": "Nenhuma melhoria resolvida identificada.",
      "newChallenges": "Novos Desafios",
      "noNew": "Nenhum novo desafio identificado.",
      "technicalDebt": "Débito Técnico",
      "noPersistent": "Nenhum débito técnico persistente encontrado."
    }
  },
  "export": {
    "json": "Exportar JSON",
    "log": "Exportar Log",
    "jsonAriaLabel": "Exportar análise como um arquivo JSON",
    "logAriaLabel": "Exportar análise como um arquivo de log de texto",
    "logContent": {
      "mainTitle": "Relatório de Análise de Projeto"
    }
  }
}

/// frontend/public/locales/pt-BR/chat.json ///
{
    "title": "Chat do Projeto",
    "subtitle": "Faça perguntas sobre \"{projectName}\"",
    "placeholder": "Pergunte algo sobre a análise...",
    "thinking": "Pensando..."
}

/// frontend/public/locales/pt-BR/common.json ///
{
  "header": {
    "title": "Analisador GemX",
    "subtitle": "Transforme a documentação do seu projeto em insights acionáveis com análise orientada por IA."
  },
  "navigation": {
    "dashboard": "Painel",
    "newAnalysis": "Nova Análise",
    "currentAnalysis": "Análise Atual",
    "kanban": "Kanban",
    "history": "Histórico",
    "chat": "Chat"
  },
  "actions": {
    "analyzeProject": "Analisar Projeto",
    "analyzing": "Analisando",
    "uploadFile": "Carregar Arquivo",
    "showExample": "Mostre-me um exemplo",
    "exitExample": "Sair do Modo Exemplo",
    "load": "Carregar",
    "showMore": "Mostrar Mais",
    "view": "Ver",
    "createKanbanBoard": "Criar Quadro Kanban",
    "viewKanbanBoard": "Ver Quadro Kanban"
  },
  "common": {
    "title": "Título",
    "description": "Descrição",
    "priority": "Prioridade",
    "difficulty": "Dificuldade",
    "delete": "Excluir",
    "save": "Salvar",
    "cancel": "Cancelar",
    "confirm": "Confirmar",
    "connect": "Conectar",
    "notConnected": "Não Conectado"
  },
  "priority": {
    "Low": "Baixa",
    "Medium": "Média",
    "High": "Alta"
  },
  "difficulty": {
    "Low": "Baixa",
    "Medium": "Média",
    "High": "Alta"
  },
  "effort": {
    "Low": "Baixo",
    "Medium": "Médio",
    "High": "Alto"
  },
  "tokenUsage": {
    "title": "Aviso de Uso de Tokens",
    "usageText": "Você usou {percentage}% do seu limite mensal de tokens ({consumed} / {limit}).",
    "monthlyUsage": "Uso Mensal de Tokens"
  },
  "profile": {
    "title": "Perfil do Usuário",
    "nameLabel": "Seu Nome",
    "namePlaceholder": "ex: Alex Silva",
    "emailLabel": "E-mail",
    "emailPlaceholder": "ex: alex.silva@example.com",
    "avatar": {
      "label": "Foto de Perfil",
      "change": "Alterar"
    },
    "social": {
      "title": "Logins Sociais",
      "google": "Conectar com Google"
    },
    "save": "Salvar Perfil"
  },
  "auth": {
    "logout": "Sair"
  },
  "history": {
    "title": "Histórico de Análises",
    "exampleMode": "Modo de Exemplo",
    "compareInstruction": "Selecione duas análises do mesmo tipo para comparar sua evolução.",
    "typeLabel": "Tipo",
    "dateLabel": "Data",
    "deleteAriaLabel": "Excluir item do histórico",
    "scoreTrendTitle": "Tendência da Pontuação de Viabilidade",
    "tokenUsageTitle": "Tendência de Uso de Tokens",
    "empty": {
      "title": "Nenhum Histórico Encontrado",
      "subtitle": "Suas análises concluídas aparecerão aqui."
    },
    "clear": "Limpar Histórico",
    "clearConfirm": {
      "title": "Limpar todo o histórico?",
      "message": "Tem certeza de que deseja excluir permanentemente todo o histórico de análises? Esta ação não pode ser desfeita."
    },
    "compare": "Comparar Selecionados"
  },
  "notifications": {
    "analysisSuccess": "Análise concluída com sucesso!",
    "analysisError": "A análise falhou. Por favor, tente novamente.",
    "comparisonSuccess": "Comparação gerada com sucesso!",
    "comparisonError": "A comparação falhou. Por favor, tente novamente.",
    "fileLoaded": "Arquivo '{fileName}' carregado na área de texto.",
    "exampleLoaded": "A análise de exemplo foi carregada.",
    "historyDeleted": "Item do histórico excluído.",
    "historyCleared": "O histórico de análises foi limpo.",
    "settingsSaved": "Configurações salvas com sucesso!",
    "profileSaved": "Perfil atualizado com sucesso!",
    "noAnalysisForChat": "Você deve carregar uma análise antes de iniciar um chat.",
    "chatError": "Ocorreu um erro durante a sessão de chat.",
    "emptyRepoUrl": "Por favor, insira a URL de um repositório GitHub.",
    "noGithubPat": "Token de Acesso Pessoal do GitHub não encontrado. Por favor, configure-o em Configurações > Integrações.",
    "repoDataFetched": "Dados do repositório buscados com sucesso!",
    "repoImportSuccess": "Conteúdo do repositório importado com sucesso!",
    "repoImportError": "Falha ao importar o conteúdo do repositório.",
    "emptyJiraKey": "Por favor, insira uma chave de projeto do Jira.",
    "noJiraCredentials": "Credenciais do Jira não encontradas. Por favor, configure-as em Configurações > Integrações.",
    "jiraDataFetched": "Dados do projeto Jira buscados com sucesso (simulado)!",
    "apiKeyTestSuccess": "Conexão com a Chave de API bem-sucedida!",
    "apiKeyTestFailure": "O teste da Chave de API falhou. Por favor, verifique a chave e tente novamente.",
    "apiKeyTestEmpty": "A Chave de API não pode estar vazia. Por favor, insira uma chave para testar.",
    "emptyContext": "O contexto do projeto está vazio. Adicione um ou mais arquivos antes de analisar.",
    "exportSuccess": "Dados exportados com sucesso!",
    "exportError": "Falha ao exportar os dados. Veja o console para detalhes.",
    "importSuccess": "Dados importados com sucesso! A aplicação será recarregada.",
    "importError": "Falha ao importar os dados. O arquivo pode estar corrompido ou ser inválido.",
    "importAborted": "Operação de importação foi cancelada."
  },
  "network": {
    "online": "Online",
    "offline": "Você está offline no momento."
  },
  "loader": {
    "ariaLabel": "Análise em progresso",
    "message": "Analisando seu projeto...",
    "subMessage": "Isso pode levar um momento.",
    "steps": [
      "Analisando o contexto do projeto...",
      "Identificando componentes-chave da arquitetura...",
      "Avaliando pontos fortes e fracos potenciais...",
      "Calculando pontuação de viabilidade...",
      "Formulando próximos passos acionáveis...",
      "Finalizando o relatório..."
    ]
  }
}

/// frontend/public/locales/pt-BR/dashboard.json ///
{
  "dashboard": {
    "scoreEvolution": "Tendência da Evolução da Pontuação",
    "kpi": {
      "totalAnalyses": "Total de Análises",
      "totalAnalyses_description": "Número de relatórios gerados",
      "averageScore": "Pontuação Média",
      "averageScore_description": "Pontuação de viabilidade entre todos os projetos",
      "commonType": "Tipo Mais Comum",
      "commonType_description": "Tipo de análise mais frequente",
      "tokensThisMonth": "Tokens Este Mês",
      "tokensThisMonth_description": "Uso da API no mês atual"
    },
    "projects": {
      "title": "Seus Projetos",
      "subtitle": "Análises recentes para seus projetos.",
      "analysisCount": "{count, plural, one {# análise} other {# análises}}",
      "allProjects": "Todos os Projetos",
      "selectProject": "Selecione um Projeto",
      "analysesFor": "Análises para {projectName}",
      "recentAnalyses": "Análises Recentes"
    },
    "emptyState": {
      "cta": "Comece Sua Primeira Análise",
      "title": "Bem-vindo ao Analisador GemX!",
      "subtitle": "Você ainda não analisou nenhum projeto. Clique no botão acima para começar e ver seu painel ser preenchido com insights valiosos.",
      "kpi_total_description": "Rastreia sua contagem de relatórios",
      "kpi_score_description": "Agrega pontuações de viabilidade",
      "kpi_type_description": "Destaca suas áreas de foco",
      "kpi_tokens_description": "Monitora seu uso da API"
    }
  }
}

/// frontend/public/locales/pt-BR/example.json ///
{
  "projectContext": "O contexto do projeto do arquivo `constants` estaria aqui.",
  "kortex": {
    "projectName": "Painel Kortex",
    "summary": "Kortex é um painel de monitoramento DevOps robusto e pronto para produção que transitou com sucesso de dados mockados para integrações de API em tempo real. Sua arquitetura é moderna, utilizando Next.js 15 e TypeScript, com foco em resiliência e atualizações em tempo real via WebSockets. O projeto demonstra um alto nível de maturidade técnica, forte experiência de desenvolvedor e um roadmap claro, indicando excelente viabilidade para desenvolvimento contínuo e adoção corporativa.",
    "strengths": {
      "s1": "**Arquitetura Pronta para Produção:** 'Desmockado' com sucesso, com dados em tempo real do GitHub, Azure e Kubernetes.",
      "s2": "**Resiliente e Performático:** Implementa WebSockets, reconexão automática e fallbacks graciosos para indisponibilidade de API.",
      "s3": "**Excelente Experiência de Desenvolvedor:** 100% TypeScript com tipagem estrita, um servidor de API mock completo e hot reloading.",
      "s4": "**Alta Qualidade de Código:** Arquitetura modular, zero erros de compilação e adesão às melhores práticas modernas.",
      "s5": "**Roadmap Claro e Ambicioso:** Metas futuras bem definidas, incluindo suporte multi-cloud e análises avançadas."
    },
    "improvements": {
      "i1": {
        "title": "Implementar Autenticação e Autorização",
        "description": "A versão atual carece de uma camada de segurança para controlar o acesso. Implementar um sistema robusto de autenticação (ex: OAuth 2.0) e autorização é crítico antes de expor dados sensíveis de DevOps.",
        "businessImpact": "Previne o acesso não autorizado a dados críticos de infraestrutura, garantindo segurança e conformidade."
      },
      "i2": {
        "title": "Expandir Monitoramento com APIs de Produção",
        "description": "O painel está conectado a várias fontes, mas precisa de integração com APIs de produção como StatusRafa e Kosmos para fornecer valor abrangente e do mundo real.",
        "businessImpact": "Desbloqueia o valor de negócio principal do painel, fornecendo uma visão única para todos os sistemas críticos."
      },
      "i3": {
        "title": "Desenvolver um Sistema de Alerta Avançado",
        "description": "O painel monitora dados, mas ainda não notifica proativamente os usuários sobre anomalias. Um sistema de alerta (ex: e-mail, notificações no Slack) é necessário para eventos críticos.",
        "businessImpact": "Reduz o tempo de inatividade do sistema e o tempo de resposta a incidentes, alertando proativamente os engenheiros sobre problemas."
      }
    },
    "nextSteps": {
      "shortTerm": {
        "s1": {
          "title": "Integrar com um Serviço de Gerenciamento de Usuários",
          "description": "Escolha e implemente um serviço como Auth0, Firebase Auth, ou uma solução customizada para lidar com identidades e papéis de usuários."
        },
        "s2": {
          "title": "Adicionar Gerenciamento de Chaves de API e Segredos",
          "description": "Armazene e gerencie com segurança as chaves de API para serviços de produção usando um cofre ou sistema de gerenciamento de variáveis de ambiente."
        }
      },
      "longTerm": {
        "l1": {
          "title": "Construir um Motor de Alerta Configurável",
          "description": "Projete um sistema onde os usuários possam definir regras de alerta personalizadas, limiares e canais de notificação."
        },
        "l2": {
          "title": "Explorar Integração Multi-Cloud (AWS, GCP)",
          "description": "Desenvolva uma estratégia e arquitetura para estender as capacidades de monitoramento para outros grandes provedores de nuvem além da pilha atual."
        }
      }
    },
    "viability": {
      "assessment": "O projeto tem viabilidade extremamente alta. Ele resolve uma necessidade de negócio clara, é construído sobre uma pilha de tecnologia moderna e escalável, e tem um plano bem definido para crescimento. A transição de dados mockados para dados reais é um grande evento de redução de risco."
    },
    "roi": {
      "assessment": "O ROI potencial é significativo. Ao centralizar o monitoramento e fornecer insights em tempo real, o Kortex pode reduzir drasticamente o tempo de engenharia gasto em diagnósticos, melhorar o tempo de atividade do sistema e acelerar a resposta a incidentes.",
      "gains": {
        "g1": "Redução do Tempo Médio para Resolução (MTTR) de incidentes.",
        "g2": "Aumento da produtividade do desenvolvedor ao centralizar dados.",
        "g3": "Melhora na tomada de decisões com uma visão holística da saúde do sistema.",
        "g4": "Detecção proativa de problemas antes que eles impactem os usuários."
      }
    },
    "maturity": {
      "assessment": "O projeto está no nível de 'Produção'. Possui um núcleo estável, integração de dados reais e tratamento de erros robusto. Está pronto para a adoção inicial de usuários, com passos claros delineados para alcançar um estado totalmente otimizado."
    }
  },
  "history": {
    "kortex": {
      "h1": {
        "assessment": "A viabilidade caiu ligeiramente devido à descoberta de complexidades na integração da API, mas o projeto permanece em uma trajetória positiva. Agora considerado um MVP forte."
      },
      "h2": {
        "assessment": "O projeto mostra um forte potencial com uma arquitetura sólida, embora ainda dependa de dados mockados. As funcionalidades principais estão bem definidas, tornando-o um MVP viável."
      },
      "h3": {
        "summary": "Esta é uma análise de segurança especializada do protótipo Kortex. Foca na identificação de vulnerabilidades potenciais na arquitetura e dependências planejadas.",
        "assessment": "A arquitetura planejada tem algumas lacunas de segurança que precisam ser abordadas antes da produção. A viabilidade depende da implementação de autenticação e tratamento de dados adequados."
      },
      "h4": {
        "projectName": "Protótipo Kortex",
        "assessment": "O projeto está em seus estágios iniciais, mas é promissor. O conceito central é sólido, mas um trabalho significativo é necessário para ir além da fase de protótipo."
      }
    },
    "orion": {
      "projectName": "Orion UI Kit",
      "summary": "Análise do Orion UI Kit, uma biblioteca de componentes. Foca na qualidade do código, reutilização e documentação.",
      "assessment": "A biblioteca de componentes é bem estruturada e documentada, mostrando alta viabilidade para adoção dentro da organização.",
      "maturityAssessment": "A biblioteca é altamente otimizada, com excelente qualidade de código, cobertura de teste abrangente e um processo de contribuição simplificado."
    }
  }
}

/// frontend/public/locales/pt-BR/input.json ///
{
  "title": "Contexto do Projeto",
  "placeholder": "Cole a documentação do seu projeto, arquivos README, ou qualquer texto relevante aqui...",
  "upload": "Carregar Arquivo",
  "showExample": "Mostre-me um exemplo",
  "analysisTitle": "Escolha o Tipo de Análise",
  "analysisTypes": {
    "GENERAL": {
      "label": "Viabilidade Geral",
      "description": "Avaliação geral da saúde, metas e potencial do projeto."
    },
    "SECURITY": {
      "label": "Auditoria de Segurança",
      "description": "Analisa vulnerabilidades e melhores práticas de segurança."
    },
    "SCALABILITY": {
      "label": "Revisão de Escalabilidade",
      "description": "Identifica gargalos de desempenho e problemas de escalabilidade."
    },
    "CODE_QUALITY": {
      "label": "Verificação de Qualidade de Código",
      "description": "Avalia a estrutura, manutenibilidade e melhores práticas."
    }
  },
  "exampleMode": {
    "notice": "Você está no modo de exemplo. A entrada está desabilitada.",
    "exit": "Sair do Exemplo"
  },
  "dataSources": {
    "title": "Fonte de Dados",
    "manual": {
      "label": "Manual"
    },
    "github": {
      "label": "GitHub",
      "description": "Analise um repositório inteiro fornecendo sua URL.",
      "placeholder": "ex: https://github.com/proprietario/repo",
      "fetchButton": "Buscar Dados do Repositório",
      "patNotice": "Requer um Token de Acesso Pessoal configurado nas Configurações."
    },
    "jira": {
      "label": "Jira",
      "description": "Analise épicos, estórias e tarefas de um projeto.",
      "placeholder": "ex: PROJ",
      "fetchButton": "Buscar Dados do Projeto",
      "credentialsNotice": "Requer credenciais do Jira configuradas nas Configurações."
    }
  },
  "files": {
    "title": "Arquivos do Projeto",
    "addFile": "Adicionar Novo Arquivo",
    "addFromUpload": "Adicionar do Upload",
    "emptyState": "Nenhum arquivo no contexto. Adicione um arquivo para iniciar a análise.",
    "editorPlaceholder": "Selecione um arquivo para ver ou editar seu conteúdo.",
    "fileName": "Nome do Arquivo",
    "fileContent": "Conteúdo do Arquivo"
  },
  "githubSearch": {
    "button": "Buscar Repositórios",
    "title": "Buscar Repositórios no GitHub",
    "placeholder": "Digite um nome de usuário ou organização do GitHub",
    "searchButton": "Buscar",
    "importButton": "Importar",
    "noReposFound": "Nenhum repositório público encontrado para este usuário.",
    "emptyUsername": "Por favor, digite um nome de usuário ou organização do GitHub.",
    "resultsTitle": "Repositórios de \"{username}\""
  }
}

/// frontend/public/locales/pt-BR/kanban.json ///
{
  "kanban": {
    "title": "Quadro Kanban",
    "projectHeader": "Projeto",
    "addCard": "Adicionar Novo Card",
    "editCard": "Editar Card",
    "originalDescription": "Descrição Original (Gerada por IA)",
    "notes": "Anotações",
    "notesPlaceholder": "Adicione suas notas de implementação ou comentários aqui...",
    "deleteConfirm": {
      "title": "Excluir Card?",
      "message": "Tem certeza de que deseja excluir permanentemente este card? Esta ação não pode ser desfeita.",
      "confirm": "Excluir"
    },
    "exampleModeNotice": "Você está no modo de exemplo. As alterações não serão salvas."
  }
}

/// frontend/public/locales/pt-BR/landing.json ///
{
  "landing": {
    "cta": "Comece a Analisar Agora",
    "featuresTitle": "Capacidades de Análise Poderosas",
    "featuresSubtitle": "Vá além da simples verificação. Obtenha insights profundos e acionáveis sobre o núcleo do seu projeto.",
    "dynamicPhrases": [
      "Desbloqueie o Potencial do Seu Projeto",
      "Do Código à Clareza",
      "Insights de Projeto com IA"
    ],
    "featureDetails": {
      "GENERAL": "Fornece uma visão de 360 graus do seu projeto. Avalia a saúde geral, identifica pontos fortes e fracos, calcula uma pontuação de viabilidade e realiza uma análise de ROI de alto nível. É o ponto de partida perfeito para entender onde seu projeto está e seu potencial de sucesso.",
      "SECURITY": "Realiza uma auditoria especializada focada em segurança. Procura por vulnerabilidades comuns (como falhas de injeção, autenticação quebrada), verifica a adesão às melhores práticas e sugere estratégias de mitigação concretas. Esta análise ajuda a proteger proativamente sua aplicação contra ameaças.",
      "SCALABILITY": "Examina a arquitetura e o design do projeto quanto à sua capacidade de lidar com o crescimento. Identifica potenciais gargalos de desempenho, avalia esquemas de banco de dados e sugere estratégias para escalonamento horizontal e vertical. Garanta que sua aplicação esteja pronta para crescer com sua base de usuários.",
      "CODE_QUALITY": "Mergulha fundo em sua base de código para avaliar sua qualidade e manutenibilidade. Analisa a estrutura do código, complexidade, adesão a padrões de codificação (como DRY, SOLID), e sugere oportunidades de refatoração. Um código limpo é crucial para o desenvolvimento a longo prazo e a produtividade da equipe."
    }
  }
}

/// frontend/public/locales/pt-BR/settings.json ///
{
  "title": "Perfil & Configurações",
  "tabs": {
    "profile": "Perfil",
    "preferences": "Preferências",
    "integrations": "Integrações",
    "data": "Dados"
  },
  "saveHistory": {
    "label": "Salvar Histórico de Análises",
    "description": "Salvar automaticamente cada análise em seu histórico local."
  },
  "save": "Salvar Configurações",
  "importExport": {
    "title": "Dados da Aplicação",
    "description": "Salve ou carregue todo o estado da sua aplicação, incluindo histórico e configurações.",
    "importLabel": "Importar",
    "exportLabel": "Exportar",
    "warning": "Importar dados irá sobrescrever seu histórico e configurações atuais.",
    "confirm": {
      "title": "Importar Dados da Aplicação?",
      "message": "Isso irá sobrescrever todos os dados atuais (histórico, configurações, etc.) e recarregar a aplicação. Esta ação não pode ser desfeita."
    },
    "invalidFile": "Formato do arquivo de backup inválido. O arquivo pode estar corrompido ou não ser um backup do GemX.",
    "emptyFile": "O arquivo selecionado está vazio.",
    "noData": "Não há dados para exportar."
  },
  "theme": {
    "label": "Tema",
    "light": "Claro",
    "dark": "Escuro",
    "system": "Sistema"
  },
  "language": {
    "label": "Idioma"
  },
  "integrations": {
    "description": "Forneça chaves de API e credenciais para serviços de terceiros para permitir a busca direta de dados.",
    "github": {
      "title": "Integração com GitHub",
      "description": "Usado para buscar dados de repositórios para análise.",
      "patLabel": "Token de Acesso Pessoal (PAT)",
      "patPlaceholder": "Insira seu PAT do GitHub (escopo de repo)"
    },
    "jira": {
      "title": "Integração com Jira",
      "description": "Usado para buscar dados de projetos da sua instância Jira.",
      "instanceUrlLabel": "URL da Instância Jira",
      "instanceUrlPlaceholder": "https://sua-empresa.atlassian.net",
      "emailLabel": "E-mail da Conta Jira",
      "apiTokenLabel": "Token de API do Jira",
      "apiTokenPlaceholder": "Insira seu token de API do Jira"
    }
  },
  "apiKeys": {
    "gemini": {
      "title": "Chave de API do Google Gemini (BYOK)",
      "description": "Opcionalmente, forneça sua própria chave. Ela será armazenada de forma segura no seu navegador e usada para todas as análises.",
      "label": "Chave de API do Gemini",
      "placeholder": "Insira sua chave de API aqui",
      "testButton": "Testar",
      "testing": "Testando...",
      "testSuccess": "Sucesso",
      "testFailure": "Falhou"
    }
  }
}

/// frontend/public/manifest.json ///
{
  "name": "GemX Analyzer",
  "short_name": "GemX",
  "description": "An AI-driven application to analyze software project documentation and provide actionable insights.",
  "start_url": ".",
  "display": "standalone",
  "background_color": "#111827",
  "theme_color": "#111827",
  "icons": [
    {
      "src": "/icons/icon-192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    }
  ]
}

/// frontend/services/gateway/api.ts ///
// Gateway service - replicates Gemini API functionality via our gateway
import { AnalysisType, EvolutionAnalysis, HistoryItem, ProjectAnalysis } from "../../types";

interface GatewayResponse {
  content?: string;
  done: boolean;
  usage?: {
    tokens: number;
    latency_ms: number;
    cost_usd: number;
    provider: string;
    model: string;
  };
  error?: string;
}

const GATEWAY_BASE_URL = process.env.GATEWAY_URL || 'http://localhost:8080';

/**
 * Tests gateway connectivity and provider availability
 */
export const testGatewayConnection = async (provider: string = "gemini"): Promise<void> => {
  try {
    const response = await fetch(`${GATEWAY_BASE_URL}/v1/providers`);
    if (!response.ok) {
      throw new Error(`Gateway unavailable: ${response.status}`);
    }

    const data = await response.json();
    if (!data.providers.includes(provider)) {
      throw new Error(`Provider ${provider} not available in gateway`);
    }
  } catch (error) {
    throw new Error(`Gateway connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
};

/**
 * Analyzes a project using the gateway (SSE streaming)
 */
export const analyzeProjectViaGateway = async (
  projectContext: string,
  analysisType: AnalysisType,
  locale: 'pt-BR' | 'en-US',
  userApiKey?: string,
  provider: string = "gemini"
): Promise<ProjectAnalysis> => {

  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  };

  if (userApiKey) {
    headers['x-external-api-key'] = userApiKey;
  }

  const requestBody = {
    provider,
    model: provider === "gemini" ? "gemini-2.5-flash" : undefined,
    messages: [
      {
        role: "user",
        content: "Analyze the following project context"
      }
    ],
    temperature: 0.7,
    meta: {
      analysisType,
      projectContext,
      locale,
      useStructuredOutput: true
    }
  };

  return new Promise((resolve, reject) => {
    const eventSource = new EventSource(
      `${GATEWAY_BASE_URL}/v1/chat`,
      {
        method: 'POST',
        headers,
        body: JSON.stringify(requestBody)
      } as any // EventSource doesn't support POST directly, we'll use fetch
    );

    // Actually, let's use fetch with SSE manually since EventSource doesn't support POST
    fetch(`${GATEWAY_BASE_URL}/v1/chat`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestBody)
    }).then(response => {
      if (!response.ok) {
        throw new Error(`Gateway error: ${response.status}`);
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('No response body');
      }

      let fullContent = '';
      const decoder = new TextDecoder();

      const readStream = () => {
        reader.read().then(({ done, value }) => {
          if (done) {
            try {
              // Parse the complete response as JSON (structured output)
              const analysis = JSON.parse(fullContent) as ProjectAnalysis;
              resolve(analysis);
            } catch (error) {
              reject(new Error(`Failed to parse analysis: ${error}`));
            }
            return;
          }

          const chunk = decoder.decode(value);
          const lines = chunk.split('\n');

          for (const line of lines) {
            if (line.startsWith('data: ')) {
              try {
                const data: GatewayResponse = JSON.parse(line.slice(6));

                if (data.error) {
                  reject(new Error(data.error));
                  return;
                }

                if (data.content) {
                  fullContent += data.content;
                }

                if (data.done) {
                  // Stream completed, parse final result
                  try {
                    const analysis = JSON.parse(fullContent) as ProjectAnalysis;

                    // Add usage metadata from gateway
                    if (data.usage) {
                      analysis.usageMetadata = {
                        promptTokenCount: data.usage.tokens,
                        candidatesTokenCount: 0,
                        totalTokenCount: data.usage.tokens
                      };
                    }

                    resolve(analysis);
                  } catch (parseError) {
                    reject(new Error(`Failed to parse final analysis: ${parseError}`));
                  }
                  return;
                }
              } catch (jsonError) {
                // Skip malformed JSON chunks
                continue;
              }
            }
          }

          readStream(); // Continue reading
        }).catch(reject);
      };

      readStream();
    }).catch(reject);
  });
};

/**
 * Compares analyses via gateway
 */
export const compareAnalysesViaGateway = async (
  item1: HistoryItem,
  item2: HistoryItem,
  locale: 'pt-BR' | 'en-US',
  userApiKey?: string,
  provider: string = "gemini"
): Promise<EvolutionAnalysis> => {

  const headers: Record<string, string> = {
    'Content-Type': 'application/json',
  };

  if (userApiKey) {
    headers['x-external-api-key'] = userApiKey;
  }

  const requestBody = {
    provider,
    model: provider === "gemini" ? "gemini-2.5-flash" : undefined,
    messages: [
      {
        role: "user",
        content: "Compare the following project analyses"
      }
    ],
    temperature: 0.7,
    meta: {
      analysisType: "evolution",
      item1: JSON.stringify(item1),
      item2: JSON.stringify(item2),
      locale,
      useStructuredOutput: true
    }
  };

  // Similar implementation to analyzeProjectViaGateway but for comparison
  // ... (implementation would be similar to above)

  // For now, return a simple implementation
  return new Promise((resolve, reject) => {
    fetch(`${GATEWAY_BASE_URL}/v1/chat`, {
      method: 'POST',
      headers,
      body: JSON.stringify(requestBody)
    }).then(response => response.json())
      .then(resolve)
      .catch(reject);
  });
};

/**
 * Creates a chat session via gateway
 */
export const createChatSessionViaGateway = (
  systemInstruction: string,
  userApiKey?: string,
  provider: string = "gemini"
) => {
  return {
    sendMessage: async (message: string): Promise<string> => {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };

      if (userApiKey) {
        headers['x-external-api-key'] = userApiKey;
      }

      const requestBody = {
        provider,
        messages: [
          { role: "system", content: systemInstruction },
          { role: "user", content: message }
        ],
        temperature: 0.7
      };

      return new Promise((resolve, reject) => {
        fetch(`${GATEWAY_BASE_URL}/v1/chat`, {
          method: 'POST',
          headers,
          body: JSON.stringify(requestBody)
        }).then(response => {
          if (!response.ok) {
            throw new Error(`Gateway error: ${response.status}`);
          }

          const reader = response.body?.getReader();
          if (!reader) {
            throw new Error('No response body');
          }

          let fullResponse = '';
          const decoder = new TextDecoder();

          const readStream = () => {
            reader.read().then(({ done, value }) => {
              if (done) {
                resolve(fullResponse);
                return;
              }

              const chunk = decoder.decode(value);
              const lines = chunk.split('\n');

              for (const line of lines) {
                if (line.startsWith('data: ')) {
                  try {
                    const data: GatewayResponse = JSON.parse(line.slice(6));

                    if (data.error) {
                      reject(new Error(data.error));
                      return;
                    }

                    if (data.content) {
                      fullResponse += data.content;
                    }

                    if (data.done) {
                      resolve(fullResponse);
                      return;
                    }
                  } catch (jsonError) {
                    // Skip malformed JSON chunks
                    continue;
                  }
                }
              }

              readStream();
            }).catch(reject);
          };

          readStream();
        }).catch(reject);
      });
    }
  };
};

/// frontend/services/gemini/api.ts ///
import { GoogleGenAI, GenerateContentResponse, Chat } from "@google/genai";
import { AnalysisType, ProjectAnalysis, EvolutionAnalysis, HistoryItem } from "../../types";
import { getAnalysisPrompt, getEvolutionPrompt } from "./prompts";
import { projectAnalysisSchema, evolutionAnalysisSchema } from "./schemas";
import { parseJsonResponse, handleGeminiError } from "./utils";

const getApiKey = (userApiKey?: string): string => {
    const key = userApiKey || process.env.API_KEY;
    if (!key) {
        throw new Error("Gemini API key not found. Please provide it in the settings or set the API_KEY environment variable.");
    }
    return key;
}

/**
 * Tests a Gemini API key by making a lightweight request.
 * @param apiKey The API key to test.
 * @throws An error with a descriptive message if the key is invalid or another issue occurs.
 */
export const testApiKey = async (apiKey: string): Promise<void> => {
    if (!apiKey || !apiKey.trim()) {
      // Use a specific error message that can be caught and translated
      const err = new Error("API_KEY_EMPTY");
      err.name = 'ApiKeyError';
      throw err;
    }
    try {
      const ai = new GoogleGenAI({ apiKey });
      // Use a minimal, low-token request to validate the key and its permissions
      await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: "test",
      });
    } catch (error) {
      // Let handleGeminiError parse the error and throw a more user-friendly message
      handleGeminiError(error);
    }
};


/**
 * Analyzes a project context using the Gemini API.
 * @param projectContext The context of the project to analyze.
 * @param analysisType The type of analysis to perform.
 * @param locale The desired language for the response.
 * @param userApiKey Optional user-provided API key.
 * @returns A promise that resolves to the project analysis.
 */
export const analyzeProject = async (
  projectContext: string,
  analysisType: AnalysisType,
  locale: 'pt-BR' | 'en-US',
  userApiKey?: string,
): Promise<ProjectAnalysis> => {
  try {
    const apiKey = getApiKey(userApiKey);
    const ai = new GoogleGenAI({ apiKey });
    const prompt = getAnalysisPrompt(projectContext, analysisType, locale);

    const response: GenerateContentResponse = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
          responseMimeType: "application/json",
          responseSchema: projectAnalysisSchema,
        },
    });

    const usageMetadata = response.usageMetadata;
    const analysisResult = parseJsonResponse<ProjectAnalysis>(response.text, 'ProjectAnalysis');
    
    // Add usage metadata to the result
    if (usageMetadata) {
        analysisResult.usageMetadata = {
            promptTokenCount: usageMetadata.promptTokenCount,
            candidatesTokenCount: usageMetadata.candidatesTokenCount || 0,
            totalTokenCount: usageMetadata.totalTokenCount,
        };
    }

    return analysisResult;
  } catch (error) {
    handleGeminiError(error);
    // handleGeminiError throws, so this is for type safety.
    throw error;
  }
};

/**
 * Compares two history items to generate an evolution analysis using the Gemini API.
 * @param item1 The first history item.
 * @param item2 The second history item.
 * @param locale The desired language for the response.
 * @param userApiKey Optional user-provided API key.
 * @returns A promise that resolves to the evolution analysis.
 */
export const compareAnalyses = async (
  item1: HistoryItem,
  item2: HistoryItem,
  locale: 'pt-BR' | 'en-US',
  userApiKey?: string,
): Promise<EvolutionAnalysis> => {
  try {
    const apiKey = getApiKey(userApiKey);
    const ai = new GoogleGenAI({ apiKey });
    const prompt = getEvolutionPrompt(item1, item2, locale);

    const response: GenerateContentResponse = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
          responseMimeType: "application/json",
          responseSchema: evolutionAnalysisSchema,
        },
    });
    
    const usageMetadata = response.usageMetadata;
    const evolutionResult = parseJsonResponse<EvolutionAnalysis>(response.text, 'EvolutionAnalysis');
    
    if (usageMetadata) {
        evolutionResult.usageMetadata = {
            promptTokenCount: usageMetadata.promptTokenCount,
            candidatesTokenCount: usageMetadata.candidatesTokenCount || 0,
            totalTokenCount: usageMetadata.totalTokenCount,
        };
    }
    
    return evolutionResult;

  } catch (error) {
    handleGeminiError(error);
    throw error;
  }
};

/**
 * Creates a new chat session with the Gemini API.
 * @param systemInstruction The system instruction/context for the chat.
 * @param userApiKey Optional user-provided API key.
 * @returns A Chat instance.
 */
export const createChatSession = (
  systemInstruction: string,
  userApiKey?: string,
): Chat => {
  const apiKey = getApiKey(userApiKey);
  const ai = new GoogleGenAI({ apiKey });
  const chat: Chat = ai.chats.create({
    model: 'gemini-2.5-flash',
    config: {
      systemInstruction,
    },
  });
  return chat;
};

/// frontend/services/gemini/index.ts ///
export * from './api';
export * from '../integrations/github';
export * from '../integrations/jira';

/// frontend/services/gemini/prompts.ts ///
import { 
    AnalysisType, 
    HistoryItem,
    Priority,
    MaturityLevel,
    Difficulty,
    Effort
} from '../../types';

export const getAnalysisPrompt = (projectContext: string, analysisType: AnalysisType, locale: 'pt-BR' | 'en-US'): string => {
    const language = locale === 'pt-BR' ? 'Portuguese (Brazil)' : 'English (US)';
    
    const typeSpecificInstructions: Record<AnalysisType, string> = {
        [AnalysisType.General]: "Provide a holistic overview. Assess the project's goals, current state, and future potential. Your evaluation should be balanced, covering technology, process, and business value.",
        [AnalysisType.Security]: "Adopt the mindset of a security engineer. Analyze the context for potential vulnerabilities based on OWASP Top 10 principles. Focus on authentication, data handling, dependencies, and infrastructure security. Suggestions must be concrete and actionable.",
        [AnalysisType.Scalability]: "Act as a performance and scalability expert. Identify potential bottlenecks in the architecture, data access patterns, and infrastructure. Consider caching strategies, database performance, load balancing, and asynchronous processing.",
        [AnalysisType.CodeQuality]: "Think like a lead developer focused on maintainability. Evaluate code structure, adherence to design patterns (like SOLID), complexity, and clarity. Suggest specific refactoring opportunities and best practices.",
    };

    const analysisFocus = typeSpecificInstructions[analysisType];

    return `
      You are a world-class senior software architect and project management consultant with 20 years of experience. Your task is to analyze a software project based on the provided context, following a structured, step-by-step thinking process.

      **Your Thought Process:**
      1.  **Deconstruct Context:** First, thoroughly read and understand all the provided project documentation. Identify the core technologies, goals, and current status of the project.
      2.  **Apply Specific Lens:** Based on the requested analysis type, apply the corresponding expert lens to the context.
      3.  **Formulate Insights:** Generate strengths, weaknesses, and actionable recommendations based on your expert evaluation.
      4.  **Structure Response:** Finally, construct the JSON response, ensuring every field is populated with insightful and relevant information, strictly adhering to the schema.

      **Requested Analysis Type:** "${analysisType}"
      **Your Focus for this Analysis:** ${analysisFocus}
      
      **Response Language:** The entire JSON response, including all string values, MUST be in ${language}.
      
      **Crucial Schema Instructions**: 
      For any fields that expect an enum value (like 'priority', 'difficulty', 'estimatedEffort', 'level'), you MUST use one of the following exact string values. These enum values are universal and MUST NOT be translated.
      - Priority values: ${Object.values(Priority).join(', ')}
      - Difficulty values: ${Object.values(Difficulty).join(', ')}
      - Effort values: ${Object.values(Effort).join(', ')}
      - Maturity Level values: ${Object.values(MaturityLevel).join(', ')}

      **Project Context to Analyze:**
      \`\`\`
      ${projectContext}
      \`\`\`

      **Your Mandate:**
      Produce a detailed, insightful, and actionable report.
      - **projectName**: Extract the project name from the context.
      - **analysisType**: Must be "${analysisType}".
      - **summary**: A concise executive summary of your key findings.
      - **strengths**: A list of key positive aspects directly observed from the context.
      - **improvements**: A prioritized list of areas for improvement. Each must have a clear title, description, priority, difficulty, and tangible business impact.
      - **nextSteps**: Concrete short-term and long-term actions.
      - **viability**: An overall viability score from 1 (very low) to 10 (excellent) with a strong justification based on the analysis.
      - **roiAnalysis**: An assessment of the potential return on investment, including potential gains and estimated effort.
      - **maturity**: Assess the project's current maturity level with justification.

      Your response MUST be a single, valid JSON object that strictly adheres to the provided schema. Do not include any text, notes, or explanations outside of the JSON structure.
    `;
};

export const getEvolutionPrompt = (item1: HistoryItem, item2: HistoryItem, locale: 'pt-BR' | 'en-US'): string => {
    const language = locale === 'pt-BR' ? 'Portuguese (Brazil)' : 'English (US)';
    const [older, newer] = [item1, item2].sort((a, b) => a.id - b.id);

    return `
      You are a senior project analyst. Your task is to compare two analyses of the same project, conducted at different times, and generate an evolution report.
      The response language MUST be ${language}.
      
      **Crucial Instruction**: For any fields named 'priority' or 'difficulty' in the generated lists (resolved, new, persistent improvements), you MUST use one of the following exact string values: ${Object.values(Priority).join(', ')}. Do not translate these values.

      The project is "${newer.projectName}" and the analysis type is "${newer.analysisType}".

      **Analysis 1 (Older - from ${older.timestamp}):**
      \`\`\`json
      ${JSON.stringify(older.analysis, null, 2)}
      \`\`\`

      **Analysis 2 (Newer - from ${newer.timestamp}):**
      \`\`\`json
      ${JSON.stringify(newer.analysis, null, 2)}
      \`\`\`

      Based on these two analyses, provide a detailed evolution report.
      - **evolutionSummary**: A summary describing the project's evolution, highlighting key changes, progress, and new challenges.
      - **keyMetrics**: Calculate the changes in key metrics: viability score, number of strengths, and number of improvements.
      - **resolvedImprovements**: Identify improvements from the older analysis that are no longer present in the newer one. Assume they have been resolved.
      - **newImprovements**: Identify improvements present in the newer analysis that were not in the older one.
      - **persistentImprovements**: Identify improvements that are present in both analyses.

      Your response MUST be a valid JSON object that strictly adheres to the provided schema. Do not include any text, notes, or explanations outside of the JSON structure.
    `;
};

/// frontend/services/gemini/schemas.ts ///
import { Type } from "@google/genai";
import { 
    AnalysisType,
    Priority,
    Difficulty,
    Effort,
    MaturityLevel
} from '../../types';

// Schemas for JSON response
export const improvementSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING },
        description: { type: Type.STRING },
        priority: { type: Type.STRING, enum: Object.values(Priority) },
        difficulty: { type: Type.STRING, enum: Object.values(Difficulty) },
        businessImpact: { type: Type.STRING },
    },
    required: ['title', 'description', 'priority', 'difficulty', 'businessImpact'],
};

export const nextStepSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING },
        description: { type: Type.STRING },
        difficulty: { type: Type.STRING, enum: Object.values(Difficulty) },
    },
    required: ['title', 'description', 'difficulty'],
};

export const projectAnalysisSchema = {
    type: Type.OBJECT,
    properties: {
        projectName: { type: Type.STRING },
        analysisType: { type: Type.STRING, enum: Object.values(AnalysisType) },
        summary: { type: Type.STRING },
        strengths: { type: Type.ARRAY, items: { type: Type.STRING } },
        improvements: { type: Type.ARRAY, items: improvementSchema },
        nextSteps: {
            type: Type.OBJECT,
            properties: {
                shortTerm: { type: Type.ARRAY, items: nextStepSchema },
                longTerm: { type: Type.ARRAY, items: nextStepSchema },
            },
            required: ['shortTerm', 'longTerm'],
        },
        viability: {
            type: Type.OBJECT,
            properties: {
                score: { type: Type.INTEGER, description: 'An integer score from 1 to 10.' },
                assessment: { type: Type.STRING },
            },
            required: ['score', 'assessment'],
        },
        roiAnalysis: {
            type: Type.OBJECT,
            properties: {
                assessment: { type: Type.STRING },
                potentialGains: { type: Type.ARRAY, items: { type: Type.STRING } },
                estimatedEffort: { type: Type.STRING, enum: Object.values(Effort) },
            },
            required: ['assessment', 'potentialGains', 'estimatedEffort'],
        },
        maturity: {
            type: Type.OBJECT,
            properties: {
                level: { type: Type.STRING, enum: Object.values(MaturityLevel) },
                assessment: { type: Type.STRING },
            },
            required: ['level', 'assessment'],
        },
    },
    required: ['projectName', 'analysisType', 'summary', 'strengths', 'improvements', 'nextSteps', 'viability', 'roiAnalysis', 'maturity'],
};

export const evolutionAnalysisSchema = {
    type: Type.OBJECT,
    properties: {
        projectName: { type: Type.STRING },
        analysisType: { type: Type.STRING, enum: Object.values(AnalysisType) },
        evolutionSummary: { type: Type.STRING },
        keyMetrics: {
            type: Type.OBJECT,
            properties: {
                previousScore: { type: Type.INTEGER },
                currentScore: { type: Type.INTEGER },
                scoreChange: { type: Type.NUMBER },
                previousStrengths: { type: Type.INTEGER },
                currentStrengths: { type: Type.INTEGER },
                previousImprovements: { type: Type.INTEGER },
                currentImprovements: { type: Type.INTEGER },
            },
            required: ['previousScore', 'currentScore', 'scoreChange', 'previousStrengths', 'currentStrengths', 'previousImprovements', 'currentImprovements'],
        },
        resolvedImprovements: { type: Type.ARRAY, items: improvementSchema },
        newImprovements: { type: Type.ARRAY, items: improvementSchema },
        persistentImprovements: { type: Type.ARRAY, items: improvementSchema },
    },
    required: ['projectName', 'analysisType', 'evolutionSummary', 'keyMetrics', 'resolvedImprovements', 'newImprovements', 'persistentImprovements'],
};

/// frontend/services/gemini/utils.ts ///
export const parseJsonResponse = <T>(responseText: string, schemaType: string): T => {
    try {
        if (!responseText) {
            throw new Error(`Received empty response from API when expecting ${schemaType}.`);
        }
        const cleanedJson = responseText.replace(/```json/g, '').replace(/```/g, '').trim();
        return JSON.parse(cleanedJson) as T;
    } catch (error) {
        console.error(`Error parsing ${schemaType} JSON:`, error);
        console.error("Invalid JSON string:", responseText);
        throw new Error(`Failed to parse the analysis response. The format was invalid.`);
    }
};

export const handleGeminiError = (error: any) => {
    console.error("Gemini API Error:", error);
    const message = error.toString();

    if (message.includes("API_KEY_EMPTY")) {
        throw new Error("The API key field cannot be empty. Please enter a valid key.");
    }
    if (message.includes("API key not valid")) {
        throw new Error("The Gemini API key is invalid. Please check your key and try again.");
    }
    if (message.includes("Billing") || message.includes("billing")) {
        throw new Error("There seems to be a billing issue with your Google Cloud project for the Gemini API.");
    }
    if (message.includes("SAFETY")) {
        throw new Error("The response was blocked due to safety settings. Please modify your input.");
    }

    throw new Error("An unexpected error occurred with the Gemini API.");
};

/// frontend/services/integrations/jira.ts ///
// services/integrations/jira.ts
import { AppSettings } from "../../types";

const formatMockContext = (projectKey: string, settings: AppSettings): string => {
    return `# Contexto do Projeto Jira (Simulado)\n`;
    // Add more mock data structure as needed
};

/**
 * Fetches project data from Jira.
 * NOTE: This is currently a mock implementation.
 * @param projectKey The Jira project key (e.g., "PROJ").
 * @param settings The app settings containing Jira credentials.
 * @returns A formatted string with mock project data.
 */
export const fetchJiraProject = async (projectKey: string, settings: AppSettings): Promise<string> => {
    console.log("Fetching Jira data for:", projectKey, "with instance:", settings.jiraInstanceUrl);

    // Mock API call delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // In a real implementation, you would use the credentials to make API calls to the Jira instance.
    // For now, we return a success message with mock data.
    
    const mockData = `
# Contexto do Projeto Jira (Dados Simulados)
## Projeto: ${projectKey} - Análise de Agilidade

### Resumo
Este projeto visa melhorar o fluxo de trabalho de desenvolvimento, com base nos dados extraídos do Jira.

### Épicos Recentes
1.  **[${projectKey}-101] Refatoração da Interface do Usuário (Q3)**
    - **Status:** Em Andamento
    - **Descrição:** Modernizar a UI principal para melhorar a experiência do usuário.

2.  **[${projectKey}-102] Integração de Pagamento via API (Q3)**
    - **Status:** A Fazer
    - **Descrição:** Implementar um novo gateway de pagamento para expandir as opções do cliente.

### Sprint Atual: "Sprint 14 - Finalização"
- **Objetivo:** Concluir as tarefas de alta prioridade para o lançamento da v2.3.
- **Progresso:** 75% concluído.

### Impedimentos Notáveis
- **[${projectKey}-155] API de Terceiros Instável**
    - **Status:** Em Análise
    - **Descrição:** A API de parceiro está apresentando latência, impactando os testes de integração.
    - **Prioridade:** Alta
`;

    return mockData.trim();
};

/// frontend/services/unified-ai.ts ///
// Unified AI service - allows switching between direct Gemini and Gateway
import { AnalysisType, EvolutionAnalysis, HistoryItem, ProjectAnalysis } from "../types";

// Direct Gemini imports (existing functionality)
import {
  analyzeProject as analyzeProjectDirect,
  compareAnalyses as compareAnalysesDirect,
  createChatSession as createChatSessionDirect,
  testApiKey as testApiKeyDirect
} from "./gemini/api";

// Gateway imports (new functionality)
import {
  analyzeProjectViaGateway,
  compareAnalysesViaGateway,
  createChatSessionViaGateway,
  testGatewayConnection
} from "./gateway/api";

export type AIProvider = 'gemini-direct' | 'gateway-gemini' | 'gateway-openai' | 'gateway-anthropic';

interface AIServiceConfig {
  provider: AIProvider;
  userApiKey?: string;
  gatewayUrl?: string;
}

/**
 * Unified AI Service - abstracts different providers behind a common interface
 */
export class AIService {
  private config: AIServiceConfig;

  constructor(config: AIServiceConfig) {
    this.config = config;
  }

  /**
   * Test the configured provider
   */
  async testConnection(): Promise<void> {
    switch (this.config.provider) {
      case 'gemini-direct':
        if (!this.config.userApiKey) {
          throw new Error('API key required for direct Gemini access');
        }
        return testApiKeyDirect(this.config.userApiKey);

      case 'gateway-gemini':
      case 'gateway-openai':
      case 'gateway-anthropic':
        const gatewayProvider = this.config.provider.split('-')[1]; // Extract 'gemini', 'openai', etc.
        return testGatewayConnection(gatewayProvider);

      default:
        throw new Error(`Unsupported provider: ${this.config.provider}`);
    }
  }

  /**
   * Analyze a project using the configured provider
   */
  async analyzeProject(
    projectContext: string,
    analysisType: AnalysisType,
    locale: 'pt-BR' | 'en-US'
  ): Promise<ProjectAnalysis> {

    switch (this.config.provider) {
      case 'gemini-direct':
        return analyzeProjectDirect(projectContext, analysisType, locale, this.config.userApiKey);

      case 'gateway-gemini':
        return analyzeProjectViaGateway(projectContext, analysisType, locale, this.config.userApiKey, 'gemini');

      case 'gateway-openai':
        return analyzeProjectViaGateway(projectContext, analysisType, locale, this.config.userApiKey, 'openai');

      case 'gateway-anthropic':
        return analyzeProjectViaGateway(projectContext, analysisType, locale, this.config.userApiKey, 'anthropic');

      default:
        throw new Error(`Unsupported provider: ${this.config.provider}`);
    }
  }

  /**
   * Compare analyses using the configured provider
   */
  async compareAnalyses(
    item1: HistoryItem,
    item2: HistoryItem,
    locale: 'pt-BR' | 'en-US'
  ): Promise<EvolutionAnalysis> {

    switch (this.config.provider) {
      case 'gemini-direct':
        return compareAnalysesDirect(item1, item2, locale, this.config.userApiKey);

      case 'gateway-gemini':
        return compareAnalysesViaGateway(item1, item2, locale, this.config.userApiKey, 'gemini');

      case 'gateway-openai':
        return compareAnalysesViaGateway(item1, item2, locale, this.config.userApiKey, 'openai');

      case 'gateway-anthropic':
        return compareAnalysesViaGateway(item1, item2, locale, this.config.userApiKey, 'anthropic');

      default:
        throw new Error(`Unsupported provider: ${this.config.provider}`);
    }
  }

  /**
   * Create a chat session using the configured provider
   */
  createChatSession(systemInstruction: string) {
    switch (this.config.provider) {
      case 'gemini-direct':
        return createChatSessionDirect(systemInstruction, this.config.userApiKey);

      case 'gateway-gemini':
        return createChatSessionViaGateway(systemInstruction, this.config.userApiKey, 'gemini');

      case 'gateway-openai':
        return createChatSessionViaGateway(systemInstruction, this.config.userApiKey, 'openai');

      case 'gateway-anthropic':
        return createChatSessionViaGateway(systemInstruction, this.config.userApiKey, 'anthropic');

      default:
        throw new Error(`Unsupported provider: ${this.config.provider}`);
    }
  }

  /**
   * Get provider-specific information
   */
  getProviderInfo() {
    switch (this.config.provider) {
      case 'gemini-direct':
        return {
          name: 'Google Gemini (Direct)',
          type: 'direct',
          supportsStreaming: false,
          requiresApiKey: true,
          description: 'Direct connection to Google Gemini API'
        };

      case 'gateway-gemini':
        return {
          name: 'Google Gemini (Gateway)',
          type: 'gateway',
          supportsStreaming: true,
          requiresApiKey: false, // Can use server-side key
          description: 'Gemini via analyzer gateway with streaming support'
        };

      case 'gateway-openai':
        return {
          name: 'OpenAI (Gateway)',
          type: 'gateway',
          supportsStreaming: true,
          requiresApiKey: false,
          description: 'OpenAI via analyzer gateway with streaming support'
        };

      case 'gateway-anthropic':
        return {
          name: 'Anthropic Claude (Gateway)',
          type: 'gateway',
          supportsStreaming: true,
          requiresApiKey: false,
          description: 'Anthropic Claude via analyzer gateway with streaming support'
        };

      default:
        return {
          name: 'Unknown Provider',
          type: 'unknown',
          supportsStreaming: false,
          requiresApiKey: true,
          description: 'Unknown provider configuration'
        };
    }
  }
}

/**
 * Factory function to create AI service instances
 */
export const createAIService = (config: AIServiceConfig): AIService => {
  return new AIService(config);
};

/**
 * Helper to get available providers
 */
export const getAvailableProviders = (): Array<{ value: AIProvider, label: string, description: string }> => {
  return [
    {
      value: 'gemini-direct',
      label: 'Gemini (Direct)',
      description: 'Direct connection to Google Gemini - current stable implementation'
    },
    {
      value: 'gateway-gemini',
      label: 'Gemini (Gateway)',
      description: 'Gemini via gateway with streaming and cost tracking'
    },
    {
      value: 'gateway-openai',
      label: 'OpenAI (Gateway)',
      description: 'OpenAI GPT models with streaming and cost tracking'
    },
    {
      value: 'gateway-anthropic',
      label: 'Anthropic (Gateway)',
      description: 'Claude models with streaming and cost tracking (coming soon)'
    }
  ];
};

// Re-export specific functions for backward compatibility
export { testGatewayConnection } from "./gateway/api";
export { testApiKey as testGeminiApiKey } from "./gemini/api";

/// frontend/sw.ts ///
/// <reference lib="webworker" />

const CACHE_NAME = 'gemx-analyzer-cache-v1';

// Pre-cache essential assets for the app shell to work offline.
const APP_SHELL_URLS = [
  '/',
  '/index.html',
  '/index.css',
  // en-US
  '/locales/en-US/common.json',
  '/locales/en-US/input.json',
  '/locales/en-US/dashboard.json',
  '/locales/en-US/landing.json',
  '/locales/en-US/settings.json',
  // pt-BR
  '/locales/pt-BR/common.json',
  '/locales/pt-BR/input.json',
  '/locales/pt-BR/dashboard.json',
  '/locales/pt-BR/landing.json',
  '/locales/pt-BR/settings.json'
];

const swOriginIgnore = [
  '//ai.studio',
  'scf.usercontent.goog',
  'generativelanguage.googleapis.com'
]

self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('Opened cache and caching app shell');
      return cache.addAll(APP_SHELL_URLS);
    })
  );
});

self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

self.addEventListener('fetch', (event) => {
  // Use a "network falling back to cache" strategy for navigation requests
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => caches.match('/index.html') as Promise<Response>)
    );
    return;
  }

  // Use a "stale-while-revalidate" strategy for other assets (CSS, JS, images, fonts, etc.)
  // Skip non-GET requests and Gemini API calls
  if (event.request.method !== 'GET' || swOriginIgnore.filter((v, i) => event.request.url.includes(v)).length > 0) {
    return;
  }
  
  event.respondWith(
    caches.open(CACHE_NAME).then(async (cache) => {
      const cachedResponse = await cache.match(event.request);
      
      const fetchPromise = fetch(event.request).then((networkResponse) => {
        if (networkResponse.ok) {
          cache.put(event.request, networkResponse.clone());
        }
        return networkResponse;
      }).catch(err => {
        console.warn(`Fetch failed for ${event.request.url}; returning cached response if available.`, err);
        // If fetch fails and we have a cached response, the cachedResponse will be returned.
        // If not, the promise will reject, leading to a network error page.
        if (cachedResponse) {
          return cachedResponse;
        }
        throw err;
      });

      return cachedResponse || fetchPromise;
    })
  );
});

/// frontend/tsconfig.json ///
{
  "compilerOptions": {
    "target": "ES2022",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "strict": true,
    "module": "ESNext",
    "lib": [
      "ES2022",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    "types": [
      "vite/client"
    ],
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    "allowJs": true,
    "jsx": "react-jsx",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "allowImportingTsExtensions": true,
    "noEmit": true
  }
}

/// frontend/types/index.ts ///
// Enums
export enum AnalysisType {
  General = 'General',
  Security = 'Security',
  Scalability = 'Scalability',
  CodeQuality = 'CodeQuality',
}

export enum Priority {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export enum Difficulty {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export enum Effort {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export enum MaturityLevel {
  Prototype = 'Prototype',
  MVP = 'MVP',
  Production = 'Production',
  Optimized = 'Optimized',
}

export type NotificationType = 'success' | 'error' | 'info';

export enum DataSourceType {
    Manual = 'MANUAL',
    GitHub = 'GITHUB',
    Jira = 'JIRA',
}

export enum ViewType {
  Dashboard = 'DASHBOARD',
  Input = 'INPUT',
  Analysis = 'ANALYSIS',
  Kanban = 'KANBAN',
  Evolution = 'EVOLUTION',
  Chat = 'CHAT',
}

export type Theme = 'light' | 'dark' | 'system';

// Interfaces for Analysis
export interface Improvement {
  title: string;
  description: string;
  priority: Priority;
  difficulty: Difficulty;
  businessImpact: string;
}

export interface NextStep {
  title: string;
  description: string;
  difficulty: Difficulty;
}

export interface Viability {
  score: number;
  assessment: string;
}

export interface RoiAnalysis {
  assessment: string;
  potentialGains: string[];
  estimatedEffort: Effort;
}

export interface ProjectMaturity {
  level: MaturityLevel;
  assessment: string;
}

export interface UsageMetadata {
    promptTokenCount: number;
    candidatesTokenCount: number;
    totalTokenCount: number;
}

export interface ProjectAnalysis {
  projectName: string;
  analysisType: AnalysisType;
  summary: string;
  strengths: string[];
  improvements: Improvement[];
  nextSteps: {
    shortTerm: NextStep[];
    longTerm: NextStep[];
  };
  viability: Viability;
  roiAnalysis: RoiAnalysis;
  maturity: ProjectMaturity;
  usageMetadata?: UsageMetadata;
}

export interface KeyMetrics {
    previousScore: number;
    currentScore: number;
    scoreChange: number;
    previousStrengths: number;
    currentStrengths: number;
    previousImprovements: number;
    currentImprovements: number;
}

export interface EvolutionAnalysis {
    projectName: string;
    analysisType: AnalysisType;
    evolutionSummary: string;
    keyMetrics: KeyMetrics;
    resolvedImprovements: Improvement[];
    newImprovements: Improvement[];
    persistentImprovements: Improvement[];
    usageMetadata?: UsageMetadata;
}


// Interfaces for App state
export interface ProjectFile {
    id: number;
    name: string;
    content: string;
}

export interface HistoryItem {
  id: number;
  projectName: string;
  analysisType: AnalysisType;
  timestamp: string;
  analysis: ProjectAnalysis;
  projectContext: string;
}

export interface Notification {
  id: number;
  message: string;
  type: NotificationType;
  duration?: number;
}

export interface AppSettings {
    saveHistory: boolean;
    theme: Theme;
    tokenLimit: number;
    userApiKey?: string;
    // Integration settings
    githubPat?: string;
    jiraInstanceUrl?: string;
    jiraUserEmail?: string;
    jiraApiToken?: string;
}

export interface UsageTracking {
    totalTokens: number;
    monthlyTokens: number;
}

export interface UserProfile {
    name: string;
    email?: string;
    avatar?: string;
}

// Kanban types
export type KanbanColumnId = 'backlog' | 'todo' | 'inProgress' | 'done';

export interface KanbanCard {
    id: string;
    title: string;
    description: string;
    priority: Priority;
    difficulty: Difficulty;
    tags: string[];
    notes: string;
}

export interface KanbanColumn {
    id: KanbanColumnId;
    title: string;
    cards: KanbanCard[];
}

export interface KanbanState {
    projectName: string;
    columns: {
        [key in KanbanColumnId]: KanbanColumn;
    };
}

// Interfaces for Chat
export interface ChatMessage {
    role: 'user' | 'model';
    parts: { text: string }[];
}

export type AllChatHistories = Record<number, ChatMessage[]>;

// Interfaces for Integrations
export interface GitHubRepoListItem {
  id: number;
  name: string;
  full_name: string;
  description: string | null;
  stargazers_count: number;
  html_url: string;
  owner: {
    login: string;
  };
}

/// frontend/vite.config.ts ///
import path from 'path';
import { defineConfig, loadEnv } from 'vite';

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, '.', '');
  return {
    define: {
      /*

      Environment variables for the Application
      They are all prefixed with "process.env." to be compatible with libraries that expect this format.

      !!!!! DON'T LET THEM LEAK INTO THE FRONTEND CODE !!!!
      !!!!! THEY SHOULD ONLY BE USED IN SERVER-SIDE CODE !!!!!

      */
      'process.env.API_KEY': JSON.stringify(env.GRT_API_KEY || ''),
      'process.env.PORT': JSON.stringify(env.PORT || '3000'),
      'process.env.MAX_RETRIES': JSON.stringify(env.MAX_RETRIES || '3'),
      'process.env.RETRY_DELAY_MS': JSON.stringify(env.RETRY_DELAY_MS || '1000'),
      'process.env.DEBUG': JSON.stringify(env.DEBUG || 'false'),
      'process.env.TEST_MODE': JSON.stringify(env.TEST_MODE || 'false'),
      'process.env.LOG_LEVEL': JSON.stringify(env.LOG_LEVEL || 'info'),
      'process.env.SECURITY_ENABLED': JSON.stringify(env.SECURITY_ENABLED || 'true'),
      'process.env.RATE_LIMIT': JSON.stringify(env.RATE_LIMIT || '100'),
      'process.env.RATE_LIMIT_WINDOW': JSON.stringify(env.RATE_LIMIT_WINDOW || '1m'),

      // 'process.env.CORS_ORIGIN': JSON.stringify(env.CORS_ORIGIN || '*'),
      // 'process.env.CORS_CREDENTIALS': JSON.stringify(env.CORS_CREDENTIALS || 'true'),

      'process.env.OPENAI_API_KEY': JSON.stringify(env.OPENAI_API_KEY || ''),
      'process.env.CHATGPT_API_KEY': JSON.stringify(env.CHATGPT_API_KEY || ''),
      'process.env.ANTHROPIC_API_KEY': JSON.stringify(env.ANTHROPIC_API_KEY || ''),
      'process.env.DEEPSEEK_API_KEY': JSON.stringify(env.DEEPSEEK_API_KEY || ''),
      'process.env.OLLAMA_API_KEY': JSON.stringify(env.OLLAMA_API_KEY || ''),
      'process.env.OLLAMA_API_URL': JSON.stringify(env.OLLAMA_API_URL || ''),
      'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY || ''),

      // 'process.env.GOOGLE_AI_STUDIO_API_KEY': JSON.stringify(env.GOOGLE_AI_STUDIO_API_KEY || ''),
      // 'process.env.GOOGLE_ANALYTICS_API_KEY': JSON.stringify(env.GOOGLE_ANALYTICS_API_KEY || ''),

      // 'process.env.PINECONE_API_KEY': JSON.stringify(env.PINECONE_API_KEY || ''),
      // 'process.env.GITHUB_PAT_TOKEN': JSON.stringify(env.GITHUB_PAT_TOKEN || ''),

      // 'process.env.VITE_SUPABASE_URL': JSON.stringify(env.VITE_SUPABASE_URL || ''),
      // 'process.env.VITE_SUPABASE_ANON_KEY': JSON.stringify(env.VITE_SUPABASE_ANON_KEY || ''),
      // 'process.env.VITE_SUPABASE_SERVICE_ROLE_KEY': JSON.stringify(env.VITE_SUPABASE_SERVICE_ROLE_KEY || ''),
      // 'process.env.VITE_SUPABASE_BEARER_TOKEN': JSON.stringify(env.VITE_SUPABASE_BEARER_TOKEN || ''),
      // 'process.env.VITE_SUPABASE_FALLBACK_ENABLE': JSON.stringify(env.VITE_SUPABASE_FALLBACK_ENABLE || 'false'),
      // 'process.env.VITE_SUPABASE_FALLBACK_URL': JSON.stringify(env.VITE_SUPABASE_FALLBACK_URL || ''),
      // 'process.env.VITE_SUPABASE_FALLBACK_ANON_KEY': JSON.stringify(env.VITE_SUPABASE_FALLBACK_ANON_KEY || ''),

      // 'process.env.POSTGRES_HOST': JSON.stringify(env.POSTGRES_HOST || ''),
      // 'process.env.POSTGRES_PORT': JSON.stringify(env.POSTGRES_PORT || ''),
      // 'process.env.POSTGRES_USER': JSON.stringify(env.POSTGRES_USER || ''),
      // 'process.env.POSTGRES_PASSWORD': JSON.stringify(env.POSTGRES_PASSWORD || ''),
      // 'process.env.POSTGRES_DB': JSON.stringify(env.POSTGRES_DB || ''),
      // 'process.env.POSTGRES_SSL': JSON.stringify(env.POSTGRES_SSL || ''),
      // 'process.env.POSTGRES_MAX_CLIENTS': JSON.stringify(env.POSTGRES_MAX_CLIENTS || ''),

      // 'process.env.REDIS_HOST': JSON.stringify(env.REDIS_HOST || ''),
      // 'process.env.REDIS_PORT': JSON.stringify(env.REDIS_PORT || ''),
      // 'process.env.REDIS_PASSWORD': JSON.stringify(env.REDIS_PASSWORD || ''),
      // 'process.env.REDIS_SENTINEL_ENABLED': JSON.stringify(env.REDIS_SENTINEL_ENABLED || ''),
      // 'process.env.REDIS_SENTINEL_HOST': JSON.stringify(env.REDIS_SENTINEL_HOST || ''),
      // 'process.env.REDIS_SENTINEL_PORT': JSON.stringify(env.REDIS_SENTINEL_PORT || ''),
      // 'process.env.REDIS_SENTINEL_MASTER_NAME': JSON.stringify(env.REDIS_SENTINEL_MASTER_NAME || ''),

      // 'process.env.RABBITMQ_HOST': JSON.stringify(env.RABBITMQ_HOST || ''),
      // 'process.env.RABBITMQ_PORT': JSON.stringify(env.RABBITMQ_PORT || ''),
      // 'process.env.RABBITMQ_USER': JSON.stringify(env.RABBITMQ_USER || ''),
      // 'process.env.RABBITMQ_PASSWORD': JSON.stringify(env.RABBITMQ_PASSWORD || ''),
      // 'process.env.RABBITMQ_VHOST': JSON.stringify(env.RABBITMQ_VHOST || ''),
      // 'process.env.RABBITMQ_QUEUE_NAME': JSON.stringify(env.RABBITMQ_QUEUE_NAME || ''),
      // 'process.env.RABBITMQ_QUEUE_DURABLE': JSON.stringify(env.RABBITMQ_QUEUE_DURABLE || ''),
      // 'process.env.RABBITMQ_QUEUE_AUTO_DELETE': JSON.stringify(env.RABBITMQ_QUEUE_AUTO_DELETE || ''),

      // 'process.env.MONGODB_URI': JSON.stringify(env.MONGODB_URI || ''),
      // 'process.env.MONGODB_DB': JSON.stringify(env.MONGODB_DB || ''),
      // 'process.env.MONGODB_USER': JSON.stringify(env.MONGODB_USER || ''),
      // 'process.env.MONGODB_PASSWORD': JSON.stringify(env.MONGODB_PASSWORD || ''),
      // 'process.env.MONGODB_AUTH_SOURCE': JSON.stringify(env.MONGODB_AUTH_SOURCE || ''),
      // 'process.env.MONGODB_SSL': JSON.stringify(env.MONGODB_SSL || ''),
      // 'process.env.MONGODB_REPLICA_SET': JSON.stringify(env.MONGODB_REPLICA_SET || ''),
      // 'process.env.MONGODB_MAX_POOL_SIZE': JSON.stringify(env.MONGODB_MAX_POOL_SIZE || ''),
      // 'process.env.MONGODB_MIN_POOL_SIZE': JSON.stringify(env.MONGODB_MIN_POOL_SIZE || ''),
      // 'process.env.MONGODB_CONNECT_TIMEOUT_MS': JSON.stringify(env.MONGODB_CONNECT_TIMEOUT_MS || ''),
      // 'process.env.MONGODB_SOCKET_TIMEOUT_MS': JSON.stringify(env.MONGODB_SOCKET_TIMEOUT_MS || ''),
      // 'process.env.MONGODB_SERVER_SELECTION_TIMEOUT_MS': JSON.stringify(env.MONGODB_SERVER_SELECTION_TIMEOUT_MS || ''),
      // 'process.env.MONGODB_HEARTBEAT_FREQUENCY_MS': JSON.stringify(env.MONGODB_HEARTBEAT_FREQUENCY_MS || ''),

      // 'process.env.BACKUP_ENABLED': JSON.stringify(env.BACKUP_ENABLED || ''),
      // 'process.env.BACKUP_SCHEDULE': JSON.stringify(env.BACKUP_SCHEDULE || ''),
      // 'process.env.BACKUP_RETENTION': JSON.stringify(env.BACKUP_RETENTION || ''),
      // 'process.env.BACKUP_PATH': JSON.stringify(env.BACKUP_PATH || ''),

      // 'process.env.SMTP_HOST': JSON.stringify(env.SMTP_HOST || ''),
      // 'process.env.SMTP_PORT': JSON.stringify(env.SMTP_PORT || ''),
      // 'process.env.SMTP_USER': JSON.stringify(env.SMTP_USER || ''),
      // 'process.env.SMTP_PASSWORD': JSON.stringify(env.SMTP_PASSWORD || ''),
      // 'process.env.SMTP_FROM': JSON.stringify(env.SMTP_FROM || ''),
      // 'process.env.SMTP_FROM_NAME': JSON.stringify(env.SMTP_FROM_NAME || '')
    },
    resolve: {
      alias: {
        '@': path.resolve(__dirname, '.'),
      }
    },
    build: {
      rollupOptions: {
        onwarn: (warning, warn) => {
          // Suppress "use client" warnings from framer-motion
          if (warning.code === 'MODULE_LEVEL_DIRECTIVE' &&
            warning.message.includes('use client')) {
            return;
          }
          warn(warning);
        },
        output: {
          manualChunks: {
            vendor: [
              'react',
              'react-dom'
            ],
          },
        },
      },
      chunkSizeWarningLimit: 1512,
    },
  };
});

/// go.mod ///
module github.com/kubex-ecosystem/gemx/analyzer

go 1.25.1

require (
	github.com/google/generative-ai-go v0.12.0
	google.golang.org/api v0.249.0
	gopkg.in/yaml.v3 v3.0.1
)

require (
	cloud.google.com/go v0.122.0 // indirect
	cloud.google.com/go/ai v0.13.0 // indirect
	cloud.google.com/go/auth v0.16.5 // indirect
	cloud.google.com/go/auth/oauth2adapt v0.2.8 // indirect
	cloud.google.com/go/compute/metadata v0.8.0 // indirect
	cloud.google.com/go/longrunning v0.6.7 // indirect
	github.com/felixge/httpsnoop v1.0.4 // indirect
	github.com/go-logr/logr v1.4.3 // indirect
	github.com/go-logr/stdr v1.2.2 // indirect
	github.com/google/s2a-go v0.1.9 // indirect
	github.com/google/uuid v1.6.0 // indirect
	github.com/googleapis/enterprise-certificate-proxy v0.3.6 // indirect
	github.com/googleapis/gax-go/v2 v2.15.0 // indirect
	go.opentelemetry.io/auto/sdk v1.2.0 // indirect
	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.63.0 // indirect
	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.63.0 // indirect
	go.opentelemetry.io/otel v1.38.0 // indirect
	go.opentelemetry.io/otel/metric v1.38.0 // indirect
	go.opentelemetry.io/otel/trace v1.38.0 // indirect
	golang.org/x/crypto v0.42.0 // indirect
	golang.org/x/net v0.44.0 // indirect
	golang.org/x/oauth2 v0.31.0 // indirect
	golang.org/x/sync v0.17.0 // indirect
	golang.org/x/sys v0.36.0 // indirect
	golang.org/x/text v0.29.0 // indirect
	golang.org/x/time v0.13.0 // indirect
	google.golang.org/genproto v0.0.0-20250908214217-97024824d090 // indirect
	google.golang.org/genproto/googleapis/api v0.0.0-20250908214217-97024824d090 // indirect
	google.golang.org/genproto/googleapis/rpc v0.0.0-20250908214217-97024824d090 // indirect
	google.golang.org/grpc v1.75.1 // indirect
	google.golang.org/protobuf v1.36.9 // indirect
)

/// go.sum ///
cloud.google.com/go v0.122.0 h1:0JTLGrcSIs3HIGsgVPvTx3cfyFSP/k9CI8vLPHTd6Wc=
cloud.google.com/go v0.122.0/go.mod h1:xBoMV08QcqUGuPW65Qfm1o9Y4zKZBpGS+7bImXLTAZU=
cloud.google.com/go/ai v0.13.0 h1:KkMwhAno5HdRvpjDAIqxMI3O5raIJ3h/X/eJ8sJ2kYw=
cloud.google.com/go/ai v0.13.0/go.mod h1:rLB3bt+wREEFo/SfwmC5RET5brTvYh5aKBTCS9QM9Xk=
cloud.google.com/go/auth v0.16.5 h1:mFWNQ2FEVWAliEQWpAdH80omXFokmrnbDhUS9cBywsI=
cloud.google.com/go/auth v0.16.5/go.mod h1:utzRfHMP+Vv0mpOkTRQoWD2q3BatTOoWbA7gCc2dUhQ=
cloud.google.com/go/auth/oauth2adapt v0.2.8 h1:keo8NaayQZ6wimpNSmW5OPc283g65QNIiLpZnkHRbnc=
cloud.google.com/go/auth/oauth2adapt v0.2.8/go.mod h1:XQ9y31RkqZCcwJWNSx2Xvric3RrU88hAYYbjDWYDL+c=
cloud.google.com/go/compute/metadata v0.8.0 h1:HxMRIbao8w17ZX6wBnjhcDkW6lTFpgcaobyVfZWqRLA=
cloud.google.com/go/compute/metadata v0.8.0/go.mod h1:sYOGTp851OV9bOFJ9CH7elVvyzopvWQFNNghtDQ/Biw=
cloud.google.com/go/longrunning v0.6.7 h1:IGtfDWHhQCgCjwQjV9iiLnUta9LBCo8R9QmAFsS/PrE=
cloud.google.com/go/longrunning v0.6.7/go.mod h1:EAFV3IZAKmM56TyiE6VAP3VoTzhZzySwI/YI1s/nRsY=
github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
github.com/go-logr/logr v1.4.3 h1:CjnDlHq8ikf6E492q6eKboGOC0T8CDaOvkHCIg8idEI=
github.com/go-logr/logr v1.4.3/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
github.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=
github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=
github.com/google/generative-ai-go v0.12.0 h1:ocoAhazDpxDYgjTZdQ2aeVG+Sz4lvmhzfAlRRQF+mxU=
github.com/google/generative-ai-go v0.12.0/go.mod h1:ZTE7C93HuLGT6oJ1IJGt8dfo7HCHqBv3dVUGUCns0yE=
github.com/google/generative-ai-go v0.20.1 h1:6dEIujpgN2V0PgLhr6c/M1ynRdc7ARtiIDPFzj45uNQ=
github.com/google/generative-ai-go v0.20.1/go.mod h1:TjOnZJmZKzarWbjUJgy+r3Ee7HGBRVLhOIgupnwR4Bg=
github.com/google/go-cmp v0.7.0 h1:wk8382ETsv4JYUZwIsn6YpYiWiBsYLSJiTsyBybVuN8=
github.com/google/go-cmp v0.7.0/go.mod h1:pXiqmnSA92OHEEa9HXL2W4E7lf9JzCmGVUdgjX3N/iU=
github.com/google/s2a-go v0.1.9 h1:LGD7gtMgezd8a/Xak7mEWL0PjoTQFvpRudN895yqKW0=
github.com/google/s2a-go v0.1.9/go.mod h1:YA0Ei2ZQL3acow2O62kdp9UlnvMmU7kA6Eutn0dXayM=
github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
github.com/googleapis/enterprise-certificate-proxy v0.3.6 h1:GW/XbdyBFQ8Qe+YAmFU9uHLo7OnF5tL52HFAgMmyrf4=
github.com/googleapis/enterprise-certificate-proxy v0.3.6/go.mod h1:MkHOF77EYAE7qfSuSS9PU6g4Nt4e11cnsDUowfwewLA=
github.com/googleapis/gax-go/v2 v2.15.0 h1:SyjDc1mGgZU5LncH8gimWo9lW1DtIfPibOG81vgd/bo=
github.com/googleapis/gax-go/v2 v2.15.0/go.mod h1:zVVkkxAQHa1RQpg9z2AUCMnKhi0Qld9rcmyfL1OZhoc=
github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/rogpeppe/go-internal v1.14.1 h1:UQB4HGPB6osV0SQTLymcB4TgvyWu6ZyliaW0tI/otEQ=
github.com/rogpeppe/go-internal v1.14.1/go.mod h1:MaRKkUm5W0goXpeCfT7UZI6fk/L7L7so1lCWt35ZSgc=
github.com/stretchr/testify v1.11.1 h1:7s2iGBzp5EwR7/aIZr8ao5+dra3wiQyKjjFuvgVKu7U=
github.com/stretchr/testify v1.11.1/go.mod h1:wZwfW3scLgRK+23gO65QZefKpKQRnfz6sD981Nm4B6U=
go.opentelemetry.io/auto/sdk v1.2.0 h1:YpRtUFjvhSymycLS2T81lT6IGhcUP+LUPtv0iv1N8bM=
go.opentelemetry.io/auto/sdk v1.2.0/go.mod h1:1deq2zL7rwjwC8mR7XgY2N+tlIl6pjmEUoLDENMEzwk=
go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.63.0 h1:YH4g8lQroajqUwWbq/tr2QX1JFmEXaDLgG+ew9bLMWo=
go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.63.0/go.mod h1:fvPi2qXDqFs8M4B4fmJhE92TyQs9Ydjlg3RvfUp+NbQ=
go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.63.0 h1:RbKq8BG0FI8OiXhBfcRtqqHcZcka+gU3cskNuf05R18=
go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.63.0/go.mod h1:h06DGIukJOevXaj/xrNjhi/2098RZzcLTbc0jDAUbsg=
go.opentelemetry.io/otel v1.38.0 h1:RkfdswUDRimDg0m2Az18RKOsnI8UDzppJAtj01/Ymk8=
go.opentelemetry.io/otel v1.38.0/go.mod h1:zcmtmQ1+YmQM9wrNsTGV/q/uyusom3P8RxwExxkZhjM=
go.opentelemetry.io/otel/metric v1.38.0 h1:Kl6lzIYGAh5M159u9NgiRkmoMKjvbsKtYRwgfrA6WpA=
go.opentelemetry.io/otel/metric v1.38.0/go.mod h1:kB5n/QoRM8YwmUahxvI3bO34eVtQf2i4utNVLr9gEmI=
go.opentelemetry.io/otel/sdk v1.38.0 h1:l48sr5YbNf2hpCUj/FoGhW9yDkl+Ma+LrVl8qaM5b+E=
go.opentelemetry.io/otel/sdk v1.38.0/go.mod h1:ghmNdGlVemJI3+ZB5iDEuk4bWA3GkTpW+DOoZMYBVVg=
go.opentelemetry.io/otel/sdk/metric v1.38.0 h1:aSH66iL0aZqo//xXzQLYozmWrXxyFkBJ6qT5wthqPoM=
go.opentelemetry.io/otel/sdk/metric v1.38.0/go.mod h1:dg9PBnW9XdQ1Hd6ZnRz689CbtrUp0wMMs9iPcgT9EZA=
go.opentelemetry.io/otel/trace v1.38.0 h1:Fxk5bKrDZJUH+AMyyIXGcFAPah0oRcT+LuNtJrmcNLE=
go.opentelemetry.io/otel/trace v1.38.0/go.mod h1:j1P9ivuFsTceSWe1oY+EeW3sc+Pp42sO++GHkg4wwhs=
golang.org/x/crypto v0.42.0 h1:chiH31gIWm57EkTXpwnqf8qeuMUi0yekh6mT2AvFlqI=
golang.org/x/crypto v0.42.0/go.mod h1:4+rDnOTJhQCx2q7/j6rAN5XDw8kPjeaXEUR2eL94ix8=
golang.org/x/net v0.44.0 h1:evd8IRDyfNBMBTTY5XRF1vaZlD+EmWx6x8PkhR04H/I=
golang.org/x/net v0.44.0/go.mod h1:ECOoLqd5U3Lhyeyo/QDCEVQ4sNgYsqvCZ722XogGieY=
golang.org/x/oauth2 v0.31.0 h1:8Fq0yVZLh4j4YA47vHKFTa9Ew5XIrCP8LC6UeNZnLxo=
golang.org/x/oauth2 v0.31.0/go.mod h1:lzm5WQJQwKZ3nwavOZ3IS5Aulzxi68dUSgRHujetwEA=
golang.org/x/sync v0.17.0 h1:l60nONMj9l5drqw6jlhIELNv9I0A4OFgRsG9k2oT9Ug=
golang.org/x/sync v0.17.0/go.mod h1:9KTHXmSnoGruLpwFjVSX0lNNA75CykiMECbovNTZqGI=
golang.org/x/sys v0.36.0 h1:KVRy2GtZBrk1cBYA7MKu5bEZFxQk4NIDV6RLVcC8o0k=
golang.org/x/sys v0.36.0/go.mod h1:OgkHotnGiDImocRcuBABYBEXf8A9a87e/uXjp9XT3ks=
golang.org/x/text v0.29.0 h1:1neNs90w9YzJ9BocxfsQNHKuAT4pkghyXc4nhZ6sJvk=
golang.org/x/text v0.29.0/go.mod h1:7MhJOA9CD2qZyOKYazxdYMF85OwPdEr9jTtBpO7ydH4=
golang.org/x/time v0.13.0 h1:eUlYslOIt32DgYD6utsuUeHs4d7AsEYLuIAdg7FlYgI=
golang.org/x/time v0.13.0/go.mod h1:eL/Oa2bBBK0TkX57Fyni+NgnyQQN4LitPmob2Hjnqw4=
gonum.org/v1/gonum v0.16.0 h1:5+ul4Swaf3ESvrOnidPp4GZbzf0mxVQpDCYUQE7OJfk=
gonum.org/v1/gonum v0.16.0/go.mod h1:fef3am4MQ93R2HHpKnLk4/Tbh/s0+wqD5nfa6Pnwy4E=
google.golang.org/api v0.249.0 h1:0VrsWAKzIZi058aeq+I86uIXbNhm9GxSHpbmZ92a38w=
google.golang.org/api v0.249.0/go.mod h1:dGk9qyI0UYPwO/cjt2q06LG/EhUpwZGdAbYF14wHHrQ=
google.golang.org/genproto v0.0.0-20250908214217-97024824d090 h1:ywCL7vA2n3vVHyf+bx1ZV/knaTPRI8GIeKY0MEhEeOc=
google.golang.org/genproto v0.0.0-20250908214217-97024824d090/go.mod h1:zwJI9HzbJJlw2KXy0wX+lmT2JuZoaKK9JC4ppqmxxjk=
google.golang.org/genproto/googleapis/api v0.0.0-20250908214217-97024824d090 h1:d8Nakh1G+ur7+P3GcMjpRDEkoLUcLW2iU92XVqR+XMQ=
google.golang.org/genproto/googleapis/api v0.0.0-20250908214217-97024824d090/go.mod h1:U8EXRNSd8sUYyDfs/It7KVWodQr+Hf9xtxyxWudSwEw=
google.golang.org/genproto/googleapis/rpc v0.0.0-20250908214217-97024824d090 h1:/OQuEa4YWtDt7uQWHd3q3sUMb+QOLQUg1xa8CEsRv5w=
google.golang.org/genproto/googleapis/rpc v0.0.0-20250908214217-97024824d090/go.mod h1:GmFNa4BdJZ2a8G+wCe9Bg3wwThLrJun751XstdJt5Og=
google.golang.org/grpc v1.75.1 h1:/ODCNEuf9VghjgO3rqLcfg8fiOP0nSluljWFlDxELLI=
google.golang.org/grpc v1.75.1/go.mod h1:JtPAzKiq4v1xcAB2hydNlWI2RnF85XXcV0mhKXr2ecQ=
google.golang.org/protobuf v1.36.9 h1:w2gp2mA27hUeUzj9Ex9FBjsBm40zfaDtEWow293U7Iw=
google.golang.org/protobuf v1.36.9/go.mod h1:fuxRtAxBytpl4zzqUh6/eyUujkJdNiuEkXntxiD/uRU=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=

/// internal/gateway/registry/gemini.go ///
package registry

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"sync"
	"time"

	genai "github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

// ChatRequest represents the unified request format.
// type ChatRequest struct {
// 	Model    string
// 	Messages []Message
// 	Temp     float64
// 	Meta     map[string]interface{}
// }

// // Message represents a chat message.
// type Message struct {
// 	Role    string
// 	Content string
// }

// // ChatChunk represents a single chunk of the streamed response.
// type ChatChunk struct {
// 	Content string
// 	Done    bool
// 	Error   string
// 	Usage   *Usage
// }

// // Usage provides metrics about the request.
// type Usage struct {
// 	Tokens   int
// 	Ms       int64
// 	CostUSD  float64
// 	Provider string
// 	Model    string
// }

// geminiProvider implements the Provider interface for Google Gemini
type geminiProvider struct {
	name         string
	apiKey       string
	defaultModel string
	baseURL      string
	client       *genai.Client
	mu           sync.Mutex
}

// NewGeminiProvider creates a new Gemini provider using the SDK
func NewGeminiProvider(name, baseURL, key, model string) (*geminiProvider, error) {
	if key == "" {
		return nil, errors.New("API key is required for Gemini provider")
	}
	if model == "" {
		model = "gemini-1.5-flash"
	}

	// Create a client for the entire provider instance
	ctx := context.Background()
	client, err := genai.NewClient(ctx, option.WithAPIKey(key))
	if err != nil {
		return nil, fmt.Errorf("failed to create Gemini client: %w", err)
	}

	return &geminiProvider{
		name:         name,
		apiKey:       key,
		defaultModel: model,
		baseURL:      baseURL,
		client:       client,
	}, nil
}

// Name returns the provider name
func (g *geminiProvider) Name() string {
	return g.name
}

// Available checks if the provider is available
func (g *geminiProvider) Available() error {
	if g.apiKey == "" {
		return errors.New("API key not configured")
	}
	return nil
}

// Chat performs a chat completion request using Gemini's streaming API with the SDK
func (g *geminiProvider) Chat(ctx context.Context, req ChatRequest) (<-chan ChatChunk, error) {
	model := req.Model
	if model == "" {
		model = g.defaultModel
	}

	// Create a new model instance for each request to set specific parameters
	geminiModel := g.client.GenerativeModel(model)

	// Set generation configurations
	geminiModel.SetTemperature(float32(req.Temp))
	geminiModel.SetMaxOutputTokens(int32(8192))
	geminiModel.SetTopP(0.95)

	var safetySettings []*genai.SafetySetting
	var schema *genai.Schema
	var candidateCount *int32 = func() *int32 { var i int32 = 1; return &i }()

	// Set safety settings
	// safetySettings = append(safetySettings, &genai.SafetySetting{
	// 	Category: genai.HarmCategoryHarassment, Threshold: genai.HarmBlockMediumAndAbove,
	// })
	// safetySettings = append(safetySettings, &genai.SafetySetting{
	// 	Category: genai.HarmCategoryHateSpeech, Threshold: genai.HarmBlockMediumAndAbove,
	// })
	// safetySettings = append(safetySettings, &genai.SafetySetting{
	// 	Category: genai.HarmCategorySexual, Threshold: genai.HarmBlockMediumAndAbove,
	// })
	// safetySettings = append(safetySettings, &genai.SafetySetting{
	// 	Category: genai.HarmCategoryToxicity, Threshold: genai.HarmBlockLowAndAbove,
	// })
	geminiModel.SafetySettings = safetySettings

	// Convert messages to Gemini SDK format - CREATE PARTS FOR STREAMING!
	var parts []genai.Part

	// Handle special analysis requests (your genius feature!)
	if analysisType, ok := req.Meta["analysisType"]; ok {
		if projectContext, hasContext := req.Meta["projectContext"]; hasContext {
			prompt := g.getAnalysisPrompt(projectContext.(string), analysisType.(string), req.Meta)
			parts = append(parts, genai.Text(prompt))

			// Configure for analysis
			geminiModel.SetTemperature(0.3)

			// Add response schema if structured output is requested
			if req.Meta["useStructuredOutput"] == true {

				schema = &genai.Schema{
					Type:       genai.TypeObject,
					Properties: make(map[string]*genai.Schema),
					Required:   []string{"projectName", "summary", "strengths", "weaknesses", "recommendations"},
				}

				// Define properties based on analysis type
				geminiModel.CandidateCount = candidateCount
				geminiModel.ResponseMIMEType = "application/json"
				geminiModel.ResponseSchema = schema
			}
		}
	} else {
		// Normal chat - convert messages to parts
		for _, msg := range req.Messages {
			if msg.Content != "" {
				parts = append(parts, genai.Text(msg.Content))
			}
		}
	}

	// Validation: ensure we have content to send
	if len(parts) == 0 {
		return nil, fmt.Errorf("no valid content to send to Gemini")
	}

	ch := make(chan ChatChunk, 8)

	go func() {
		defer close(ch)
		startTime := time.Now()

		// Call the SDK's streaming method with PARTS not CONTENTS!
		iter := geminiModel.GenerateContentStream(ctx, parts...)

		totalTokens := 0
		var fullContent strings.Builder

		// Iterate through streaming response
		for {
			resp, err := iter.Next()
			if err != nil {
				// Check if iteration is complete - this is NORMAL end of stream
				if strings.Contains(err.Error(), "done") ||
					strings.Contains(err.Error(), "EOF") ||
					strings.Contains(err.Error(), "no more items") {
					break // Normal completion, not an error
				}
				ch <- ChatChunk{Done: true, Error: fmt.Sprintf("streaming error: %v", err)}
				return
			}

			if resp == nil {
				continue
			}

			// Extract content from response
			if len(resp.Candidates) > 0 && resp.Candidates[0].Content != nil {
				for _, part := range resp.Candidates[0].Content.Parts {
					if text, ok := part.(genai.Text); ok {
						chunk := string(text)
						ch <- ChatChunk{Content: chunk}
						fullContent.WriteString(chunk)
					}
				}
			}

			// Extract usage metadata when available
			if resp.UsageMetadata != nil {
				totalTokens = int(resp.UsageMetadata.PromptTokenCount + resp.UsageMetadata.CandidatesTokenCount)
			}
		}

		// If no usage metadata was provided, estimate tokens from the final text
		if totalTokens == 0 {
			totalTokens = g.estimateTokens(fullContent.String())
		}

		// Send final chunk with metrics
		latencyMs := time.Since(startTime).Milliseconds()
		ch <- ChatChunk{
			Done: true,
			Usage: &Usage{
				Tokens:   totalTokens,
				Ms:       latencyMs,
				CostUSD:  g.estimateCost(model, totalTokens),
				Provider: g.name,
				Model:    model,
			},
		}
	}()

	return ch, nil
}

// toGeminiContents converts generic messages to Gemini SDK format
func (g *geminiProvider) toGeminiContents(messages []Message) []genai.Part {
	contents := make([]genai.Part, 0, len(messages))

	for _, msg := range messages {
		if msg.Content == "" {
			continue
		}

		//role := "user"
		// if msg.Role == "assistant" || msg.Role == "model" {
		// 	role = "model"
		// }

		contents = append(contents, genai.Text(msg.Content))
	}
	return contents
}

// getAnalysisPrompt generates analysis prompts (your original logic, cleaned up)
func (g *geminiProvider) getAnalysisPrompt(projectContext, analysisType string, meta map[string]interface{}) string {
	locale := "en-US"
	if l, ok := meta["locale"]; ok {
		if localeStr, ok := l.(string); ok {
			locale = localeStr
		}
	}
	language := "English (US)"
	if locale == "pt-BR" {
		language = "Portuguese (Brazil)"
	}
	return fmt.Sprintf(`You are a world-class senior software architect and project management consultant with 20 years of experience.

**Task:** Analyze the following software project based on the provided context.
**Analysis Type:** %s
**Response Language:** %s

**Project Context:**
%s

**Instructions:**
- Provide detailed, actionable insights
- Focus on practical recommendations
- Structure your response clearly
- Be specific and concrete in your suggestions

Analyze thoroughly and provide valuable insights.`, analysisType, language, projectContext)
}

// getResponseSchema returns the expected JSON schema for structured responses
func (g *geminiProvider) getResponseSchema(analysisType string) map[string]interface{} {
	baseSchema := map[string]interface{}{
		"type": "object",
		"properties": map[string]interface{}{
			"projectName": map[string]string{"type": "string"},
			"summary":     map[string]string{"type": "string"},
			"strengths": map[string]interface{}{
				"type":  "array",
				"items": map[string]string{"type": "string"},
			},
			"weaknesses": map[string]interface{}{
				"type":  "array",
				"items": map[string]string{"type": "string"},
			},
			"recommendations": map[string]interface{}{
				"type":  "array",
				"items": map[string]string{"type": "string"},
			},
		},
		"required": []string{"projectName", "summary", "strengths", "weaknesses", "recommendations"},
	}
	switch analysisType {
	case "security":
		props := baseSchema["properties"].(map[string]interface{})
		props["securityRisks"] = map[string]interface{}{
			"type":  "array",
			"items": map[string]string{"type": "string"},
		}
	case "scalability":
		props := baseSchema["properties"].(map[string]interface{})
		props["bottlenecks"] = map[string]interface{}{
			"type":  "array",
			"items": map[string]string{"type": "string"},
		}
	}
	return baseSchema
}

// estimateTokens provides a rough token estimation
func (g *geminiProvider) estimateTokens(text string) int {
	// Rough estimation: ~4 characters per token
	return len(text) / 4
}

// estimateCost provides cost estimation for Gemini models
func (g *geminiProvider) estimateCost(model string, tokens int) float64 {
	var costPerToken float64
	switch {
	case strings.Contains(model, "flash"):
		costPerToken = 0.000000125 // $0.125/1M tokens for Gemini Flash
	case strings.Contains(model, "pro"):
		costPerToken = 0.000001 // $1/1M tokens for Gemini Pro
	default:
		costPerToken = 0.000000125 // Default to Flash pricing
	}
	return float64(tokens) * costPerToken
}

// Close gracefully closes the Gemini client
func (g *geminiProvider) Close() error {
	g.mu.Lock()
	defer g.mu.Unlock()
	if g.client != nil {
		return g.client.Close()
	}
	return nil
}

/// internal/gateway/registry/openai.go ///
package registry

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"strings"
	"time"
)

// openaiProvider implements the Provider interface for OpenAI-compatible APIs
type openaiProvider struct {
	name         string
	baseURL      string
	apiKey       string
	defaultModel string
	client       *http.Client
}

// NewOpenAIProvider creates a new OpenAI provider
func NewOpenAIProvider(name, baseURL, key, model string) (*openaiProvider, error) {
	if key == "" {
		return nil, errors.New("API key is required for OpenAI provider")
	}
	if baseURL == "" {
		baseURL = "https://api.openai.com"
	}

	return &openaiProvider{
		name:         name,
		baseURL:      baseURL,
		apiKey:       key,
		defaultModel: model,
		client: &http.Client{
			Timeout: 30 * time.Second,
		},
	}, nil
}

// Name returns the provider name
func (o *openaiProvider) Name() string {
	return o.name
}

// Available checks if the provider is available
func (o *openaiProvider) Available() error {
	if o.apiKey == "" {
		return errors.New("API key not configured")
	}
	return nil
}

// Chat performs a chat completion request
func (o *openaiProvider) Chat(ctx context.Context, req ChatRequest) (<-chan ChatChunk, error) {
	model := req.Model
	if model == "" {
		model = o.defaultModel
	}

	body := map[string]interface{}{
		"model":       model,
		"messages":    toOpenAIMessages(req.Messages),
		"temperature": req.Temp,
		"stream":      true,
	}

	bodyBytes, err := json.Marshal(body)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	url := o.baseURL + "/v1/chat/completions"
	httpReq, err := http.NewRequestWithContext(ctx, http.MethodPost, url, bytes.NewReader(bodyBytes))
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	httpReq.Header.Set("Authorization", "Bearer "+o.apiKey)
	httpReq.Header.Set("Content-Type", "application/json")

	ch := make(chan ChatChunk, 8)

	go func() {
		defer close(ch)
		startTime := time.Now()

		resp, err := o.client.Do(httpReq)
		if err != nil {
			ch <- ChatChunk{Done: true, Error: fmt.Sprintf("request failed: %v", err)}
			return
		}
		defer resp.Body.Close()

		if resp.StatusCode != http.StatusOK {
			body, _ := io.ReadAll(resp.Body)
			ch <- ChatChunk{Done: true, Error: fmt.Sprintf("API error %d: %s", resp.StatusCode, string(body))}
			return
		}

		scanner := bufio.NewScanner(resp.Body)
		totalTokens := 0

		for scanner.Scan() {
			line := scanner.Text()
			if !strings.HasPrefix(line, "data: ") {
				continue
			}

			data := strings.TrimPrefix(line, "data: ")
			if data == "[DONE]" {
				break
			}

			var chunk openaiStreamChunk
			if err := json.Unmarshal([]byte(data), &chunk); err != nil {
				continue // Skip malformed chunks
			}

			if len(chunk.Choices) > 0 && chunk.Choices[0].Delta.Content != "" {
				ch <- ChatChunk{Content: chunk.Choices[0].Delta.Content}
			}

			// Track token usage from usage field if present
			if chunk.Usage != nil {
				totalTokens = chunk.Usage.TotalTokens
			}
		}

		// Send final chunk with usage info
		latencyMs := time.Since(startTime).Milliseconds()
		ch <- ChatChunk{
			Done: true,
			Usage: &Usage{
				Tokens:   totalTokens,
				Ms:       latencyMs,
				CostUSD:  estimateCost(model, totalTokens), // Simple cost estimation
				Provider: o.name,
				Model:    model,
			},
		}
	}()

	return ch, nil
}

// toOpenAIMessages converts generic messages to OpenAI format
func toOpenAIMessages(messages []Message) []map[string]string {
	result := make([]map[string]string, len(messages))
	for i, msg := range messages {
		result[i] = map[string]string{
			"role":    msg.Role,
			"content": msg.Content,
		}
	}
	return result
}

// openaiStreamChunk represents a streaming response chunk from OpenAI
type openaiStreamChunk struct {
	Choices []struct {
		Delta struct {
			Content string `json:"content"`
		} `json:"delta"`
	} `json:"choices"`
	Usage *struct {
		TotalTokens int `json:"total_tokens"`
	} `json:"usage,omitempty"`
}

// estimateCost provides a rough cost estimation (simplified)
func estimateCost(model string, tokens int) float64 {
	// Simplified cost estimation - in production you'd want more accurate pricing
	costPerToken := 0.000002 // Default ~$2/1M tokens

	switch {
	case strings.Contains(model, "gpt-4"):
		costPerToken = 0.00003 // $30/1M tokens
	case strings.Contains(model, "gpt-3.5"):
		costPerToken = 0.000002 // $2/1M tokens
	}

	return float64(tokens) * costPerToken
}

/// internal/gateway/registry/registry.go ///
// Package registry provides provider registration and resolution functionality.
package registry

import (
	"context"
	"fmt"
	"os"

	"gopkg.in/yaml.v3"
)

// ProviderConfig holds configuration for a specific provider
type ProviderConfig struct {
	BaseURL      string `yaml:"base_url"`
	KeyEnv       string `yaml:"key_env"`
	DefaultModel string `yaml:"default_model"`
	Type         string `yaml:"type"` // "openai", "anthropic", "groq", "openrouter", "ollama"
}

// Config holds the complete provider configuration
type Config struct {
	Providers map[string]ProviderConfig `yaml:"providers"`
}

// Provider interface defines the contract for AI providers
type Provider interface {
	Name() string
	Chat(ctx context.Context, req ChatRequest) (<-chan ChatChunk, error)
	Available() error
}

// ChatRequest represents a chat completion request
type ChatRequest struct {
	Provider string                 `json:"provider"`
	Model    string                 `json:"model"`
	Messages []Message              `json:"messages"`
	Temp     float32                `json:"temperature"`
	Stream   bool                   `json:"stream"`
	Meta     map[string]interface{} `json:"meta"` // BYOK, system prompts, etc.
}

// Message represents a single chat message
type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// Usage represents token usage and cost information
type Usage struct {
	Tokens   int     `json:"tokens"`
	Ms       int64   `json:"latency_ms"`
	CostUSD  float64 `json:"cost_usd"`
	Provider string  `json:"provider"`
	Model    string  `json:"model"`
}

// ChatChunk represents a streaming response chunk
type ChatChunk struct {
	Content string `json:"content,omitempty"`
	Done    bool   `json:"done"`
	Usage   *Usage `json:"usage,omitempty"`
	Error   string `json:"error,omitempty"`
}

// Registry manages provider registration and resolution
type Registry struct {
	cfg       Config
	providers map[string]Provider
}

// Load creates a new registry from a YAML configuration file
func Load(path string) (*Registry, error) {
	b, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("failed to read config file %s: %w", path, err)
	}

	var cfg Config
	if err := yaml.Unmarshal(b, &cfg); err != nil {
		return nil, fmt.Errorf("failed to parse config file: %w", err)
	}

	r := &Registry{
		cfg:       cfg,
		providers: make(map[string]Provider),
	}

	// Initialize providers based on configuration
	for name, pc := range cfg.Providers {
		switch pc.Type {
		case "openai":
			key := os.Getenv(pc.KeyEnv)
			if key == "" {
				fmt.Printf("Warning: Skipping OpenAI provider '%s' - no API key found in %s\n", name, pc.KeyEnv)
				continue
			}
			p, err := NewOpenAIProvider(name, pc.BaseURL, key, pc.DefaultModel)
			if err != nil {
				return nil, fmt.Errorf("failed to create OpenAI provider %s: %w", name, err)
			}
			r.providers[name] = p
		case "gemini":
			key := os.Getenv(pc.KeyEnv)
			if key == "" {
				fmt.Printf("Warning: Skipping Gemini provider '%s' - no API key found in %s\n", name, pc.KeyEnv)
				continue
			}
			p, err := NewGeminiProvider(name, pc.BaseURL, key, pc.DefaultModel)
			if err != nil {
				return nil, fmt.Errorf("failed to create Gemini provider %s: %w", name, err)
			}
			r.providers[name] = p
			if err != nil {
				return nil, fmt.Errorf("failed to create Gemini provider %s: %w", name, err)
			}
			r.providers[name] = p
		case "anthropic":
			// TODO: Implement Anthropic provider
			return nil, fmt.Errorf("anthropic provider not yet implemented")
		case "groq":
			// TODO: Implement Groq provider
			return nil, fmt.Errorf("groq provider not yet implemented")
		case "openrouter":
			// TODO: Implement OpenRouter provider
			return nil, fmt.Errorf("openrouter provider not yet implemented")
		case "ollama":
			// TODO: Implement Ollama provider
			return nil, fmt.Errorf("ollama provider not yet implemented")
		default:
			return nil, fmt.Errorf("unknown provider type: %s", pc.Type)
		}
	}

	return r, nil
}

// Resolve returns a provider by name
func (r *Registry) Resolve(name string) Provider {
	return r.providers[name]
}

// ListProviders returns all available provider names
func (r *Registry) ListProviders() []string {
	names := make([]string, 0, len(r.providers))
	for name := range r.providers {
		names = append(names, name)
	}
	return names
}

// GetConfig returns the provider configuration
func (r *Registry) GetConfig() Config {
	return r.cfg
}

/// internal/gateway/transport/http.go ///
// Package transport provides HTTP transport layer for the gateway.package transport

package transport

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/kubex-ecosystem/gemx/analyzer/internal/gateway/registry"
)

// httpHandlers holds the HTTP route handlers
type httpHandlers struct {
	registry *registry.Registry
}

// WireHTTP sets up HTTP routes
func WireHTTP(mux *http.ServeMux, reg *registry.Registry) {
	h := &httpHandlers{registry: reg}

	mux.HandleFunc("/healthz", h.healthCheck)
	mux.HandleFunc("/v1/chat", h.chatSSE)
	mux.HandleFunc("/v1/providers", h.listProviders)
}

// healthCheck provides a simple health endpoint
func (h *httpHandlers) healthCheck(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(map[string]string{
		"status":  "healthy",
		"service": "analyzer-gw",
	})
}

// listProviders returns available providers
func (h *httpHandlers) listProviders(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	providers := h.registry.ListProviders()
	config := h.registry.GetConfig()

	response := map[string]interface{}{
		"providers": providers,
		"config":    config.Providers,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// chatSSE handles chat completion with Server-Sent Events
func (h *httpHandlers) chatSSE(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req registry.ChatRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, fmt.Sprintf("Invalid JSON: %v", err), http.StatusBadRequest)
		return
	}

	// Validate required fields
	if req.Provider == "" {
		http.Error(w, "Provider is required", http.StatusBadRequest)
		return
	}

	provider := h.registry.Resolve(req.Provider)
	if provider == nil {
		http.Error(w, fmt.Sprintf("Provider '%s' not found", req.Provider), http.StatusBadRequest)
		return
	}

	// Check if provider is available
	if err := provider.Available(); err != nil {
		http.Error(w, fmt.Sprintf("Provider unavailable: %v", err), http.StatusServiceUnavailable)
		return
	}

	// Handle BYOK (Bring Your Own Key)
	if externalKey := r.Header.Get("x-external-api-key"); externalKey != "" {
		// TODO: Implement secure BYOK handling
		// For now, we'll pass it through meta
		if req.Meta == nil {
			req.Meta = make(map[string]interface{})
		}
		req.Meta["external_api_key"] = externalKey
	}

	// Set default temperature if not provided
	if req.Temp == 0 {
		req.Temp = 0.7
	}

	// Force streaming for SSE
	req.Stream = true

	// Start chat completion
	ch, err := provider.Chat(r.Context(), req)
	if err != nil {
		http.Error(w, fmt.Sprintf("Chat request failed: %v", err), http.StatusInternalServerError)
		return
	}

	// Set SSE headers
	w.Header().Set("Content-Type", "text/event-stream")
	w.Header().Set("Cache-Control", "no-cache")
	w.Header().Set("Connection", "keep-alive")
	w.Header().Set("Access-Control-Allow-Origin", "*")

	flusher, ok := w.(http.Flusher)
	if !ok {
		http.Error(w, "Streaming unsupported", http.StatusInternalServerError)
		return
	}

	// Stream the response
	for chunk := range ch {
		if chunk.Error != "" {
			// Send error event
			data, _ := json.Marshal(map[string]interface{}{
				"error": chunk.Error,
				"done":  true,
			})
			fmt.Fprintf(w, "data: %s\n\n", data)
			flusher.Flush()
			return
		}

		if chunk.Content != "" {
			// Send content chunk
			data, _ := json.Marshal(map[string]interface{}{
				"content": chunk.Content,
				"done":    false,
			})
			fmt.Fprintf(w, "data: %s\n\n", data)
			flusher.Flush()
		}

		if chunk.Done {
			// Send final chunk with usage info
			data, _ := json.Marshal(map[string]interface{}{
				"done":  true,
				"usage": chunk.Usage,
			})
			fmt.Fprintf(w, "data: %s\n\n", data)
			flusher.Flush()

			// Log usage for monitoring
			if chunk.Usage != nil {
				log.Printf("Usage: provider=%s model=%s tokens=%d latency=%dms cost=$%.6f",
					chunk.Usage.Provider, chunk.Usage.Model, chunk.Usage.Tokens,
					chunk.Usage.Ms, chunk.Usage.CostUSD)
			}
			break
		}
	}
}

/// migrate_go_project.sh ///
#!/bin/bash

# --- CONFIGURAÇÕES ---
# Altere as variáveis abaixo conforme sua necessidade.

# O diretório principal onde a busca e substituição devem começar.
# Use "." para o diretório atual ou um caminho completo.
DIRETORIO_RAIZ="/srv/apps/LIFE/KUBEX/gemx-analyzer"

# O texto antigo a ser procurado (ex: caminho de importação do Go).
TEXTO_ANTIGO="github.com/kubex-ecosystem/gemx-analyzer"

# O novo texto que substituirá o antigo.
TEXTO_NOVO="github.com/kubex-ecosystem/gemx/analyzer"

# Lista de tipos de arquivo para verificar.
# Adicione ou remova padrões de nome de arquivo conforme necessário,
# mantendo o formato: -o -name "NOVO_PADRAO"
# Exemplos: "*.go", "*.json", "*.mod", "*.sum", "*.yml", "*.yaml", "*.md", "Dockerfile"
PADROES_DE_ARQUIVO=( -name "*.go" -o -name "*.json" -o -name "*.mod" -o -name "*.sum" -o -name "*.yml" -o -name "*.yaml" -o -name "*.md" -o -name "Dockerfile" )


# --- SCRIPT ---
# (Não precisa alterar nada daqui para baixo)

# Cores para facilitar a leitura da saída
VERDE='\033[0;32m'
AMARELO='\033[1;33m'
NC='\033[0m' # Sem Cor

echo -e "${VERDE}Iniciando a substituição de referências nos arquivos do projeto em: $(realpath "$DIRETORIO_RAIZ")${NC}"
echo "Procurando por '${AMARELO}$TEXTO_ANTIGO${NC}' para substituir por '${VERDE}$TEXTO_NOVO${NC}'."
echo -e "${AMARELO}IMPORTANTE: O diretório .git e seu conteúdo serão ignorados.${NC}"
echo "------------------------------------------------------------------"

# O comando 'find' procura por arquivos que correspondam aos padrões definidos,
# mas usa '-prune' para explicitamente pular (não entrar) em qualquer diretório chamado ".git".
# O uso de 'print0' e 'read -d' garante que nomes de arquivo com espaços sejam tratados corretamente.
find "$DIRETORIO_RAIZ" -type d -name ".git" -prune -o -type f \( "${PADROES_DE_ARQUIVO[@]}" \) -print0 | while IFS= read -r -d '' file; do

    # Verifica se o arquivo contém o texto antigo antes de tentar substituí-lo.
    # Usamos 'grep -qF' para uma busca rápida e literal da string.
    if grep -qF "$TEXTO_ANTIGO" "$file"; then
        echo -e "${AMARELO}Referência encontrada em:${NC} $file"

        # Substitui todas as ocorrências no arquivo.
        # O uso de '|' como delimitador no sed é para evitar conflitos com as '/' no texto.
        sed -i "s|${TEXTO_ANTIGO}|${TEXTO_NOVO}|g" "$file"

        echo -e "  -> ${VERDE}Arquivo atualizado com sucesso.${NC}"
    fi
done

echo "------------------------------------------------------------------"
echo -e "${VERDE}Processo concluído!${NC}"

/// test_full_system.sh ///
#!/bin/bash

echo "🧪 TESTE END-TO-END do Analyzer"
echo "================================="

# Verifica se o gateway está rodando
echo "1. Testando Gateway..."
HEALTH=$(curl -s http://localhost:8080/healthz)
if [[ $HEALTH == *"healthy"* ]]; then
    echo "   ✅ Gateway: FUNCIONANDO"
else
    echo "   ❌ Gateway: NÃO FUNCIONANDO"
    exit 1
fi

# Lista providers disponíveis
echo "2. Testando Providers..."
PROVIDERS=$(curl -s http://localhost:8080/v1/providers)
echo "   📋 Providers configurados: $PROVIDERS"

# Testa chat endpoint básico (mesmo sem API key configurada)
echo "3. Testando Chat Endpoint..."
CHAT_RESPONSE=$(curl -s -X POST http://localhost:8080/v1/chat \
  -H "Content-Type: application/json" \
  -d '{
    "provider": "gemini",
    "messages": [{"role": "user", "content": "hello"}],
    "temperature": 0.7
  }' 2>&1)

if [[ $CHAT_RESPONSE == *"Provider unavailable"* ]]; then
    echo "   ⚠️  Chat: Provider sem API key (esperado em demo)"
elif [[ $CHAT_RESPONSE == *"error"* ]]; then
    echo "   ❌ Chat: ERRO - $CHAT_RESPONSE"
else
    echo "   ✅ Chat: Endpoint funcionando"
fi

# Verifica se frontend foi buildado
echo "4. Testando Frontend Build..."
if [ -f "frontend/dist/index.html" ]; then
    SIZE=$(du -h frontend/dist/assets/*.js | tail -1 | cut -f1)
    echo "   ✅ Frontend: Buildado com sucesso (tamanho: $SIZE)"
else
    echo "   ❌ Frontend: Build não encontrado"
fi

# Resumo da arquitetura
echo ""
echo "🏗️  ARQUITETURA ATUAL:"
echo "   📁 Gateway: dist/analyzer-gw (running on :8080)"
echo "   📁 Frontend: frontend/dist/ (React SPA)"
echo "   📁 Config: config/providers.yml"
echo "   📁 Services: frontend/services/unified-ai.ts"
echo ""
echo "🎯 FUNCIONALIDADES DISPONÍVEIS:"
echo "   ✅ Gateway HTTP com endpoints REST"
echo "   ✅ Multi-provider registry (YAML config)"
echo "   ✅ Frontend React build (< 1MB gzipped)"
echo "   ✅ Unified AI service (híbrido)"
echo "   ⏳ Providers aguardando API keys"
echo ""
echo "🚀 PARA TESTAR COM API REAL:"
echo "   export GEMINI_API_KEY='sua-chave-aqui'"
echo "   export OPENAI_API_KEY='sua-chave-aqui'"
echo "   ./dist/analyzer-gw"

echo ""
echo "✨ PROJETO FUNCIONANDO! ✨"

/// test_gateway.sh ///
#!/bin/bash

# Test script for the analyzer gateway
# This script demonstrates the gateway functionality

echo "🚀 Testing Analyzer Gateway"
echo "=========================="

# Set OpenAI API key (replace with your key)
export OPENAI_API_KEY="your-openai-api-key-here"

# Start the gateway in background
echo "Starting gateway..."
./dist/analyzer-gw &
GATEWAY_PID=$!

# Wait for gateway to start
sleep 2

# Test health endpoint
echo "Testing health endpoint..."
curl -s http://localhost:8080/healthz | jq

# Test providers endpoint
echo "Testing providers endpoint..."
curl -s http://localhost:8080/v1/providers | jq

# Test chat endpoint with SSE
echo "Testing chat endpoint..."
curl -X POST http://localhost:8080/v1/chat \
  -H "Content-Type: application/json" \
  -d '{
    "provider": "openai",
    "model": "gpt-4o-mini",
    "messages": [
      {"role": "user", "content": "Hello! Say hi in one sentence."}
    ],
    "temperature": 0.7
  }' \
  --no-buffer

# Cleanup
echo "Stopping gateway..."
kill $GATEWAY_PID

echo "✅ Test completed!"
