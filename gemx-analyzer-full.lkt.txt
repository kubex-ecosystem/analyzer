# LookAtni Code - Gerado automaticamente
# Data: 2025-09-10T00:33:11.919Z
# Fonte: ./
# Total de arquivos: 68

/// App.tsx ///
import { useCallback, useEffect, useState } from 'react';
import EvolutionDisplay from './components/analysis/EvolutionDisplay';
import SuggestionsDisplay from './components/analysis/SuggestionsDisplay';
import Loader from './components/common/Loader';
import NetworkStatusIndicator from './components/common/NetworkStatusIndicator';
import NotificationContainer from './components/common/NotificationContainer';
import Dashboard from './components/dashboard/Dashboard';
import HistoryPanel from './components/history/HistoryPanel';
import ProjectInput from './components/input/ProjectInput';
import KanbanBoard from './components/kanban/KanbanBoard';
import LandingPage from './components/landing/LandingPage';
import Header from './components/layout/Header';
import NavigationBar from './components/layout/NavigationBar';
import SettingsModal from './components/settings/SettingsModal';
import ProfileModal from './components/user/ProfileModal';
import { initialProjectContext } from './constants';
import { useAuth } from './contexts/AuthContext';
import { useLanguage } from './contexts/LanguageContext';
import { useNotification } from './contexts/NotificationContext';
import { exampleAnalysis, exampleHistory } from './data/exampleAnalysis';
import { usePersistentState } from './hooks/usePersistentState';
import { useTranslation } from './hooks/useTranslation';
import { analyzeProject, compareAnalyses } from './services/gemini';
import {
  AnalysisType,
  AppSettings,
  AuthProvider,
  EvolutionAnalysis,
  HistoryItem,
  KanbanCardData,
  KanbanState,
  LanguageProvider,
  NotificationProvider,
  ProjectAnalysis,
  UsageTracking,
  UserProfile,
  ViewType,
} from './types';

const App: React.FC = () => {
  const { user } = useAuth();
  const { t } = useTranslation();
  const { locale } = useLanguage();
  const { addNotification } = useNotification();

  // App State
  const [view, setView] = useState<ViewType>('dashboard');
  const [isLoading, setIsLoading] = useState(false);
  const [projectContext, setProjectContext] = useState('');
  const [currentAnalysis, setCurrentAnalysis] = useState<ProjectAnalysis | null>(null);
  const [evolutionAnalysis, setEvolutionAnalysis] = useState<EvolutionAnalysis | null>(null);
  const [isExample, setIsExample] = useState(false);

  // Persistent State
  const [history, setHistory] = usePersistentState<HistoryItem[]>('analysisHistory', []);
  const [settings, setSettings] = usePersistentState<AppSettings>('appSettings', { tokenLimit: 200000 });
  const [userProfile, setUserProfile] = usePersistentState<UserProfile>('userProfile', { name: '', apiKey: '' });
  const [usageTracking, setUsageTracking] = usePersistentState<UsageTracking>('usageTracking', {
    month: new Date().getMonth(),
    year: new Date().getFullYear(),
    totalTokens: 0,
  });
  const [deletingHistoryId, setDeletingHistoryId] = useState<number | null>(null);

  // Modals and Panels
  const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);
  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);
  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);

  // Reset usage tracking if the month has changed
  useEffect(() => {
    const now = new Date();
    if (usageTracking.month !== now.getMonth() || usageTracking.year !== now.getFullYear()) {
      setUsageTracking({ month: now.getMonth(), year: now.getFullYear(), totalTokens: 0 });
    }
  }, [usageTracking, setUsageTracking]);

  const updateTokenUsage = useCallback((tokens: number) => {
    setUsageTracking(prev => ({ ...prev, totalTokens: prev.totalTokens + tokens }));
  }, [setUsageTracking]);

  const handleAnalyze = useCallback(async (type: AnalysisType) => {
    if (!userProfile.apiKey) {
      addNotification({ message: t('notifications.error.missingApiKey'), type: 'error' });
      setIsProfileModalOpen(true);
      return;
    }
    if (!projectContext.trim()) {
      addNotification({ message: t('notifications.error.emptyContext'), type: 'error' });
      return;
    }
    setIsLoading(true);
    setIsExample(false);
    try {
      const result = await analyzeProject(projectContext, type, locale as 'en-US' | 'pt-BR', userProfile.apiKey);
      setCurrentAnalysis(result);

      const newHistoryItem: HistoryItem = {
        id: Date.now(),
        projectName: result.projectName,
        analysisType: result.analysisType,
        timestamp: new Date().toLocaleString(locale),
        analysis: result,
        projectContext,
      };
      setHistory(prev => [newHistoryItem, ...prev]);

      if (result.usageMetadata) {
        updateTokenUsage(result.usageMetadata.totalTokenCount);
      }

      setView('results');
    } catch (error: any) {
      addNotification({ message: error.message || t('notifications.error.analysisFailed'), type: 'error' });
    } finally {
      setIsLoading(false);
    }
  }, [projectContext, locale, t, addNotification, setHistory, updateTokenUsage, userProfile.apiKey]);

  const handleCompare = useCallback(async (ids: number[]) => {
    if (!userProfile.apiKey) {
      addNotification({ message: t('notifications.error.missingApiKey'), type: 'error' });
      setIsProfileModalOpen(true);
      return;
    }
    const itemsToCompare = history.filter(item => ids.includes(item.id));
    if (itemsToCompare.length !== 2) {
      addNotification({ message: t('notifications.error.compareSelection'), type: 'error' });
      return;
    }

    setIsLoading(true);
    setIsHistoryPanelOpen(false);

    try {
      const [item1, item2] = itemsToCompare;
      const result = await compareAnalyses(item1, item2, locale as 'en-US' | 'pt-BR', userProfile.apiKey);
      setEvolutionAnalysis(result);

      if (result.usageMetadata) {
        updateTokenUsage(result.usageMetadata.totalTokenCount);
      }

      setView('evolution');
    } catch (error: any) {
      addNotification({ message: error.message || t('notifications.error.compareFailed'), type: 'error' });
    } finally {
      setIsLoading(false);
    }
  }, [history, locale, t, addNotification, updateTokenUsage, userProfile.apiKey]);

  const handleShowExample = () => {
    const example = exampleAnalysis(t);
    setCurrentAnalysis(example);
    setProjectContext(initialProjectContext);
    setIsExample(true);
    setView('results');
  };

  const handleExitExampleMode = () => {
    setIsExample(false);
    setProjectContext('');
    setCurrentAnalysis(null);
    setView('input');
  };

  const handleDeleteHistory = (id: number) => {
    setDeletingHistoryId(id);
    // Simulate a small delay for UX
    setTimeout(() => {
      setHistory(prev => prev.filter(item => item.id !== id));
      setDeletingHistoryId(null);
    }, 500);
  };

  const handleClearHistory = () => {
    if (window.confirm(t('confirmations.clearHistory'))) {
      setHistory([]);
    }
  };

  const handleLoadHistoryItem = (item: HistoryItem) => {
    setCurrentAnalysis(item.analysis);
    setProjectContext(item.projectContext);
    setIsExample(false);
    setView('results');
    setIsHistoryPanelOpen(false);
  };

  const handleSaveProfile = (newProfile: UserProfile) => {
    setUserProfile(newProfile);
    setIsProfileModalOpen(false);
    addNotification({ message: t('profile.notificationSuccess'), type: 'success' });
  };

  const handleNavigate = (targetView: ViewType | 'history') => {
    if (targetView === 'history') {
      setIsHistoryPanelOpen(true);
    } else {
      // When navigating away from example mode, reset it, but allow it on key views
      if (isExample && targetView !== 'results' && targetView !== 'kanban' && targetView !== 'dashboard') {
        handleExitExampleMode();
        // We set the view directly after exiting
        if (targetView !== 'input') {
          setView(targetView);
        }
        return;
      }
      setView(targetView);
      // Clear specific states when navigating away
      if (targetView !== 'results') setCurrentAnalysis(null);
      if (targetView !== 'evolution') setEvolutionAnalysis(null);
    }
  };

  const createKanbanState = (analysis: ProjectAnalysis): KanbanState => {
    const backlogCards: KanbanCardData[] = [
      ...analysis.improvements.map(i => ({ id: `imp-${i.title}`, title: i.title, difficulty: i.difficulty, priority: i.priority })),
      ...analysis.nextSteps.shortTerm.map(s => ({ id: `st-${s.title}`, title: s.title, difficulty: s.difficulty })),
      ...analysis.nextSteps.longTerm.map(l => ({ id: `lt-${l.title}`, title: l.title, difficulty: l.difficulty })),
    ];

    return {
      backlog: { title: t('kanban.columns.backlog'), cards: backlogCards },
      todo: { title: t('kanban.columns.todo'), cards: [] },
      inProgress: { title: t('kanban.columns.inProgress'), cards: [] },
      done: { title: t('kanban.columns.done'), cards: [] },
    };
  };

  if (!user) {
    return <LandingPage />;
  }

  return (
    <div className="bg-gray-900 text-white min-h-screen font-sans selection:bg-purple-500/30">
      {isLoading && <Loader />}

      <div className="fixed top-0 left-0 w-full h-full bg-grid-gray-700/[0.05] -z-10"></div>

      <Header
        onSettingsClick={() => setIsSettingsModalOpen(true)}
        onProfileClick={() => setIsProfileModalOpen(true)}
        userProfile={userProfile}
      />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
        <NavigationBar
          activeView={view}
          onNavigate={handleNavigate}
          isKanbanAvailable={!!currentAnalysis}
        />

        {view === 'dashboard' && <Dashboard history={isExample ? exampleHistory(t) : history} usageTracking={usageTracking} onNavigate={handleNavigate} onLoadHistoryItem={handleLoadHistoryItem} onCompare={handleCompare} />}
        {view === 'input' && <ProjectInput value={projectContext} onChange={setProjectContext} onAnalyze={handleAnalyze} onFileChange={(file: File) => file.text().then(setProjectContext)} onShowExample={handleShowExample} isLoading={isLoading} onNavigate={handleNavigate} settings={settings} usageTracking={usageTracking} isExample={isExample} onExitExample={handleExitExampleMode} />}
        {view === 'results' && currentAnalysis && <SuggestionsDisplay analysis={currentAnalysis} isExample={isExample} history={isExample ? exampleHistory(t) : history} onNavigateToKanban={() => setView('kanban')} />}
        {view === 'evolution' && evolutionAnalysis && <EvolutionDisplay analysis={evolutionAnalysis} onNavigate={handleNavigate} />}
        {view === 'kanban' && currentAnalysis && <KanbanBoard initialState={createKanbanState(currentAnalysis)} projectName={currentAnalysis.projectName} onBackToAnalysis={() => setView('results')} />}

      </main>

      <HistoryPanel
        isOpen={isHistoryPanelOpen}
        onClose={() => setIsHistoryPanelOpen(false)}
        history={isExample ? exampleHistory(t) : history}
        onLoad={handleLoadHistoryItem}
        onDelete={handleDeleteHistory}
        onClear={handleClearHistory}
        onCompare={handleCompare}
        isExampleView={isExample}
        deletingHistoryId={deletingHistoryId}
      />

      <SettingsModal
        isOpen={isSettingsModalOpen}
        onClose={() => setIsSettingsModalOpen(false)}
        settings={settings}
        usageTracking={usageTracking}
        onSave={setSettings}
        onResetUsage={() => setUsageTracking(prev => ({ ...prev, totalTokens: 0 }))}
      />

      <ProfileModal
        isOpen={isProfileModalOpen}
        onClose={() => setIsProfileModalOpen(false)}
        profile={userProfile}
        onSave={handleSaveProfile}
      />

      <NotificationContainer />
      <NetworkStatusIndicator />
    </div>
  );
};

// Main export with providers
const Root = () => (
  <LanguageProvider>
    <NotificationProvider>
      <AuthProvider>
        <App />
      </AuthProvider>
    </NotificationProvider>
  </LanguageProvider>
);

export default Root;

/// README.md ///
<div align="center">
<img width="1200" height="475" alt="GHBanner" src="https://github.com/user-attachments/assets/0aa67016-6eaf-458a-adb2-6e31a0763ed6" />
</div>

# Run and deploy your AI Studio app

This contains everything you need to run your app locally.

View your app in AI Studio: https://ai.studio/apps/drive/1n_jyIvaaBCsISww6uq4rxsiPePEJU5G5

## Run Locally

**Prerequisites:**  Node.js


1. Install dependencies:
   `npm install`
2. Set the `GEMINI_API_KEY` in [.env.local](.env.local) to your Gemini API key
3. Run the app:
   `npm run dev`

/// components/Dashboard.tsx ///


/// components/DashboardEmptyState.tsx ///


/// components/DifficultyMeter.tsx ///


/// components/EvolutionDisplay.tsx ///


/// components/Header.tsx ///


/// components/HeroBanner.tsx ///


/// components/HistoryPanel.tsx ///


/// components/KanbanBoard.tsx ///


/// components/LandingPage.tsx ///


/// components/Loader.tsx ///


/// components/NavigationBar.tsx ///


/// components/ProjectInput.tsx ///


/// components/SettingsModal.tsx ///


/// components/Sparkline.tsx ///


/// components/SuggestionsDisplay.tsx ///


/// components/TokenUsageAlert.tsx ///


/// components/TrendChart.tsx ///


/// components/ViabilityScore.tsx ///


/// components/analysis/EvolutionDisplay.tsx ///
import { motion, Variants } from 'framer-motion';
import { BrainCircuit, Calculator, Check, GitCompareArrows, Lightbulb, Repeat, TrendingDown, TrendingUp } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { AnalysisType, EvolutionAnalysis, Improvement, Priority, ViewType } from '../../types';
import DifficultyMeter from '../common/DifficultyMeter';

interface EvolutionDisplayProps {
  analysis: EvolutionAnalysis;
  onNavigate: (view: ViewType) => void;
}

const ImprovementCard: React.FC<{ improvement: Improvement; type: 'resolved' | 'new' | 'persistent' }> = ({ improvement, type }) => {
  const { t } = useTranslation();
  const typeConfig = {
    resolved: {
      icon: <Check className="w-5 h-5 text-green-400" />,
      borderColor: 'border-green-700/50',
      bgColor: 'bg-gradient-to-br from-gray-800 to-gray-900/50',
      hoverBorderColor: 'hover:border-green-500/50'
    },
    new: {
      icon: <Lightbulb className="w-5 h-5 text-yellow-400" />,
      borderColor: 'border-yellow-700/50',
      bgColor: 'bg-gradient-to-br from-gray-800 to-gray-900/50',
      hoverBorderColor: 'hover:border-yellow-500/50'
    },
    persistent: {
      icon: <Repeat className="w-5 h-5 text-red-400" />,
      borderColor: 'border-red-700/50',
      bgColor: 'bg-gradient-to-br from-gray-800 to-gray-900/50',
      hoverBorderColor: 'hover:border-red-500/50'
    },
  };

  const config = typeConfig[type];

  return (
    <div className={`p-4 rounded-lg border ${config.bgColor} ${config.borderColor} ${config.hoverBorderColor} transition-all duration-300 hover:scale-[1.02]`}>
      <div className="flex items-start gap-3">
        <div className="shrink-0 mt-1">{config.icon}</div>
        <div>
          <h4 className="font-semibold text-white">{improvement.title}</h4>
          <p className="mt-1 text-sm text-gray-400">{improvement.description}</p>
          <div className="mt-3 flex items-center gap-4 text-xs">
            <DifficultyMeter difficulty={improvement.difficulty} />
            <span className={`px-2 py-0.5 rounded-full font-mono text-xs ${improvement.priority === Priority.High ? 'bg-red-900/80 text-red-300' :
                improvement.priority === Priority.Medium ? 'bg-yellow-900/80 text-yellow-300' :
                  'bg-blue-900/80 text-blue-300'
              }`}>{t(`priority.${improvement.priority}`)}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

const EvolutionDisplay: React.FC<EvolutionDisplayProps> = ({ analysis, onNavigate }) => {
  const { keyMetrics: km } = analysis;
  const { t } = useTranslation();

  const typeLabels: Record<AnalysisType, string> = {
    [AnalysisType.General]: t('analysisTypes.GENERAL.label'),
    [AnalysisType.Security]: t('analysisTypes.SECURITY.label'),
    [AnalysisType.Scalability]: t('analysisTypes.SCALABILITY.label'),
    [AnalysisType.CodeQuality]: t('analysisTypes.CODE_QUALITY.label')
  };

  const cardVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: { delay: i * 0.1, duration: 0.5, ease: "easeOut" },
    }),
  };

  const MetricCard: React.FC<{ title: string; previous: number; current: number; custom: number }> = ({ title, previous, current, custom }) => {
    const change = current - previous;
    const isPositiveChange = title === t('evolution.metrics.improvements') ? change < 0 : change > 0;

    return (
      <motion.div variants={cardVariants} custom={custom} className="group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-4 rounded-lg flex flex-col justify-between text-center h-full transition-all duration-300 hover:border-blue-500/50 hover:scale-[1.02]">
        <h4 className="text-sm font-medium text-gray-400">{title}</h4>
        <div className="flex items-baseline justify-center gap-3 my-2">
          <span className="text-xl font-semibold text-gray-500 line-through">{previous}</span>
          <span className="text-4xl font-bold text-white transition-colors duration-300 group-hover:text-blue-300">{current}</span>
        </div>
        <div className="h-6 flex items-center justify-center">
          {change !== 0 && (
            <div className={`flex items-center justify-center gap-1 text-base font-bold ${isPositiveChange ? 'text-green-400' : 'text-red-400'}`}>
              {isPositiveChange ? <TrendingUp className="w-5 h-5" /> : <TrendingDown className="w-5 h-5" />}
              <span>{Math.abs(change)}</span>
            </div>
          )}
        </div>
      </motion.div>
    );
  };

  return (
    <div className="space-y-12">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="text-center">
          <div className="inline-flex items-center justify-center gap-3 text-purple-400">
            <GitCompareArrows className="w-8 h-8 md:w-10 md:h-10" />
            <h1 className="text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-teal-400">
              {t('evolution.title')}
            </h1>
            <BrainCircuit className="w-8 h-8 md:w-10 md:h-10" />
          </div>
          <p className="mt-3 text-lg text-gray-400">
            {t('evolution.subtitle', { projectName: analysis.projectName, analysisType: typeLabels[analysis.analysisType] })}
          </p>
        </div>
      </motion.div>

      {/* Summary and Metrics */}
      <motion.div
        className="grid grid-cols-1 lg:grid-cols-5 gap-8 bg-gray-900/30 p-6 rounded-xl border border-gray-800"
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.1 } } }}
      >
        <motion.div
          variants={cardVariants}
          className="lg:col-span-3 bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6"
        >
          <h3 className="text-xl font-semibold text-white mb-3">{t('evolution.summary')}</h3>
          <p className="text-gray-300">{analysis.evolutionSummary}</p>
        </motion.div>
        <div className="lg:col-span-2 space-y-4">
          <MetricCard title={t('evolution.metrics.viabilityScore')} previous={km.previousScore} current={km.currentScore} custom={1} />
          <div className="grid grid-cols-2 gap-4">
            <MetricCard title={t('evolution.metrics.strengths')} previous={km.previousStrengths} current={km.currentStrengths} custom={2} />
            <MetricCard title={t('evolution.metrics.improvements')} previous={km.previousImprovements} current={km.currentImprovements} custom={3} />
          </div>
        </div>
      </motion.div>

      {analysis.usageMetadata && (
        <motion.div
          className="flex items-center justify-center gap-3 text-xs text-gray-400 p-2 bg-gray-800/50 border border-gray-700 rounded-lg max-w-md mx-auto"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.4 }}
          aria-label={t('evolution.usageAriaLabel')}
        >
          <Calculator className="w-4 h-4 text-gray-500 shrink-0" />
          <div className="flex flex-wrap items-center justify-center gap-x-2 gap-y-1">
            <span className="font-semibold">{t('evolution.comparisonCost')}:</span>
            <span>{analysis.usageMetadata.totalTokenCount.toLocaleString(t('localeCode'))} {t('results.usageMetadata.tokens')}</span>
          </div>
        </motion.div>
      )}

      {/* Improvements Breakdown */}
      <motion.div
        className="space-y-8"
        initial="hidden"
        animate="visible"
        variants={{ visible: { transition: { staggerChildren: 0.15 } } }}
      >
        <h3 className="text-2xl font-bold text-center text-gray-200">{t('evolution.breakdown.title')}</h3>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Resolved */}
          <motion.div variants={cardVariants} className="space-y-4">
            <div className="flex items-center gap-3">
              <Check className="w-8 h-8 text-green-400 bg-green-900/50 p-1.5 rounded-full" />
              <h3 className="text-2xl font-semibold text-green-400">{t('evolution.breakdown.achievements')} ({analysis.resolvedImprovements.length})</h3>
            </div>
            {analysis.resolvedImprovements.length > 0 ? (
              analysis.resolvedImprovements.map((imp, i) => <ImprovementCard key={i} improvement={imp} type="resolved" />)
            ) : <p className="text-gray-500 italic p-4 text-center">{t('evolution.breakdown.noResolved')}</p>}
          </motion.div>

          {/* New */}
          <motion.div variants={cardVariants} className="space-y-4">
            <div className="flex items-center gap-3">
              <Lightbulb className="w-8 h-8 text-yellow-400 bg-yellow-900/50 p-1.5 rounded-full" />
              <h3 className="text-2xl font-semibold text-yellow-400">{t('evolution.breakdown.newChallenges')} ({analysis.newImprovements.length})</h3>
            </div>
            {analysis.newImprovements.length > 0 ? (
              analysis.newImprovements.map((imp, i) => <ImprovementCard key={i} improvement={imp} type="new" />)
            ) : <p className="text-gray-500 italic p-4 text-center">{t('evolution.breakdown.noNew')}</p>}
          </motion.div>

          {/* Persistent */}
          <motion.div variants={cardVariants} className="space-y-4">
            <div className="flex items-center gap-3">
              <Repeat className="w-8 h-8 text-red-400 bg-red-900/50 p-1.5 rounded-full" />
              <h3 className="text-2xl font-semibold text-red-400">{t('evolution.breakdown.technicalDebt')} ({analysis.persistentImprovements.length})</h3>
            </div>
            {analysis.persistentImprovements.length > 0 ? (
              analysis.persistentImprovements.map((imp, i) => <ImprovementCard key={i} improvement={imp} type="persistent" />)
            ) : <p className="text-gray-500 italic p-4 text-center">{t('evolution.breakdown.noPersistent')}</p>}
          </motion.div>
        </div>
      </motion.div>
    </div>
  );
};

export default EvolutionDisplay;

/// components/analysis/SuggestionsDisplay.tsx ///
import { AnimatePresence, motion, Variants } from 'framer-motion';
import { ArrowRight, BarChart, Briefcase, Calculator, CheckCircle, Download, FileText, Info, Lightbulb, LineChart, ListChecks, Star, Target, ThumbsDown, ThumbsUp, TrendingUp, Zap } from 'lucide-react';
import * as React from 'react';
import { useMemo, useState } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { useTranslation } from '../../hooks/useTranslation';
import { HistoryItem, Priority, ProjectAnalysis } from '../../types';
import DifficultyMeter from '../common/DifficultyMeter';
import MaturityKpiCard from '../common/MaturityKpiCard';
import Sparkline from '../common/Sparkline';
import ViabilityScore from '../common/ViabilityScore';

interface SuggestionsDisplayProps {
  analysis: ProjectAnalysis;
  isExample: boolean;
  history?: HistoryItem[];
  onNavigateToKanban: () => void;
}

const cardVariants: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: (i: number) => ({
    opacity: 1,
    y: 0,
    transition: {
      delay: i * 0.1,
      duration: 0.5,
      ease: "easeOut"
    },
  }),
};

// Markdown renderer component with custom styling for dark theme
const Markdown: React.FC<{ children: string }> = ({ children }) => (
  <div className="prose prose-invert prose-sm max-w-none text-gray-400 prose-p:my-2 prose-ul:my-2 prose-ol:my-2 prose-headings:text-white">
    <ReactMarkdown
      children={children}
      remarkPlugins={[remarkGfm]}
      components={{
        ul: ({ node, ...props }) => <ul className="list-disc list-outside space-y-1 ml-4" {...props} />,
        ol: ({ node, ...props }) => <ol className="list-decimal list-outside space-y-1 ml-4" {...props} />,
        code: (props: any) => {
          const { node, inline, className, children, ...rest } = props;
          return !inline ? (
            <pre className="bg-gray-900/50 p-3 rounded-md my-2 overflow-x-auto">
              <code className={`font-mono text-sm ${className}`} {...rest}>
                {children}
              </code>
            </pre>
          ) : (
            <code className="bg-gray-700/50 text-purple-300 font-mono text-sm px-1.5 py-0.5 rounded-md" {...rest}>
              {children}
            </code>
          );
        },
        a: ({ node, ...props }) => <a className="text-blue-400 hover:underline" target="_blank" rel="noopener noreferrer" {...props} />,
      }}
    />
  </div>
);

const getPriorityClass = (priority: Priority) => {
  switch (priority) {
    case Priority.High: return 'bg-red-900/50 border-red-700 text-red-300';
    case Priority.Medium: return 'bg-yellow-900/50 border-yellow-700 text-yellow-300';
    case Priority.Low: return 'bg-blue-900/50 border-blue-700 text-blue-300';
    default: return 'bg-gray-800 border-gray-700 text-gray-300';
  }
};

const getColorForScore = (s: number) => {
  if (s <= 3) return 'rgb(239 68 68)'; // red-500
  if (s <= 6) return 'rgb(245 158 11)'; // amber-500
  return 'rgb(34 197 94)'; // green-500
};

const InfoCard: React.FC<{ icon: React.ReactNode; title: string; children: React.ReactNode; custom: number }> = ({ icon, title, children, custom }) => (
  <motion.div
    className="bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6 backdrop-blur-sm h-full transition-all duration-300 hover:border-blue-500/50 hover:scale-[1.02]"
    variants={cardVariants}
    initial="hidden"
    animate="visible"
    custom={custom}
  >
    <div className="flex items-center gap-3 mb-4">
      {icon}
      <h3 className="text-xl font-semibold text-white">{title}</h3>
    </div>
    <div className="space-y-3 text-gray-400">{children}</div>
  </motion.div>
);

const SuggestionsDisplay: React.FC<SuggestionsDisplayProps> = ({ analysis, isExample, history, onNavigateToKanban }) => {
  const [feedback, setFeedback] = useState<'up' | 'down' | null>(null);
  const { t } = useTranslation();

  const scoreHistory = useMemo(() => {
    if (!history || isExample) return [];
    return history
      .filter(item =>
        item.projectName === analysis.projectName &&
        item.analysisType === analysis.analysisType
      )
      .sort((a, b) => a.id - b.id)
      .map(item => item.analysis.viability.score);
  }, [history, analysis, isExample]);


  const handleFeedback = (vote: 'up' | 'down') => {
    setFeedback(vote);
    try {
      const feedbackCounts = JSON.parse(localStorage.getItem('analysisFeedback') || '{"up": 0, "down": 0}');
      feedbackCounts[vote]++;
      localStorage.setItem('analysisFeedback', JSON.stringify(feedbackCounts));
    } catch (error) {
      console.error("Failed to save feedback to localStorage:", error);
    }
  };

  const handleExportJson = () => {
    if (!analysis) return;
    const jsonString = JSON.stringify(analysis, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis_${analysis.projectName.toLowerCase().replace(/\s+/g, '_')}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleExportLog = () => {
    if (!analysis) return;

    const sections: string[] = [];
    sections.push(`${t('export.logContent.mainTitle')}: ${analysis.projectName}`);
    sections.push('=================================================');
    sections.push('');

    sections.push(t('results.summary.title'));
    sections.push('-------');
    sections.push(analysis.summary);
    sections.push('');

    sections.push(t('results.viability.title'));
    sections.push('----------------------');
    sections.push(`${t('results.viability.scoreLabel')}: ${analysis.viability.score}/10`);
    sections.push(`${t('results.viability.assessmentLabel')}: ${analysis.viability.assessment}`);
    sections.push('');

    sections.push(t('results.roi.title'));
    sections.push('----------------');
    sections.push(`${t('results.roi.assessmentLabel')}: ${analysis.roiAnalysis.assessment}`);
    sections.push(`${t('results.roi.effortLabel')}: ${t(`effort.${analysis.roiAnalysis.estimatedEffort}`)}`);
    sections.push(t('results.roi.gainsLabel'));
    analysis.roiAnalysis.potentialGains.forEach(g => sections.push(`- ${g}`));
    sections.push('');

    sections.push(t('results.strengths.title'));
    sections.push('-------------');
    analysis.strengths.forEach(s => sections.push(`- ${s}`));
    sections.push('');

    sections.push(t('results.improvements.title'));
    sections.push('------------------');
    analysis.improvements.forEach(i => {
      sections.push(`${i.title} (${t('common.priority')}: ${t(`priority.${i.priority}`)}, ${t('common.difficulty')}: ${t(`difficulty.${i.difficulty}`)})`);
      sections.push(`  ${t('results.improvements.businessImpact')}: ${i.businessImpact}`);
      sections.push(`  ${t('common.description')}: ${i.description}`);
      sections.push('');
    });

    sections.push(t('results.nextSteps.title'));
    sections.push('---------------');
    sections.push(`${t('results.nextSteps.shortTerm')}:`);
    analysis.nextSteps.shortTerm.forEach(step => sections.push(`- ${step.title} (${t('common.difficulty')}: ${t(`difficulty.${step.difficulty}`)}): ${step.description}`));
    sections.push('');
    sections.push(`${t('results.nextSteps.longTerm')}:`);
    analysis.nextSteps.longTerm.forEach(step => sections.push(`- ${step.title} (${t('common.difficulty')}: ${t(`difficulty.${step.difficulty}`)}): ${step.description}`));

    const logContent = sections.join('\n');
    const blob = new Blob([logContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `analysis_${analysis.projectName.toLowerCase().replace(/\s+/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportButtonClass = "flex items-center shrink-0 gap-2 px-4 py-2 bg-gray-700/50 text-gray-300 border border-gray-600 rounded-lg font-medium hover:bg-gray-700 transition-colors duration-200";

  return (
    <AnimatePresence>
      <div className="mt-12">
        {isExample && (
          <motion.div
            className="mb-8 p-4 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-lg flex items-center gap-3"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Info className="w-5 h-5 shrink-0" />
            <p className="text-sm font-medium">{t('results.exampleModeNotice')}</p>
          </motion.div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12">
          {/* Header: Project Name, Summary, Exports */}
          <motion.div
            className="lg:col-span-2 p-6 bg-gray-900/30 rounded-xl border border-gray-800 flex flex-col"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
              {t('results.title', { projectName: analysis.projectName })}
            </h2>
            <div className="mt-2 text-gray-400 max-w-3xl"><Markdown>{analysis.summary}</Markdown></div>
            <div className="flex flex-wrap items-center gap-3 mt-auto pt-4">
              <button
                onClick={onNavigateToKanban}
                className="group relative inline-flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-teal-500 text-white rounded-lg font-semibold hover:shadow-2xl hover:shadow-purple-500/20 hover:scale-105 transition-all duration-300"
              >
                <ListChecks className="w-5 h-5 transition-transform duration-300 group-hover:rotate-6" />
                {t('actions.createKanbanBoard')}
              </button>
              <button onClick={handleExportJson} className={exportButtonClass} aria-label={t('export.jsonAriaLabel')}>
                <Download className="w-4 h-4" />
                <span>{t('export.json')}</span>
              </button>
              <button onClick={handleExportLog} className={exportButtonClass} aria-label={t('export.logAriaLabel')}>
                <FileText className="w-4 h-4" />
                <span>{t('export.log')}</span>
              </button>
              {analysis.usageMetadata && (
                <motion.div
                  className="group relative flex items-center gap-3 text-xs text-gray-400 p-2 pr-3 bg-gradient-to-r from-gray-800 to-gray-900/50 border border-gray-700 rounded-lg transition-all duration-300 hover:border-blue-500/50 hover:shadow-lg hover:shadow-blue-500/10"
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: 0.1 }}
                  aria-label={t('results.usageMetadata.ariaLabel')}
                >
                  <div className="absolute -inset-px rounded-lg bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-md" aria-hidden="true"></div>
                  <Calculator className="w-4 h-4 text-gray-500 shrink-0" />
                  <div className="flex flex-wrap items-center gap-x-3 gap-y-1 z-10">
                    <span><strong>{t('results.usageMetadata.total')}:</strong> {analysis.usageMetadata.totalTokenCount.toLocaleString('pt-BR')} {t('results.usageMetadata.tokens')}</span>
                  </div>
                </motion.div>
              )}
            </div>
          </motion.div>

          {analysis.maturity && (
            <MaturityKpiCard maturity={analysis.maturity} />
          )}
        </div>


        {/* Main Analysis Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">

          <InfoCard icon={<BarChart className="w-6 h-6 text-blue-400" />} title={t('results.viability.title')} custom={1}>
            <div className="flex flex-col items-center text-center">
              <ViabilityScore score={analysis.viability.score} />
              {scoreHistory.length > 1 && (
                <div className="mt-4 w-full">
                  <p className="text-xs text-gray-500 mb-1">{t('results.viability.scoreEvolution')}</p>
                  <div className="flex justify-center">
                    <Sparkline
                      data={scoreHistory}
                      width={120}
                      height={25}
                      stroke={getColorForScore(analysis.viability.score)}
                    />
                  </div>
                </div>
              )}
              <div className="mt-4 text-sm"><Markdown>{analysis.viability.assessment}</Markdown></div>
            </div>
          </InfoCard>

          <InfoCard icon={<LineChart className="w-6 h-6 text-teal-400" />} title={t('results.roi.title')} custom={2}>
            <div className="text-sm italic">"<Markdown>{analysis.roiAnalysis.assessment}</Markdown>"</div>
            <div className="mt-4 space-y-2">
              <div>
                <h4 className="font-semibold text-teal-300 mb-1">{t('results.roi.gainsLabel')}</h4>
                <ul className="list-inside space-y-1">
                  {analysis.roiAnalysis.potentialGains.map((gain, i) => (
                    <li key={i} className="flex items-start gap-2 text-sm">
                      <Target className="w-4 h-4 text-teal-500 mt-0.5 shrink-0" />
                      <span><Markdown>{gain}</Markdown></span>
                    </li>
                  ))}
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-teal-300">{t('results.roi.effortLabel')}</h4>
                <p className="text-sm">{t(`effort.${analysis.roiAnalysis.estimatedEffort}`)}</p>
              </div>
            </div>
          </InfoCard>

          <InfoCard icon={<CheckCircle className="w-6 h-6 text-green-400" />} title={t('results.strengths.title')} custom={3}>
            <ul className="list-inside space-y-2">
              {analysis.strengths.map((strength, i) => (
                <li key={i} className="flex items-start gap-2">
                  <Star className="w-4 h-4 text-green-500 mt-1 flex-shrink-0" />
                  <span><Markdown>{strength}</Markdown></span>
                </li>
              ))}
            </ul>
          </InfoCard>

          <div className="lg:col-span-2">
            <InfoCard icon={<Lightbulb className="w-6 h-6 text-yellow-400" />} title={t('results.improvements.title')} custom={4}>
              <div className="space-y-4">
                {analysis.improvements.map((item, i) => (
                  <div key={i} className={`p-4 rounded-lg border ${getPriorityClass(item.priority)}`}>
                    <div className="flex justify-between items-start">
                      <h4 className="font-semibold text-white">{item.title}</h4>
                      <div className="flex flex-col items-end gap-1 shrink-0 ml-2">
                        <span className="text-xs font-mono px-2 py-1 rounded-full">{t(`priority.${item.priority}`)}</span>
                      </div>
                    </div>
                    <div className="mt-1 text-sm"><Markdown>{item.description}</Markdown></div>
                    <div className="mt-3 pt-3 border-t border-white/10 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                      <DifficultyMeter difficulty={item.difficulty} />
                      <div className="flex items-center gap-1.5 text-xs text-gray-300">
                        <Briefcase className="w-3.5 h-3.5 text-teal-400" />
                        <span className="font-medium">{t('results.improvements.impact')}:</span>
                        <span><Markdown>{item.businessImpact}</Markdown></span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </InfoCard>
          </div>

          <div className="lg:col-span-1">
            <InfoCard icon={<TrendingUp className="w-6 h-6 text-purple-400" />} title={t('results.nextSteps.title')} custom={5}>
              <div>
                <h4 className="font-semibold text-purple-300 mb-2">{t('results.nextSteps.shortTerm')}</h4>
                <ul className="space-y-3">
                  {analysis.nextSteps.shortTerm.map((step, i) => (
                    <li key={i} className="flex flex-col items-start gap-1 text-sm">
                      <div className="flex items-center gap-2">
                        <Zap className="w-4 h-4 text-purple-400 flex-shrink-0" />
                        <strong>{step.title}</strong>
                      </div>
                      <div className="pl-6">
                        <div><Markdown>{step.description}</Markdown></div>
                        <div className="mt-1"><DifficultyMeter difficulty={step.difficulty} /></div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-4 pt-4 border-t border-gray-700">
                <h4 className="font-semibold text-purple-300 mb-2">{t('results.nextSteps.longTerm')}</h4>
                <ul className="space-y-3">
                  {analysis.nextSteps.longTerm.map((step, i) => (
                    <li key={i} className="flex flex-col items-start gap-1 text-sm">
                      <div className="flex items-center gap-2">
                        <ArrowRight className="w-4 h-4 text-purple-400 flex-shrink-0" />
                        <strong>{step.title}</strong>
                      </div>
                      <div className="pl-6">
                        <div><Markdown>{step.description}</Markdown></div>
                        <div className="mt-1"><DifficultyMeter difficulty={step.difficulty} /></div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </InfoCard>
          </div>
        </div>

        {/* Feedback Section */}
        <motion.div
          className="mt-12 text-center"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5, duration: 0.5 }}
        >
          <AnimatePresence mode="wait">
            {!feedback ? (
              <motion.div
                key="feedback-question"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
              >
                <h4 className="text-lg font-medium text-gray-300">{t('feedback.question')}</h4>
                <div className="mt-4 flex justify-center gap-4">
                  <button
                    onClick={() => handleFeedback('up')}
                    className="p-3 bg-gray-700/50 border border-gray-600 rounded-full text-gray-400 hover:text-green-400 hover:border-green-500 transition-colors duration-200"
                    aria-label={t('feedback.useful')}
                  >
                    <ThumbsUp className="w-6 h-6" />
                  </button>
                  <button
                    onClick={() => handleFeedback('down')}
                    className="p-3 bg-gray-700/50 border border-gray-600 rounded-full text-gray-400 hover:text-red-400 hover:border-red-500 transition-colors duration-200"
                    aria-label={t('feedback.notUseful')}
                  >
                    <ThumbsDown className="w-6 h-6" />
                  </button>
                </div>
              </motion.div>
            ) : (
              <motion.div
                key="feedback-thanks"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="flex items-center justify-center gap-2 text-green-400"
              >
                <CheckCircle className="w-6 h-6" />
                <p className="text-lg font-medium">{t('feedback.thanks')}</p>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </div>
    </AnimatePresence>
  );
};

export default SuggestionsDisplay;

/// components/chat/ChatPanel.tsx ///
import * as React from 'react';

const ChatPanel: React.FC = () => {
  return (
    <div>
      {/* Chat panel content will be implemented here */}
    </div>
  );
};

export default ChatPanel;

/// components/common/DifficultyMeter.tsx ///
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { Difficulty } from '../../types';

interface DifficultyMeterProps {
  difficulty: Difficulty;
}

const DifficultyMeter: React.FC<DifficultyMeterProps> = ({ difficulty }) => {
  const { t } = useTranslation();

  const config: Record<Difficulty, { colorClass: string; activeBars: number }> = {
    [Difficulty.Low]: { colorClass: 'bg-green-500', activeBars: 1 },
    [Difficulty.Medium]: { colorClass: 'bg-yellow-500', activeBars: 2 },
    [Difficulty.High]: { colorClass: 'bg-red-500', activeBars: 3 },
  };

  const { colorClass, activeBars } = config[difficulty];
  const label = t(`difficulty.${difficulty}`);

  return (
    <div className="flex items-center gap-2 text-xs text-gray-300">
      <span className="font-medium">{t('common.difficulty')}:</span>
      <div className="flex items-center gap-1" title={`${t('common.difficulty')}: ${label}`}>
        {[...Array(3)].map((_, i) => (
          <div
            key={i}
            className={`w-4 h-2 rounded-full transition-colors ${i < activeBars ? colorClass : 'bg-gray-600'}`}
          />
        ))}
      </div>
      <span className="w-10 text-left">{label}</span>
    </div>
  );
};

export default DifficultyMeter;

/// components/common/Loader.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from '../../hooks/useTranslation';

const Loader: React.FC = () => {
  const { t } = useTranslation();
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);

  const loadingSteps: string[] = t('loader.steps') as any || [];

  useEffect(() => {
    if (loadingSteps.length > 0) {
      const interval = setInterval(() => {
        setCurrentMessageIndex(prevIndex => (prevIndex + 1) % loadingSteps.length);
      }, 2500); // Change message every 2.5 seconds

      return () => clearInterval(interval);
    }
  }, [loadingSteps.length]);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/80 backdrop-blur-sm"
      aria-label={t('loader.ariaLabel')}
    >
      <div className="relative h-16 w-16">
        <div className="absolute h-full w-full rounded-full border-4 border-t-blue-500 border-gray-700 animate-spin"></div>
        <div className="absolute h-full w-full rounded-full border-4 border-t-purple-500 border-gray-700 animate-spin [animation-delay:-0.2s]"></div>
      </div>
      <div className="mt-4 text-center h-12">
        <AnimatePresence mode="wait">
          <motion.p
            key={currentMessageIndex}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.4, ease: 'easeInOut' }}
            className="text-lg font-medium text-gray-400"
          >
            {loadingSteps[currentMessageIndex] || t('loader.message')}
          </motion.p>
        </AnimatePresence>
      </div>
      <p className="text-sm text-gray-500">{t('loader.subMessage')}</p>
    </motion.div>
  );
};

export default Loader;

/// components/common/MaturityKpiCard.tsx ///
import { motion } from 'framer-motion';
import { Rocket } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { MaturityLevel, ProjectMaturity } from '../../types';

interface MaturityKpiCardProps {
  maturity: ProjectMaturity;
}

const maturityConfig: Record<MaturityLevel, { labelKey: string; color: string; width: string }> = {
  [MaturityLevel.Prototype]: { labelKey: 'maturityLevels.PROTOTYPE', color: 'bg-red-500', width: '25%' },
  [MaturityLevel.MVP]: { labelKey: 'maturityLevels.MVP', color: 'bg-yellow-500', width: '50%' },
  [MaturityLevel.Production]: { labelKey: 'maturityLevels.PRODUCTION', color: 'bg-green-500', width: '75%' },
  [MaturityLevel.Optimized]: { labelKey: 'maturityLevels.OPTIMIZED', color: 'bg-blue-500', width: '100%' },
};

const MaturityKpiCard: React.FC<MaturityKpiCardProps> = ({ maturity }) => {
  const { t } = useTranslation();
  const config = maturityConfig[maturity.level];

  if (!config) {
    console.warn(`Unknown maturity level: ${maturity.level}`);
    return null;
  }

  return (
    <motion.div
      className="bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6 backdrop-blur-sm h-full transition-all duration-300 hover:border-purple-500/50 hover:scale-[1.02] flex flex-col justify-between"
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ delay: 0.1, duration: 0.5 }}
    >
      <div>
        <div className="flex items-center gap-3 mb-4">
          <Rocket className="w-6 h-6 text-purple-400" />
          <h3 className="text-xl font-semibold text-white">{t('results.maturity.title')}</h3>
        </div>
        <p className="text-sm text-gray-400 italic">"{maturity.assessment}"</p>
      </div>

      <div className="mt-4">
        <div className="relative w-full bg-gray-700 rounded-full h-2.5">
          <motion.div
            className={`h-2.5 rounded-full ${config.color}`}
            initial={{ width: '0%' }}
            animate={{ width: config.width }}
            transition={{ duration: 1, ease: 'easeOut', delay: 0.5 }}
          />
        </div>
        <div className="flex justify-between text-xs text-gray-500 mt-1.5 px-1">
          <span>{t('maturityLevels.PROTOTYPE')}</span>
          <span>{t('maturityLevels.MVP')}</span>
          <span>{t('maturityLevels.PRODUCTION')}</span>
          <span>{t('maturityLevels.OPTIMIZED')}</span>
        </div>
        <div className="text-center mt-2">
          <span className={`text-lg font-bold ${config.color.replace('bg-', 'text-')}`}>
            {t(config.labelKey)}
          </span>
        </div>
      </div>
    </motion.div>
  );
};

export default MaturityKpiCard;

/// components/common/NetworkStatusIndicator.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { WifiOff } from 'lucide-react';
import * as React from 'react';
import { useNetworkStatus } from '../../hooks/useNetworkStatus';
import { useTranslation } from '../../hooks/useTranslation';

const NetworkStatusIndicator: React.FC = () => {
  const isOnline = useNetworkStatus();
  const { t } = useTranslation();

  return (
    <AnimatePresence>
      {!isOnline && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 20 }}
          className="fixed bottom-4 left-4 z-[100] p-3 bg-red-900/80 border border-red-700 text-red-300 rounded-lg flex items-center gap-3 shadow-lg backdrop-blur-md"
        >
          <WifiOff className="w-5 h-5" />
          <span className="text-sm font-medium">{t('network.offline')}</span>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default NetworkStatusIndicator;

/// components/common/NotificationContainer.tsx ///
import { AnimatePresence } from 'framer-motion';
import * as React from 'react';
import { useNotification } from '../../contexts/NotificationContext';
import NotificationToast from './NotificationToast';

const NotificationContainer: React.FC = () => {
  const { notifications, removeNotification } = useNotification();

  return (
    <div className="fixed bottom-4 right-4 z-[100] w-full max-w-sm space-y-3">
      <AnimatePresence>
        {notifications.map(notification => (
          <NotificationToast
            key={notification.id}
            notification={notification}
            onDismiss={() => removeNotification(notification.id)}
          />
        ))}
      </AnimatePresence>
    </div>
  );
};

export default NotificationContainer;

/// components/common/NotificationToast.tsx ///
import React, { useEffect } from 'react';
import { motion } from 'framer-motion';
import { CheckCircle, AlertTriangle, Info, X } from 'lucide-react';
import { Notification, NotificationType } from '../../types';

interface NotificationToastProps {
  notification: Notification;
  onDismiss: () => void;
}

const icons: Record<NotificationType, React.ElementType> = {
  success: CheckCircle,
  error: AlertTriangle,
  info: Info,
};

const theme: Record<NotificationType, { bg: string; border: string; icon: string }> = {
  success: {
    bg: 'bg-green-900/50',
    border: 'border-green-700',
    icon: 'text-green-400',
  },
  error: {
    bg: 'bg-red-900/50',
    border: 'border-red-700',
    icon: 'text-red-400',
  },
  info: {
    bg: 'bg-blue-900/50',
    border: 'border-blue-700',
    icon: 'text-blue-400',
  },
};

const NotificationToast: React.FC<NotificationToastProps> = ({ notification, onDismiss }) => {
  const { message, type, duration = 5000 } = notification;

  useEffect(() => {
    const timer = setTimeout(() => {
      onDismiss();
    }, duration);

    return () => clearTimeout(timer);
  }, [notification, duration, onDismiss]);

  const Icon = icons[type];
  const colors = theme[type];

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 50, scale: 0.5 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      exit={{ opacity: 0, y: 20, scale: 0.8 }}
      transition={{ type: 'spring', stiffness: 300, damping: 25 }}
      className={`p-4 w-full ${colors.bg} border ${colors.border} rounded-xl shadow-lg flex items-start gap-3 backdrop-blur-md`}
    >
      <div className={`shrink-0 ${colors.icon}`}>
        <Icon className="w-6 h-6" />
      </div>
      <div className="flex-grow text-sm text-gray-200">
        <p>{message}</p>
      </div>
      <button
        onClick={onDismiss}
        className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors"
        aria-label="Dismiss notification"
      >
        <X className="w-4 h-4" />
      </button>
    </motion.div>
  );
};

export default NotificationToast;

/// components/common/Sparkline.tsx ///
import * as React from 'react';

interface SparklineProps {
  data: number[];
  width?: number;
  height?: number;
  stroke?: string;
  strokeWidth?: number;
  className?: string;
}

const Sparkline: React.FC<SparklineProps> = ({
  data,
  width = 80,
  height = 20,
  stroke = "currentColor",
  strokeWidth = 1.5,
  className = "",
}) => {
  if (!data || data.length < 2) {
    return <div style={{ width, height }} className="flex items-center justify-center text-xs text-gray-600">--</div>;
  }

  const min = Math.min(...data);
  const max = Math.max(...data);
  // Handle case where all data points are the same
  const range = max - min === 0 ? 1 : max - min;

  const points = data
    .map((d, i) => {
      const x = (i / (data.length - 1)) * width;
      // If range is 1 (all points same), put line in middle
      const y = height - ((d - min) / range) * height;
      return `${x.toFixed(2)},${y.toFixed(2)}`;
    })
    .join(' ');

  return (
    <svg
      width={width}
      height={height}
      viewBox={`0 0 ${width} ${height}`}
      className={className}
      preserveAspectRatio="none"
    >
      <polyline
        points={points}
        fill="none"
        stroke={stroke}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export default Sparkline;

/// components/common/SubtleTokenUsage.tsx ///
import { motion } from 'framer-motion';
import * as React from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import { useTranslation } from '../../hooks/useTranslation';

interface SubtleTokenUsageProps {
  limit: number;
  consumed: number;
}

const SubtleTokenUsage: React.FC<SubtleTokenUsageProps> = ({ limit, consumed }) => {
  const { t } = useTranslation();
  const { locale } = useLanguage();

  if (limit <= 0) {
    return null; // Don't show if there's no limit
  }

  const percentage = Math.round((consumed / limit) * 100);

  let progressBarColor = 'bg-green-500';
  if (percentage >= 90) {
    progressBarColor = 'bg-red-500';
  } else if (percentage >= 70) {
    progressBarColor = 'bg-yellow-500';
  }

  return (
    <div className="w-full text-xs text-gray-400">
      <div className="flex justify-between mb-1">
        <span>{t('tokenUsage.monthlyUsage')}</span>
        <span>{`${consumed.toLocaleString(locale)} / ${limit.toLocaleString(locale)}`}</span>
      </div>
      <div className="w-full bg-gray-700 rounded-full h-1.5">
        <motion.div
          className={`h-1.5 rounded-full ${progressBarColor}`}
          initial={{ width: '0%' }}
          animate={{ width: `${Math.min(percentage, 100)}%` }}
          transition={{ duration: 0.5, ease: 'easeOut' }}
        />
      </div>
    </div>
  );
};

export default SubtleTokenUsage;

/// components/common/TokenUsageAlert.tsx ///
import { motion } from 'framer-motion';
import { AlertTriangle } from 'lucide-react';
import * as React from 'react';
import { useLanguage } from '../../contexts/LanguageContext';
import { useTranslation } from '../../hooks/useTranslation';

interface TokenUsageAlertProps {
  limit: number;
  consumed: number;
}

const TokenUsageAlert: React.FC<TokenUsageAlertProps> = ({ limit, consumed }) => {
  const { t } = useTranslation();
  const { locale } = useLanguage();

  if (limit <= 0) {
    return null;
  }

  const percentage = Math.round((consumed / limit) * 100);

  let progressBarColor = 'bg-green-500';
  let textColor = 'text-green-300';
  let borderColor = 'border-green-700/50';
  let bgColor = 'bg-green-900/20';

  if (percentage >= 90) {
    progressBarColor = 'bg-red-500';
    textColor = 'text-red-300';
    borderColor = 'border-red-700/50';
    bgColor = 'bg-red-900/20';
  } else if (percentage >= 70) {
    progressBarColor = 'bg-yellow-500';
    textColor = 'text-yellow-300';
    borderColor = 'border-yellow-700/50';
    bgColor = 'bg-yellow-900/20';
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: -10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`p-3 rounded-lg border ${borderColor} ${bgColor} ${textColor}`}
    >
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2 text-sm">
        <div className="flex items-center gap-2">
          <AlertTriangle className="w-4 h-4" />
          <span className="font-semibold">{t('tokenUsage.title')}</span>
        </div>
        <p>
          {t('tokenUsage.usageText', {
            consumed: consumed.toLocaleString(locale),
            limit: limit.toLocaleString(locale),
            percentage
          })}
        </p>
      </div>
      <div className="mt-2 w-full bg-gray-700 rounded-full h-1.5">
        <motion.div
          className={`h-1.5 rounded-full ${progressBarColor}`}
          initial={{ width: '0%' }}
          animate={{ width: `${Math.min(percentage, 100)}%` }}
          transition={{ duration: 0.5, ease: 'easeOut' }}
        />
      </div>
    </motion.div>
  );
};

export default TokenUsageAlert;

/// components/common/ViabilityScore.tsx ///
import { motion } from 'framer-motion';
import * as React from 'react';

interface ViabilityScoreProps {
  score: number; // score out of 10
}

const ViabilityScore: React.FC<ViabilityScoreProps> = ({ score }) => {
  const size = 120;
  const strokeWidth = 10;
  const center = size / 2;
  const radius = center - strokeWidth / 2;
  const circumference = 2 * Math.PI * radius;

  const scorePercentage = score / 10;
  const strokeDashoffset = circumference * (1 - scorePercentage);

  const getColor = (s: number) => {
    if (s <= 3) return '#ef4444'; // red-500
    if (s <= 6) return '#f59e0b'; // amber-500
    return '#22c55e'; // green-500
  };

  const color = getColor(score);

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="-rotate-90">
        {/* Background circle */}
        <circle
          cx={center}
          cy={center}
          r={radius}
          fill="transparent"
          stroke="rgba(255, 255, 255, 0.1)"
          strokeWidth={strokeWidth}
        />
        {/* Progress circle */}
        <motion.circle
          cx={center}
          cy={center}
          r={radius}
          fill="transparent"
          stroke={color}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeLinecap="round"
          initial={{ strokeDashoffset: circumference }}
          animate={{ strokeDashoffset }}
          transition={{ duration: 1.5, ease: "easeOut" }}
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <motion.span
          className="text-4xl font-bold text-white"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5, duration: 1 }}
        >
          {score}
        </motion.span>
        <span className="text-sm text-gray-400">/10</span>
      </div>
    </div>
  );
};

export default ViabilityScore;

/// components/dashboard/Dashboard.tsx ///
import React, { useMemo } from 'react';
import { motion, Variants } from 'framer-motion';
import { HistoryItem, UsageTracking, ViewType, AnalysisType } from '../../types';
import DashboardEmptyState from './DashboardEmptyState';
import { BarChart3, FileText, ListChecks, Sparkles, Star, Zap } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';
import TrendChart from './TrendChart';

interface DashboardProps {
  history: HistoryItem[];
  usageTracking: UsageTracking;
  onNavigate: (view: ViewType | 'history') => void;
  onLoadHistoryItem: (item: HistoryItem) => void;
  onCompare: (ids: number[]) => void;
}

const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: { staggerChildren: 0.1 }
    }
};

const itemVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0, transition: { type: 'spring', stiffness: 100 } }
};

const KPICard: React.FC<{ icon: React.ReactNode; title: string; value: string | number; description: string }> = ({ icon, title, value, description }) => (
    <div className="group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-4 rounded-lg flex items-center gap-4 transition-all duration-300 hover:border-blue-500/50 hover:scale-[1.02]">
        <div className="bg-gray-900/50 p-3 rounded-full">{icon}</div>
        <div>
            <p className="text-xs text-gray-400">{title}</p>
            <p className="text-xl font-bold text-white">{value}</p>
            <p className="text-xs text-gray-500">{description}</p>
        </div>
    </div>
);

const Dashboard: React.FC<DashboardProps> = ({ history, usageTracking, onNavigate, onLoadHistoryItem }) => {
  const { t } = useTranslation();

  const stats = useMemo(() => {
    if (history.length === 0) {
      return {
        totalAnalyses: 0,
        averageScore: 0,
        commonType: 'N/A',
        scoreTrend: []
      };
    }
    const totalScore = history.reduce((sum, item) => sum + item.analysis.viability.score, 0);
    const typeCounts = history.reduce((acc, item) => {
      acc[item.analysisType] = (acc[item.analysisType] || 0) + 1;
      return acc;
    }, {} as Record<AnalysisType, number>);

    // FIX: Explicitly cast sort values to Number to prevent TypeScript arithmetic errors.
    const commonType = Object.entries(typeCounts).sort((a, b) => Number(b[1]) - Number(a[1]))[0]?.[0] || 'N/A';
    
    const scoreTrend = [...history].reverse().map(item => item.analysis.viability.score);

    return {
      totalAnalyses: history.length,
      averageScore: parseFloat((totalScore / history.length).toFixed(1)),
      commonType,
      scoreTrend,
    };
  }, [history]);

  const projects = useMemo(() => {
    const projectMap = new Map<string, HistoryItem[]>();
    history.forEach(item => {
      if (!projectMap.has(item.projectName)) {
        projectMap.set(item.projectName, []);
      }
      projectMap.get(item.projectName)!.push(item);
    });
    return Array.from(projectMap.entries()).map(([name, items]) => ({
      name,
      items: items.sort((a, b) => b.id - a.id),
    }));
  }, [history]);

  if (history.length === 0) {
    return <DashboardEmptyState onNavigate={onNavigate} />;
  }

  const typeLabels: Record<string, string> = {
    [AnalysisType.General]: t('analysisTypes.GENERAL.label'),
    [AnalysisType.Security]: t('analysisTypes.SECURITY.label'),
    [AnalysisType.Scalability]: t('analysisTypes.SCALABILITY.label'),
    [AnalysisType.CodeQuality]: t('analysisTypes.CODE_QUALITY.label'),
    'N/A': 'N/A'
  };

  return (
    <motion.div
      className="space-y-12"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
    >
      {/* KPIs and Chart */}
      <motion.div
        className="grid grid-cols-1 lg:grid-cols-5 gap-8 bg-gray-900/30 p-6 rounded-xl border border-gray-800"
        variants={itemVariants}
      >
        <div className="lg:col-span-3 bg-gray-800/50 border border-gray-700 p-6 rounded-xl flex flex-col">
          <h3 className="text-lg font-semibold text-white mb-2">{t('dashboard.scoreEvolution')}</h3>
          <div className="flex-grow h-48">
            <TrendChart data={stats.scoreTrend} />
          </div>
        </div>
        <div className="lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-4">
            <KPICard icon={<FileText className="w-6 h-6 text-purple-400"/>} title={t('dashboard.kpi.totalAnalyses')} value={stats.totalAnalyses} description={t('dashboard.kpi.totalAnalyses_description')} />
            <KPICard icon={<Star className="w-6 h-6 text-yellow-400"/>} title={t('dashboard.kpi.averageScore')} value={stats.averageScore} description={t('dashboard.kpi.averageScore_description')} />
            <KPICard icon={<ListChecks className="w-6 h-6 text-teal-400"/>} title={t('dashboard.kpi.commonType')} value={typeLabels[stats.commonType]} description={t('dashboard.kpi.commonType_description')} />
            <KPICard icon={<Zap className="w-6 h-6 text-blue-400"/>} title={t('dashboard.kpi.tokensThisMonth')} value={usageTracking.totalTokens.toLocaleString(t('localeCode'))} description={t('dashboard.kpi.tokensThisMonth_description')} />
        </div>
      </motion.div>

      {/* Project List */}
      <motion.div className="space-y-8" variants={itemVariants}>
        <div className="text-center">
            <h2 className="text-3xl font-bold text-white">{t('dashboard.projects.title')}</h2>
            <p className="text-gray-400 mt-1">{t('dashboard.projects.subtitle')}</p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {projects.map(project => (
                <motion.div key={project.name} variants={itemVariants} className="bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 rounded-xl p-6 transition-all duration-300 hover:border-purple-500/50">
                    <h3 className="text-xl font-semibold text-white truncate" title={project.name}>{project.name}</h3>
                    <p className="text-sm text-gray-500">{t('dashboard.projects.analysisCount', { count: project.items.length })}</p>
                    <ul className="mt-4 space-y-3">
                        {project.items.slice(0, 3).map(item => (
                            <li key={item.id} className="flex items-center justify-between gap-4 p-2 rounded-md hover:bg-gray-700/50">
                                <div className="text-sm">
                                    <p className="font-medium text-gray-300">{typeLabels[item.analysisType]}</p>
                                    <p className="text-xs text-gray-500">{item.timestamp}</p>
                                </div>
                                <div className="flex items-center gap-2">
                                    <span className="font-bold text-white text-lg">{item.analysis.viability.score}</span>
                                    <button onClick={() => onLoadHistoryItem(item)} className="px-3 py-1 text-xs font-semibold text-blue-300 bg-blue-900/50 border border-blue-700 rounded-md hover:bg-blue-800/50 transition-colors">
                                        {t('actions.view')}
                                    </button>
                                </div>
                            </li>
                        ))}
                    </ul>
                </motion.div>
            ))}
        </div>
      </motion.div>
    </motion.div>
  );
};

export default Dashboard;

/// components/dashboard/DashboardEmptyState.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, Variants } from 'framer-motion';
import { ViewType } from '../../types';
import { FileText, ListChecks, Sparkles, Star, TrendingUp, Zap, BarChart3 } from 'lucide-react';
import { useTranslation } from '../../hooks/useTranslation';

interface DashboardEmptyStateProps {
  onNavigate: (view: ViewType | 'history') => void;
}

const HeroBanner: React.FC<{ onNavigate: (view: ViewType | 'history') => void }> = ({ onNavigate }) => {
    const { t } = useTranslation();
    const [dynamicTitle, setDynamicTitle] = useState('');

    useEffect(() => {
        const titles = t('landing.dynamicPhrases') as unknown as string[];
        if (Array.isArray(titles) && titles.length > 0) {
            const randomIndex = Math.floor(Math.random() * titles.length);
            setDynamicTitle(titles[randomIndex]);
        }
    }, [t]);
    
    return (
        <div className="text-center p-8 bg-gray-900/30 rounded-xl border border-gray-800">
            <div className="inline-flex items-center justify-center gap-3 group h-16 md:h-20">
                <BarChart3 className="w-10 h-10 md:w-12 md:h-12 text-blue-400 transition-transform duration-300 group-hover:rotate-12" />
                <h1 className="text-4xl md:text-5xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
                  {dynamicTitle}
                </h1>
                <Sparkles className="w-10 h-10 md:w-12 md:h-12 text-purple-400 transition-transform duration-300 group-hover:-rotate-12" />
            </div>
            <p className="text-gray-400 mt-4 max-w-3xl mx-auto text-lg md:text-xl">
                {t('header.subtitle')}
            </p>
            <div className="mt-8">
                <button
                    onClick={() => onNavigate('input')}
                    className="group relative inline-flex items-center justify-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold text-lg hover:shadow-2xl hover:shadow-blue-500/30 hover:scale-105 transition-all duration-300"
                >
                    <span>{t('dashboard.emptyState.cta')}</span>
                </button>
            </div>
        </div>
    );
};

const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
        opacity: 1,
        transition: { staggerChildren: 0.15 }
    }
};

const itemVariants: Variants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
        opacity: 1,
        y: 0,
        transition: { type: 'spring', stiffness: 100 }
    }
};

const InfoCard: React.FC<{ icon: React.ReactNode; title: string; description: string }> = ({ icon, title, description }) => (
    <div className="group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-4 rounded-lg flex items-center gap-4 transition-all duration-300">
        <div className="bg-gray-900/50 p-3 rounded-full">{icon}</div>
        <div>
            <p className="font-semibold text-white">{title}</p>
            <p className="text-sm text-gray-400">{description}</p>
        </div>
    </div>
);


const DashboardEmptyState: React.FC<DashboardEmptyStateProps> = ({ onNavigate }) => {
    const { t } = useTranslation();
  
    return (
        <motion.div
            className="space-y-12"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
        >
            <motion.div variants={itemVariants}>
                <HeroBanner onNavigate={onNavigate} />
            </motion.div>

            <motion.div
                className="grid grid-cols-1 lg:grid-cols-5 gap-8 bg-gray-900/30 p-6 rounded-xl border border-gray-800"
                variants={itemVariants}
            >
                <div className="lg:col-span-3 bg-gray-800/50 border border-gray-700 p-8 rounded-xl flex flex-col items-center justify-center text-center">
                    <Sparkles className="w-12 h-12 text-purple-400 mb-4" />
                    <h3 className="text-2xl font-bold text-white">{t('dashboard.emptyState.title')}</h3>
                    <p className="text-gray-400 mt-2 max-w-md">
                        {t('dashboard.emptyState.subtitle')}
                    </p>
                </div>
                
                <div className="lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-1 gap-4">
                    <InfoCard 
                        icon={<FileText className="w-6 h-6 text-purple-400"/>} 
                        title={t('dashboard.kpi.totalAnalyses')} 
                        description={t('dashboard.emptyState.kpi_total_description')} 
                    />
                    <InfoCard 
                        icon={<Star className="w-6 h-6 text-yellow-400"/>} 
                        title={t('dashboard.kpi.averageScore')} 
                        description={t('dashboard.emptyState.kpi_score_description')} 
                    />
                    <InfoCard 
                        icon={<ListChecks className="w-6 h-6 text-teal-400"/>} 
                        title={t('dashboard.kpi.commonType')} 
                        description={t('dashboard.emptyState.kpi_type_description')} 
                    />
                    <InfoCard 
                        icon={<Zap className="w-6 h-6 text-blue-400"/>} 
                        title={t('dashboard.kpi.tokensThisMonth')} 
                        description={t('dashboard.emptyState.kpi_tokens_description')} 
                    />
                </div>
            </motion.div>
        </motion.div>
    );
};

export default DashboardEmptyState;

/// components/dashboard/HeroBanner.tsx ///


/// components/dashboard/TrendChart.tsx ///
import * as React from 'react';
import Sparkline from '../common/Sparkline';

interface TrendChartProps {
  data: number[];
  className?: string;
}

const TrendChart: React.FC<TrendChartProps> = ({ data, className = '' }) => {
  if (data.length < 2) {
    return (
      <div className="h-full w-full flex items-center justify-center bg-gray-900/30 rounded-lg">
        <p className="text-gray-500 text-sm">Dados insuficientes para exibir tendência</p>
      </div>
    );
  }

  return (
    <div className={`relative h-full w-full flex items-center ${className}`}>
      <div className="h-full flex flex-col justify-between text-xs text-gray-500 py-1 pr-2">
        <span>10</span>
        <span>5</span>
        <span>0</span>
      </div>
      <div className="relative h-full flex-grow">
        <div className="absolute top-0 left-0 w-full h-full border-b border-l border-gray-700/50">
          <div className="absolute top-1/2 left-0 w-full border-t border-dashed border-gray-700/50"></div>
        </div>
        <Sparkline
          data={data}
          width={400} // width/height will be controlled by parent's flex/size
          height={100}
          className="w-full h-full"
          stroke="rgb(96 165 250)"
          strokeWidth={2}
        />
      </div>
    </div>
  );
};

export default TrendChart;

/// components/history/HistoryPanel.tsx ///
import React, { useState, useMemo, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { History, X, Trash2, FileUp, Info, GitCompareArrows, BarChart3, Zap, Loader2 } from 'lucide-react';
import { HistoryItem, AnalysisType } from '../../types';
import Sparkline from '../common/Sparkline';
import { useTranslation } from '../../hooks/useTranslation';

interface HistoryPanelProps {
  isOpen: boolean;
  onClose: () => void;
  history: HistoryItem[];
  onLoad: (item: HistoryItem) => void;
  onDelete: (id: number) => void;
  onClear: () => void;
  onCompare: (ids: number[]) => void;
  isExampleView: boolean;
  deletingHistoryId: number | null;
}

const ITEMS_PER_PAGE = 10;

const HistoryPanel: React.FC<HistoryPanelProps> = ({ isOpen, onClose, history, onLoad, onDelete, onClear, onCompare, isExampleView, deletingHistoryId }) => {
  const [selectedIds, setSelectedIds] = useState<number[]>([]);
  const [visibleCount, setVisibleCount] = useState(ITEMS_PER_PAGE);
  const { t } = useTranslation();

  const typeLabels: Record<AnalysisType, string> = {
    [AnalysisType.General]: t('analysisTypes.GENERAL.label'),
    [AnalysisType.Security]: t('analysisTypes.SECURITY.label'),
    [AnalysisType.Scalability]: t('analysisTypes.SCALABILITY.label'),
    [AnalysisType.CodeQuality]: t('analysisTypes.CODE_QUALITY.label')
  };

  useEffect(() => {
    if (!isOpen) {
      setSelectedIds([]);
      setVisibleCount(ITEMS_PER_PAGE);
    }
  }, [isOpen]);

  const handleSelect = (id: number) => {
    setSelectedIds(prev => {
      if (prev.includes(id)) {
        return prev.filter(i => i !== id);
      }
      if (prev.length < 2) {
        return [...prev, id];
      }
      return prev; // No more than 2 selections
    });
  };
  
  const historyWithSparklines = useMemo(() => {
    const projectGroups = new Map<string, HistoryItem[]>();

    // Group history by project and analysis type
    history.forEach(item => {
      const key = `${item.projectName}::${item.analysisType}`;
      if (!projectGroups.has(key)) {
        projectGroups.set(key, []);
      }
      projectGroups.get(key)!.push(item);
    });

    // Create data for each item, sorted chronologically
    return history.map(item => {
      const key = `${item.projectName}::${item.analysisType}`;
      const group = projectGroups.get(key)!.sort((a, b) => a.id - b.id);
      
      const scoreData = group.map(h => h.analysis.viability.score);
      const tokenData = group.map(h => h.analysis.usageMetadata?.totalTokenCount || 0);

      return {
        ...item,
        sparkline: {
          scoreData,
          tokenData,
        }
      };
    }).sort((a, b) => b.id - a.id); // sort final list to show newest first
  }, [history]);

  const historyToShow = historyWithSparklines.slice(0, visibleCount);

  const handleShowMore = () => {
    setVisibleCount(prev => prev + ITEMS_PER_PAGE);
  };

  const comparableItems = useMemo(() => {
    if (selectedIds.length !== 2) return null;
    const items = history.filter(item => selectedIds.includes(item.id));
    if (items.length === 2 && items[0].analysisType === items[1].analysisType) {
      return items;
    }
    return null;
  }, [selectedIds, history]);

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.95, y: -20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.95, y: -20, opacity: 0 }}
            transition={{ duration: 0.2, ease: 'easeOut' }}
            onClick={(e) => e.stopPropagation()}
            className="bg-gray-800/80 border border-gray-700 rounded-xl w-full max-w-4xl max-h-[80vh] flex flex-col shadow-2xl"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700 shrink-0">
              <div className="flex items-center gap-3">
                <History className="w-6 h-6 text-blue-400" />
                <h2 className="text-xl font-bold text-white">{t('history.title')}</h2>
              </div>
              {isExampleView && (
                <div className="text-xs font-medium px-2 py-1 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-md">
                  {t('history.exampleMode')}
                </div>
              )}
              <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors">
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto grow">
              {historyWithSparklines.length > 0 ? (
                <>
                <div className="text-center mb-4 p-2 bg-gray-900/50 border border-gray-700 rounded-md text-sm text-gray-400">
                    <p>{t('history.compareInstruction')}</p>
                </div>
                <ul className="space-y-3">
                  {historyToShow.map((item) => {
                    const isSelected = selectedIds.includes(item.id);
                    const isDeleting = deletingHistoryId === item.id;
                    const isSelectionDisabled = selectedIds.length >= 2 && !isSelected;
                    const isDisabled = isDeleting || isSelectionDisabled;

                    return(
                    <motion.li
                      key={item.id}
                      layout
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, x: -10 }}
                      transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                      className={`p-3 rounded-lg border flex items-start gap-3 transition-all duration-200 ${isSelected ? 'bg-blue-900/50 border-blue-600' : 'bg-gray-900/50 border-gray-700'} ${isDisabled ? 'opacity-50' : ''}`}
                    >
                      <input
                          type="checkbox"
                          checked={isSelected}
                          disabled={isDisabled}
                          onChange={() => handleSelect(item.id)}
                          className={`mt-1 shrink-0 w-4 h-4 rounded bg-gray-700 border-gray-600 text-blue-500 focus:ring-blue-600 focus:ring-2 ${isDisabled ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                        />
                      <div className="flex-grow flex flex-col justify-between gap-2" onClick={() => !isDisabled && handleSelect(item.id)}>
                        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
                            <div className="flex-grow">
                                <p className="font-semibold text-white truncate" title={item.projectName}>{item.projectName}</p>
                                <div className="flex flex-wrap items-center gap-x-4 gap-y-1 text-xs text-gray-400 mt-1">
                                <span>
                                    <strong className="text-gray-300">{t('history.typeLabel')}:</strong> {typeLabels[item.analysisType] || item.analysisType}
                                </span>
                                <span>
                                    <strong className="text-gray-300">{t('history.dateLabel')}:</strong> {item.timestamp}
                                </span>
                                </div>
                            </div>
                            <div className="flex items-center gap-2 shrink-0 self-end sm:self-center">
                                <button 
                                disabled={isDeleting}
                                onClick={(e) => { e.stopPropagation(); onLoad(item); }}
                                className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-blue-300 bg-blue-900/50 border border-blue-700 rounded-md hover:bg-blue-800/50 transition-colors disabled:opacity-60 disabled:cursor-not-allowed"
                                >
                                <FileUp className="w-3.5 h-3.5" /> {t('actions.load')}
                                </button>
                                <button
                                disabled={isDeleting}
                                onClick={(e) => { e.stopPropagation(); onDelete(item.id); }}
                                className="p-2 w-8 h-8 flex items-center justify-center text-red-400 bg-red-900/30 border border-red-800/50 rounded-md hover:bg-red-900/50 transition-colors disabled:opacity-60 disabled:cursor-not-allowed"
                                aria-label={t('history.deleteAriaLabel')}
                                >
                                  {isDeleting ? (
                                    <Loader2 className="w-3.5 h-3.5 animate-spin" />
                                  ) : (
                                    <Trash2 className="w-3.5 h-3.5" />
                                  )}
                                </button>
                            </div>
                        </div>
                        <div className="mt-2 pt-2 border-t border-gray-700/50 flex flex-col sm:flex-row items-center justify-between gap-4">
                            <div className="flex items-center gap-2 text-xs text-gray-400" title={t('history.scoreTrendTitle')}>
                                <BarChart3 className="w-4 h-4 text-blue-400 shrink-0" />
                                <Sparkline data={item.sparkline.scoreData} stroke="rgb(96 165 250)" />
                                <span className="font-semibold text-white w-4 text-right">{item.analysis.viability.score}</span>
                            </div>
                            <div className="flex items-center gap-2 text-xs text-gray-400" title={t('history.tokenUsageTitle')}>
                                <Zap className="w-4 h-4 text-purple-400 shrink-0" />
                                <Sparkline data={item.sparkline.tokenData} stroke="rgb(192 132 252)" />
                                <span className="font-semibold text-white w-12 text-right">
                                    {item.analysis.usageMetadata?.totalTokenCount.toLocaleString(t('localeCode')) || 'N/A'}
                                </span>
                            </div>
                        </div>
                      </div>
                    </motion.li>
                  )})}
                </ul>
                {historyWithSparklines.length > visibleCount && (
                  <div className="mt-4 text-center">
                    <button
                      onClick={handleShowMore}
                      className="px-4 py-2 text-sm font-semibold text-blue-300 bg-blue-900/50 border border-blue-700 rounded-md hover:bg-blue-800/50 transition-colors"
                    >
                      {t('actions.showMore')}
                    </button>
                  </div>
                )}
                </>
              ) : (
                <div className="text-center py-10">
                    <Info className="w-10 h-10 mx-auto text-gray-600" />
                    <p className="mt-4 font-medium text-gray-400">{t('history.empty.title')}</p>
                    <p className="text-sm text-gray-500">{t('history.empty.subtitle')}</p>
                </div>
              )}
            </div>

             {/* Footer */}
            <div className="p-4 border-t border-gray-700 shrink-0 flex justify-between items-center">
                <button
                    onClick={onClear}
                    disabled={history.length === 0}
                    className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-red-400 bg-red-900/50 border border-red-700 rounded-md hover:bg-red-800/50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <Trash2 className="w-3.5 h-3.5" /> {t('history.clear')}
                </button>
                <button
                    onClick={() => onCompare(selectedIds)}
                    disabled={!comparableItems}
                    className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-purple-600 rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    <GitCompareArrows className="w-4 h-4" /> {t('history.compare')}
                </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default HistoryPanel;

/// components/input/ProjectInput.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { CheckCircle, CodeXml, FileText, FileUp, Info, Layers3, ShieldCheck, Sparkles, X } from 'lucide-react';
import React, { useRef, useState } from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { AnalysisOption, AnalysisType, AppSettings, UsageTracking, ViewType } from '../../types';
import SubtleTokenUsage from '../common/SubtleTokenUsage';
import TokenUsageAlert from '../common/TokenUsageAlert';

interface ProjectInputProps {
  value: string;
  onChange: (value: string) => void;
  onAnalyze: (type: AnalysisType) => void;
  onFileChange: (file: File) => void;
  onShowExample: () => void;
  isLoading: boolean;
  onNavigate: (view: ViewType | 'history') => void;
  settings: AppSettings;
  usageTracking: UsageTracking;
  isExample: boolean;
  onExitExample: () => void;
}

const ProjectInput: React.FC<ProjectInputProps> = ({
  value,
  onChange,
  onAnalyze,
  onFileChange,
  onShowExample,
  isLoading,
  settings,
  usageTracking,
  isExample,
  onExitExample,
}) => {
  const { t } = useTranslation();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [selectedType, setSelectedType] = useState<AnalysisType>(AnalysisType.General);

  const analysisOptions: AnalysisOption[] = [
    { type: AnalysisType.General, label: t('analysisTypes.GENERAL.label'), description: t('analysisTypes.GENERAL.description'), icon: FileText, color: 'text-blue-400' },
    { type: AnalysisType.Security, label: t('analysisTypes.SECURITY.label'), description: t('analysisTypes.SECURITY.description'), icon: ShieldCheck, color: 'text-red-400' },
    { type: AnalysisType.Scalability, label: t('analysisTypes.SCALABILITY.label'), description: t('analysisTypes.SCALABILITY.description'), icon: Layers3, color: 'text-purple-400' },
    { type: AnalysisType.CodeQuality, label: t('analysisTypes.CODE_QUALITY.label'), description: t('analysisTypes.CODE_QUALITY.description'), icon: CodeXml, color: 'text-teal-400' },
  ];

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      onFileChange(e.target.files[0]);
    }
  };

  const handleAnalyzeClick = () => {
    onAnalyze(selectedType);
  };

  const usageRatio = settings.tokenLimit > 0 ? usageTracking.totalTokens / settings.tokenLimit : 0;
  const showTokenAlert = usageRatio >= 0.7;
  const showSubtleUsage = settings.tokenLimit > 0 && !showTokenAlert;

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-8"
    >
      <div className="text-center">
        <h2 className="text-3xl font-bold text-white">{t('input.title')}</h2>
        <p className="text-gray-400 mt-2 max-w-2xl mx-auto">{t('input.subtitle')}</p>
        <p className="text-gray-500 text-sm mt-1">For example: paste your README.md, architecture diagrams description, release notes, or even pieces of code...</p>
      </div>

      {isExample && (
        <div className="p-4 bg-purple-900/50 border border-purple-700 text-purple-300 rounded-lg flex items-center justify-between gap-3">
          <div className="flex items-center gap-3">
            <Info className="w-5 h-5 shrink-0" />
            <p className="text-sm font-medium">{t('input.exampleMode.notice')}</p>
          </div>
          <button
            onClick={onExitExample}
            className="flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-purple-200 bg-purple-800/50 border border-purple-600 rounded-md hover:bg-purple-700/50 transition-colors"
          >
            <X className="w-3.5 h-3.5" />
            {t('actions.exitExample')}
          </button>
        </div>
      )}

      <AnimatePresence>
        {showTokenAlert && (
          <motion.div initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: -10 }}>
            <TokenUsageAlert limit={settings.tokenLimit} consumed={usageTracking.totalTokens} />
          </motion.div>
        )}
      </AnimatePresence>

      <div className="p-4 bg-gray-800/30 rounded-xl border border-gray-700 space-y-3">
        <textarea
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder={t('input.placeholder')}
          className="w-full h-64 p-4 bg-gray-900/50 border border-gray-700 rounded-lg resize-y focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
          disabled={isLoading}
        />
        <div className="flex justify-between items-center pt-2 gap-4">
          <div className="flex-grow">
            {showSubtleUsage && <SubtleTokenUsage limit={settings.tokenLimit} consumed={usageTracking.totalTokens} />}
          </div>
          <div className="flex-shrink-0">
            <input
              title='Upload a file'
              type="file" ref={fileInputRef} onChange={handleFileSelect} className="hidden" accept=".txt,.md,.js,.ts,.jsx,.tsx,.json,.py,.java,.go,.rs" />
            <button
              onClick={() => fileInputRef.current?.click()}
              disabled={isLoading}
              className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-gray-300 bg-gray-700/80 border border-gray-600 rounded-md hover:bg-gray-700 transition-colors disabled:opacity-50"
            >
              <FileUp className="w-4 h-4" />
              {t('actions.uploadFile')}
            </button>
          </div>
        </div>
      </div>

      <div className="space-y-4">
        <h3 className="text-lg font-bold text-white text-center">{t('input.analysisType.title')}</h3>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 max-w-4xl mx-auto">
          {analysisOptions.map(opt => (
            <button
              key={opt.type}
              onClick={() => setSelectedType(opt.type)}
              disabled={isLoading}
              className={`relative p-4 rounded-lg border text-left transition-all duration-200 h-full ${selectedType === opt.type
                  ? 'bg-blue-900/20 border-blue-500'
                  : 'bg-gray-800/50 border-gray-700 hover:border-gray-600'
                }`}
            >
              {selectedType === opt.type && (
                <div className="absolute top-3 right-3 text-blue-400">
                  <CheckCircle className="w-5 h-5" />
                </div>
              )}
              <div className="flex items-start gap-4">
                <div className="p-2 bg-gray-900/50 rounded-md mt-1">
                  <opt.icon className={`w-6 h-6 shrink-0 ${opt.color}`} />
                </div>
                <div>
                  <p className="font-semibold text-white">{opt.label}</p>
                  <p className="text-xs text-gray-400 mt-1">{opt.description}</p>
                </div>
              </div>
            </button>
          ))}
        </div>
      </div>

      <div className="flex items-center justify-center gap-4 pt-4">
        <button
          onClick={onShowExample}
          disabled={isLoading}
          className="px-8 py-3 font-semibold text-purple-300 bg-transparent border border-purple-800 rounded-lg hover:bg-purple-900/30 transition-colors disabled:opacity-50"
        >
          {t('actions.showExample')}
        </button>
        <button
          onClick={handleAnalyzeClick}
          disabled={isLoading || !value.trim()}
          className="group relative inline-flex items-center justify-center gap-3 px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold text-lg hover:shadow-2xl hover:shadow-purple-500/30 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? (
            <span>{t('actions.analyzing')}...</span>
          ) : (
            <>
              <Sparkles className="w-5 h-5" />
              <span>{t('actions.analyzeProject')}</span>
            </>
          )}
        </button>
      </div>

    </motion.div>
  );
};

export default ProjectInput;

/// components/kanban/KanbanBoard.tsx ///
import React, { useState, DragEvent } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { KanbanState, KanbanColumnId, KanbanCardData, Priority } from '../../types';
import { useTranslation } from '../../hooks/useTranslation';
import DifficultyMeter from '../common/DifficultyMeter';
import { LayoutGrid, ArrowLeft } from 'lucide-react';

interface KanbanBoardProps {
  initialState: KanbanState;
  projectName: string;
  onBackToAnalysis: () => void;
}

const PriorityTag: React.FC<{ priority: Priority }> = ({ priority }) => {
    const { t } = useTranslation();
    const priorityConfig: Record<Priority, { classes: string }> = {
        [Priority.High]: { classes: 'bg-red-900/80 text-red-300' },
        [Priority.Medium]: { classes: 'bg-yellow-900/80 text-yellow-300' },
        [Priority.Low]: { classes: 'bg-blue-900/80 text-blue-300' },
    };
    const config = priorityConfig[priority];
    const label = t(`priority.${priority}`);
    return <span className={`px-2 py-0.5 rounded-full font-mono text-xs ${config.classes}`}>{label}</span>;
};

const Card: React.FC<{ card: KanbanCardData; onDragStart: (e: DragEvent<HTMLDivElement>) => void }> = ({ card, onDragStart }) => {
    return (
        <motion.div
            layout
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9 }}
            transition={{ type: 'spring', stiffness: 300, damping: 30 }}
        >
            <div
                draggable="true"
                onDragStart={onDragStart}
                className="bg-gray-800 border border-gray-700 p-3 rounded-lg cursor-grab active:cursor-grabbing hover:border-blue-500/50 transition-colors"
            >
                <p className="font-semibold text-gray-200 text-sm leading-snug">{card.title}</p>
                <div className="mt-3 flex flex-wrap items-center gap-2">
                    {card.priority && <PriorityTag priority={card.priority} />}
                    <DifficultyMeter difficulty={card.difficulty} />
                </div>
            </div>
        </motion.div>
    );
};


const KanbanBoard: React.FC<KanbanBoardProps> = ({ initialState, projectName, onBackToAnalysis }) => {
    const [boardState, setBoardState] = useState(initialState);
    const [draggedCardInfo, setDraggedCardInfo] = useState<{ cardId: string; sourceColumnId: KanbanColumnId } | null>(null);
    const [dragOverColumn, setDragOverColumn] = useState<KanbanColumnId | null>(null);
    const { t } = useTranslation();

    const handleDragStart = (card: KanbanCardData, sourceColumnId: KanbanColumnId) => {
        setDraggedCardInfo({ cardId: card.id, sourceColumnId });
    };

    const handleDragOver = (e: DragEvent<HTMLDivElement>) => {
        e.preventDefault();
    };

    const handleDragEnter = (targetColumnId: KanbanColumnId) => {
        if (targetColumnId !== draggedCardInfo?.sourceColumnId) {
            setDragOverColumn(targetColumnId);
        }
    };
    
    const handleDragLeave = () => {
        setDragOverColumn(null);
    };

    const handleDrop = (targetColumnId: KanbanColumnId) => {
        if (!draggedCardInfo) return;
    
        const { cardId, sourceColumnId } = draggedCardInfo;
    
        if (sourceColumnId === targetColumnId) {
            setDraggedCardInfo(null);
            setDragOverColumn(null);
            return;
        }
    
        setBoardState(prevState => {
            const newSourceCards = [...prevState[sourceColumnId].cards];
            const cardIndex = newSourceCards.findIndex(c => c.id === cardId);
            
            if (cardIndex === -1) return prevState;

            const [movedCard] = newSourceCards.splice(cardIndex, 1);
            
            const newTargetCards = [...prevState[targetColumnId].cards, movedCard];
            
            return {
                ...prevState,
                [sourceColumnId]: { ...prevState[sourceColumnId], cards: newSourceCards },
                [targetColumnId]: { ...prevState[targetColumnId], cards: newTargetCards },
            };
        });

        setDraggedCardInfo(null);
        setDragOverColumn(null);
    };

    return (
        <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="space-y-8"
        >
             <motion.div 
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="flex items-center justify-between"
            >
                <div>
                    <div className="flex items-center gap-3">
                        <LayoutGrid className="w-8 h-8 text-teal-400"/>
                        <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-teal-400">
                             {t('kanban.title')}
                        </h2>
                    </div>
                    <p className="text-gray-400 mt-1">{t('kanban.subtitle')}</p>
                </div>
                <button
                    onClick={onBackToAnalysis}
                    className="flex items-center gap-2 px-4 py-2 text-sm text-gray-300 rounded-lg hover:bg-gray-700/50 transition-colors"
                >
                    <ArrowLeft className="w-4 h-4" />
                    {t('actions.backToAnalysis')}
                </button>
            </motion.div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {(Object.keys(initialState) as KanbanColumnId[]).map(columnId => {
                    const column = boardState[columnId];
                    return (
                        <div
                            key={columnId}
                            onDrop={() => handleDrop(columnId)}
                            onDragOver={handleDragOver}
                            onDragEnter={() => handleDragEnter(columnId)}
                            onDragLeave={handleDragLeave}
                            className={`p-4 rounded-xl bg-gray-900/30 border border-gray-800 transition-colors duration-300 ${dragOverColumn === columnId ? 'bg-blue-900/20 border-blue-700' : ''}`}
                        >
                            <div className="flex items-center justify-between mb-4">
                                <h3 className="font-semibold text-white">{column.title}</h3>
                                <span className="text-sm font-mono bg-gray-700/50 text-gray-300 px-2 py-1 rounded-md">
                                    {column.cards.length}
                                </span>
                            </div>
                            <div className="space-y-3 min-h-[200px]">
                                <AnimatePresence>
                                    {column.cards.map(card => (
                                        <Card
                                            key={card.id}
                                            card={card}
                                            onDragStart={(e) => handleDragStart(card, columnId)}
                                        />
                                    ))}
                                </AnimatePresence>
                            </div>
                        </div>
                    );
                })}
            </div>
        </motion.div>
    );
};

export default KanbanBoard;

/// components/landing/FeatureDetailModal.tsx ///
import { AnimatePresence, motion } from 'framer-motion';
import { X } from 'lucide-react';
import * as React from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { AnalysisFeature } from './LandingPage';

interface FeatureDetailModalProps {
  feature: AnalysisFeature | null;
  onClose: () => void;
}

const colorMap = {
  blue: { text: 'text-blue-400', border: 'border-blue-600/60', shadowRgb: '96, 165, 250' },
  red: { text: 'text-red-400', border: 'border-red-600/60', shadowRgb: '248, 113, 113' },
  purple: { text: 'text-purple-400', border: 'border-purple-600/60', shadowRgb: '192, 132, 252' },
  teal: { text: 'text-teal-400', border: 'border-teal-600/60', shadowRgb: '45, 212, 191' },
};

const FeatureDetailModal: React.FC<FeatureDetailModalProps> = ({ feature, onClose }) => {
  const { t } = useTranslation();

  return (
    <AnimatePresence>
      {feature && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ type: 'spring', stiffness: 300, damping: 25 }}
            onClick={(e) => e.stopPropagation()}
            style={{ '--shadow-rgb': colorMap[feature.color].shadowRgb } as React.CSSProperties}
            className={`bg-gray-800 border ${colorMap[feature.color].border} rounded-xl w-full max-w-2xl max-h-[80vh] flex flex-col shadow-2xl relative shadow-[0_4px_30px_rgba(var(--shadow-rgb),0.2)]`}
          >
            {/* Header */}
            <div className="flex items-start justify-between p-6 border-b border-gray-700">
              <div className="flex items-center gap-4">
                <div className="bg-gray-900/50 p-3 rounded-full">
                  <feature.icon className={`w-7 h-7 ${colorMap[feature.color].text}`} />
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">{t(feature.titleKey)}</h2>
                  <p className="text-gray-400">{t(feature.descriptionKey)}</p>
                </div>
              </div>
              <button
                title={t('close')}
                onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors absolute top-4 right-4">
                <X className="w-6 h-6" />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto">
              <p className="text-gray-300 whitespace-pre-line leading-relaxed">
                {t(feature.detailKey)}
              </p>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default FeatureDetailModal;

/// components/landing/LandingPage.tsx ///
import React, { useState, useEffect } from 'react';
import { useTranslation } from '../../hooks/useTranslation';
import { FileText, ShieldCheck, Layers3, CodeXml, Star, BarChart3, Sparkles } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { motion } from 'framer-motion';
import FeatureDetailModal from './FeatureDetailModal';

export interface AnalysisFeature {
    icon: React.ElementType;
    titleKey: string;
    descriptionKey: string;
    detailKey: string;
    color: 'blue' | 'red' | 'purple' | 'teal';
}

const colorMap = {
    blue: { text: 'text-blue-400', hoverBorder: 'hover:border-blue-500/50', hoverShadow: 'hover:shadow-blue-500/20' },
    red: { text: 'text-red-400', hoverBorder: 'hover:border-red-500/50', hoverShadow: 'hover:shadow-red-500/20' },
    purple: { text: 'text-purple-400', hoverBorder: 'hover:border-purple-500/50', hoverShadow: 'hover:shadow-purple-500/20' },
    teal: { text: 'text-teal-400', hoverBorder: 'hover:border-teal-500/50', hoverShadow: 'hover:shadow-teal-500/20' },
};

const features: AnalysisFeature[] = [
    { 
        icon: FileText, 
        titleKey: 'analysisTypes.GENERAL.label',
        descriptionKey: 'analysisTypes.GENERAL.description',
        detailKey: 'landing.featureDetails.GENERAL',
        color: 'blue',
    },
    { 
        icon: ShieldCheck, 
        titleKey: 'analysisTypes.SECURITY.label',
        descriptionKey: 'analysisTypes.SECURITY.description',
        detailKey: 'landing.featureDetails.SECURITY',
        color: 'red',
    },
    { 
        icon: Layers3,
        titleKey: 'analysisTypes.SCALABILITY.label',
        descriptionKey: 'analysisTypes.SCALABILITY.description',
        detailKey: 'landing.featureDetails.SCALABILITY',
        color: 'purple',
    },
    { 
        icon: CodeXml, 
        titleKey: 'analysisTypes.CODE_QUALITY.label',
        descriptionKey: 'analysisTypes.CODE_QUALITY.description',
        detailKey: 'landing.featureDetails.CODE_QUALITY',
        color: 'teal',
    }
];

const FeatureCard: React.FC<{ feature: AnalysisFeature, onClick: () => void }> = ({ feature, onClick }) => {
    const { t } = useTranslation();
    const Icon = feature.icon;
    const styles = colorMap[feature.color];
    return (
        <button 
            onClick={onClick}
            className={`group bg-gradient-to-br from-gray-800 to-gray-900/50 border border-gray-700 p-6 rounded-xl flex flex-col items-start gap-4 text-left transition-all duration-300 hover:scale-[1.03] ${styles.hoverBorder} hover:shadow-2xl ${styles.hoverShadow} cursor-pointer`}
        >
            <div className="bg-gray-900/50 p-3 rounded-full transition-transform duration-300 group-hover:scale-110">
                <Icon className={`w-7 h-7 ${styles.text} transition-transform duration-300 group-hover:-rotate-12`}/>
            </div>
            <div>
                <p className="font-semibold text-white text-lg">{t(feature.titleKey)}</p>
                <p className="text-sm text-gray-400 mt-1">{t(feature.descriptionKey)}</p>
            </div>
        </button>
    );
};


const LandingPage: React.FC = () => {
    const { t } = useTranslation();
    const { login } = useAuth();
    const [selectedFeature, setSelectedFeature] = useState<AnalysisFeature | null>(null);
    const [dynamicTitle, setDynamicTitle] = useState('');

    useEffect(() => {
        const titles = t('landing.dynamicPhrases') as unknown as string[];
        if (Array.isArray(titles) && titles.length > 0) {
            const randomIndex = Math.floor(Math.random() * titles.length);
            setDynamicTitle(titles[randomIndex]);
        }
    }, [t]);


  return (
    <div className="bg-gray-900 text-white min-h-screen font-sans selection:bg-purple-500/30">
        <div className="fixed top-0 left-0 w-full h-full bg-grid-gray-700/[0.05] -z-10"></div>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-20 space-y-20">
            
            {/* Hero Section */}
            <motion.div 
                className="text-center"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.7 }}
            >
                {/* Combined Title */}
                <div className="flex flex-wrap items-baseline justify-center gap-x-4 gap-y-2 group">
                    <div
                        className="text-3xl md:text-5xl font-bold text-gray-200"
                    >
                        <span>{t('header.title')}</span>
                    </div>
                    
                    <div className="inline-flex items-baseline justify-center gap-3">
                        <BarChart3 className="w-8 h-8 md:w-10 md:h-10 text-blue-400 transition-transform duration-300 group-hover:rotate-6" />
                        <h1 className="text-4xl md:text-6xl font-bold tracking-tight text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-500">
                          {dynamicTitle}
                        </h1>
                        <Sparkles className="w-8 h-8 md:w-10 md:h-10 text-purple-400 transition-transform duration-300 group-hover:-rotate-6" />
                    </div>
                </div>
                
                <p className="text-gray-400 mt-6 max-w-3xl mx-auto text-lg md:text-xl">
                    {t('header.subtitle')}
                </p>
                <div className="mt-10">
                    <button
                        onClick={login}
                        className="group relative inline-flex items-center justify-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold text-lg hover:shadow-2xl hover:shadow-blue-500/30 hover:scale-105 transition-all duration-300"
                    >
                        <span>{t('landing.cta')}</span>
                        <div className="absolute -right-2 -top-2 w-5 h-5 bg-teal-400 rounded-full flex items-center justify-center animate-pulse">
                            <Star className="w-3 h-3 text-teal-900" />
                        </div>
                    </button>
                </div>
            </motion.div>

            {/* Features Section */}
            <motion.div 
                className="space-y-12"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3, duration: 0.7 }}
            >
                <div className="text-center">
                    <h2 className="text-3xl font-bold text-white">{t('landing.featuresTitle')}</h2>
                    <p className="text-gray-400 mt-2 max-w-2xl mx-auto">{t('landing.featuresSubtitle')}</p>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    {features.map((feature, index) => (
                        <FeatureCard 
                            key={index}
                            feature={feature}
                            onClick={() => setSelectedFeature(feature)}
                        />
                    ))}
                </div>
            </motion.div>
        </div>
        <FeatureDetailModal 
            feature={selectedFeature}
            onClose={() => setSelectedFeature(null)}
        />
    </div>
  );
};

export default LandingPage;

/// components/settings/SettingsModal.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Settings, X, Save, AlertTriangle, RefreshCw } from 'lucide-react';
import { AppSettings, UsageTracking } from '../../types';
import { useTranslation } from '../../hooks/useTranslation';
import { useLanguage } from '../../contexts/LanguageContext';

interface SettingsModalProps {
  isOpen: boolean;
  onClose: () => void;
  settings: AppSettings;
  usageTracking: UsageTracking;
  onSave: (newSettings: AppSettings) => void;
  onResetUsage: () => void;
}

const MAX_TOKEN_LIMIT = 1000000;

const SettingsModal: React.FC<SettingsModalProps> = ({
  isOpen,
  onClose,
  settings,
  usageTracking,
  onSave,
  onResetUsage,
}) => {
  const [localLimit, setLocalLimit] = useState<number>(0);
  const [validationError, setValidationError] = useState<string | null>(null);
  const { t } = useTranslation();
  const { locale } = useLanguage();

  useEffect(() => {
    if (isOpen) {
      setLocalLimit(settings.tokenLimit);
      setValidationError(null);
    }
  }, [isOpen, settings]);

  const handleSave = () => {
    if (validationError) return;
    onSave({ tokenLimit: localLimit });
    onClose();
  };
  
  const handleLimitChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const valueStr = e.target.value;
    if (valueStr === '') {
        setLocalLimit(0);
        setValidationError(null);
        return;
    }

    const value = parseInt(valueStr, 10);
    
    if (isNaN(value) || value < 0) {
      setLocalLimit(0);
      setValidationError(null);
    } else {
      setLocalLimit(value);
      if (value > MAX_TOKEN_LIMIT) {
        setValidationError(t('settings.tokenLimitError', { limit: MAX_TOKEN_LIMIT.toLocaleString(locale) }));
      } else {
        setValidationError(null);
      }
    }
  };
  
  const currentMonthName = new Date(usageTracking.year, usageTracking.month).toLocaleString(locale, { month: 'long' });

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            transition={{ duration: 0.2, ease: 'easeOut' }}
            onClick={(e) => e.stopPropagation()}
            className="bg-gray-800/80 border border-gray-700 rounded-xl w-full max-w-lg flex flex-col shadow-2xl"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <div className="flex items-center gap-3">
                <Settings className="w-6 h-6 text-purple-400" />
                <h2 className="text-xl font-bold text-white">{t('settings.title')}</h2>
              </div>
              <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors">
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">

              <div>
                <label htmlFor="token-limit" className="block text-sm font-medium text-gray-300 mb-2">
                  {t('settings.monthlyTokenLimit')}
                </label>
                <input
                  id="token-limit"
                  type="number"
                  value={localLimit}
                  onChange={handleLimitChange}
                  className={`w-full p-2 bg-gray-900 border ${validationError ? 'border-red-500' : 'border-gray-600'} rounded-md focus:ring-2 ${validationError ? 'focus:ring-red-500' : 'focus:ring-purple-500'} focus:border-transparent`}
                  placeholder="0"
                  min="0"
                />
                <p className="text-xs text-gray-500 mt-1">{t('settings.limitDescription')}</p>
                {validationError && (
                  <p className="text-xs text-red-400 mt-1">{validationError}</p>
                )}
              </div>

              <div className="p-4 bg-gray-900/50 border border-gray-700 rounded-lg">
                <h3 className="font-semibold text-gray-200">{t('settings.currentUsage')}</h3>
                <p className="text-sm text-gray-400">
                  {t('settings.usageForMonth', { month: currentMonthName })}:
                </p>
                <p className="text-2xl font-bold text-white mt-2">
                  {usageTracking.totalTokens.toLocaleString(locale)}
                  {settings.tokenLimit > 0 && (
                    <span className="text-base text-gray-400"> / {settings.tokenLimit.toLocaleString(locale)}</span>
                  )}
                  <span className="text-base text-gray-400"> {t('results.usageMetadata.tokens')}</span>
                </p>
                 <button
                    onClick={onResetUsage}
                    className="mt-4 flex items-center gap-1.5 px-3 py-1.5 text-xs font-semibold text-yellow-400 bg-yellow-900/50 border border-yellow-700 rounded-md hover:bg-yellow-800/50 transition-colors"
                >
                    <RefreshCw className="w-3.5 h-3.5" /> {t('settings.resetUsage')}
                </button>
              </div>

              <div className="flex items-start gap-3 p-3 bg-yellow-900/30 border border-yellow-800/50 rounded-lg">
                  <AlertTriangle className="w-5 h-5 text-yellow-400 shrink-0 mt-0.5" />
                  <p className="text-xs text-yellow-300">
                    {t('settings.disclaimer')}
                  </p>
              </div>
            </div>

            {/* Footer */}
            <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-end">
              <button
                onClick={handleSave}
                disabled={!!validationError}
                className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-purple-600 rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Save className="w-4 h-4" /> {t('settings.saveAndClose')}
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default SettingsModal;

/// components/user/ProfileModal.tsx ///
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { User, X, Save } from 'lucide-react';
import { UserProfile } from '../../types';
import { useTranslation } from '../../hooks/useTranslation';

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  profile: UserProfile;
  onSave: (newProfile: UserProfile) => void;
}

const ProfileModal: React.FC<ProfileModalProps> = ({
  isOpen,
  onClose,
  profile,
  onSave,
}) => {
  const [localName, setLocalName] = useState('');
  const [localApiKey, setLocalApiKey] = useState('');
  const { t } = useTranslation();

  useEffect(() => {
    if (isOpen) {
      setLocalName(profile.name || '');
      setLocalApiKey(profile.apiKey || '');
    }
  }, [isOpen, profile]);

  const handleSave = () => {
    onSave({ name: localName, apiKey: localApiKey });
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
          className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            transition={{ duration: 0.2, ease: 'easeOut' }}
            onClick={(e) => e.stopPropagation()}
            className="bg-gray-800/80 border border-gray-700 rounded-xl w-full max-w-md flex flex-col shadow-2xl"
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-gray-700">
              <div className="flex items-center gap-3">
                <User className="w-6 h-6 text-blue-400" />
                <h2 className="text-xl font-bold text-white">{t('profile.title')}</h2>
              </div>
              <button onClick={onClose} className="p-1 rounded-full text-gray-400 hover:bg-gray-700 transition-colors">
                <X className="w-5 h-5" />
              </button>
            </div>

            {/* Content */}
            <div className="p-6 space-y-6">
              <div>
                <label htmlFor="user-name" className="block text-sm font-medium text-gray-300 mb-2">
                  {t('profile.nameLabel')}
                </label>
                <input
                  id="user-name"
                  type="text"
                  value={localName}
                  onChange={(e) => setLocalName(e.target.value)}
                  className="w-full p-2 bg-gray-900 border border-gray-600 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  placeholder={t('profile.namePlaceholder')}
                />
              </div>
              <div>
                <label htmlFor="api-key" className="block text-sm font-medium text-gray-300 mb-2">
                  {t('profile.apiKeyLabel')}
                </label>
                <input
                  id="api-key"
                  type="password"
                  value={localApiKey}
                  onChange={(e) => setLocalApiKey(e.target.value)}
                  className="w-full p-2 bg-gray-900 border border-gray-600 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent font-mono"
                  placeholder={t('profile.apiKeyPlaceholder')}
                />
              </div>
               <div className="text-xs text-gray-400 p-3 bg-gray-900/50 border border-dashed border-gray-600 rounded-md">
                {t('profile.apiKeyNotice')}
              </div>
            </div>

            {/* Footer */}
            <div className="p-4 bg-gray-900/50 border-t border-gray-700 flex justify-end">
              <button
                onClick={handleSave}
                className="flex items-center gap-2 px-4 py-2 text-sm font-semibold text-white bg-purple-600 rounded-md hover:bg-purple-700 transition-colors"
              >
                <Save className="w-4 h-4" /> {t('profile.save')}
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default ProfileModal;

/// constants/index.ts ///

export const initialProjectContext = `# LookAtni Code - Gerado automaticamente
# Data: 2025-09-09T01:43:34.950Z
# Fonte: ./
# Total de arquivos: 186

// / RELEASE_NOTES.md / //
# 🚀 Kortex v0.1.0 - Release Notes

**Release Date:** July 25, 2025  
**Version:** 0.1.0  
**Status:** Production Ready

---

## 🎉 Major Milestone: Complete Desmocking Strategy

This release marks the successful completion of the **desmocking strategy**, transforming Kortex from a prototype with mock data into a production-ready monitoring dashboard with real API integrations.

---

## ✨ What's New

### 🔄 Real Data Integration

- **Dashboard**: Live GitHub and Azure DevOps data integration
- **Servers Page**: Real-time MCP server monitoring and management
- **Analytics**: Comprehensive data aggregation from multiple sources
- **Helm/Kubernetes**: Full cluster and release management capabilities
- **API Configuration**: Dynamic API endpoint management

### 🚀 Performance & Reliability

- **WebSocket System**: Real-time updates with auto-reconnection
- **Resilient Fallbacks**: Graceful degradation when APIs are unavailable
- **Visual Indicators**: Clear data source status (Real Data vs Demo Mode)
- **Auto-refresh**: Intelligent background data refresh (3-5 minute intervals)
- **Error Handling**: Comprehensive error boundaries and retry mechanisms

### 🛠️ Developer Experience

- **TypeScript 100%**: Strict type safety with zero compilation errors
- **Mock API Server**: Complete development environment with 10 endpoints
- **Modular Architecture**: Clean separation of concerns and reusable components
- **Hot Reload**: Fast development cycle with instant updates
- **Build Optimization**: Static site generation for fast deployments

---

## 🏗️ Technical Achievements

### Architecture Overhaul

\`\`\`
BEFORE: Static mock data → Simple UI rendering
AFTER:  Real APIs → Resilient Service Layer → WebSocket Updates → UI with Fallbacks
\`\`\`

### Performance Metrics

- **Build Success**: 14/14 pages compiling successfully
- **TypeScript Errors**: 0 compilation errors
- **API Coverage**: 10 endpoints fully implemented and tested
- **Real Data Coverage**: 5/5 major pages fully desmocked

### Quality Improvements

- **Code Coverage**: Comprehensive error handling and edge cases
- **Documentation**: Complete technical documentation and guides
- **Standards Compliance**: Follows TypeScript and Markdown best practices
- **Accessibility**: Responsive design with dark mode support

---

## 🔮 Future Roadmap

### Immediate Next Steps (v0.2.0)
- Connect to production StatusRafa and Kosmos APIs
- Implement authentication and authorization
- Add advanced alerting and notification systems
- Expand monitoring capabilities

### Planned Enhancements
- **Multi-cloud Support**: AWS, GCP integration
- **Advanced Analytics**: Machine learning insights
- **Custom Dashboards**: User-configurable interfaces
- **Mobile Application**: React Native companion app

---

// / docs/README.md / //
# Kortex Documentation

This directory contains the complete documentation for Kortex, built with MkDocs Material.

## 🚀 Quick Start

### Prerequisites

- Python 3.8+
- UV package manager installed

### Setup

1. **Install dependencies**:

   \`\`\`bash
   uv sync
   \`\`\`

2. **Activate virtual environment**:

   \`\`\`bash
   source .venv/bin/activate
   \`\`\`

3. **Start development server**:

   \`\`\`bash
   mkdocs serve
   \`\`\`

   Or use the helper script:

   \`\`\`bash
   ./docs-dev.sh serve
   \`\`\`

4. **Open in browser**: <http://localhost:8000>

## 🌐 Real-Time DevOps & AI Monitoring Dashboard

**Kortex** is a production-ready, enterprise-grade monitoring dashboard designed for modern development teams. It provides real-time insights into API usage, system health, and development workflows across GitHub, Azure DevOps, Kubernetes, and AI infrastructure.

Built with **Next.js 15**, **TypeScript**, and **Tailwind CSS**, Kortex offers a responsive, real-time interface powered by WebSocket connections and resilient API integrations.

---

## 🏗️ Architecture

\`\`\`mermaid
graph TD
    A[Kortex Dashboard] --> B[Real-Time Hooks]
    B --> C[Resilient Service Layer]
    C --> D[Mock API Server]
    C --> E[Production APIs]
    
    D --> F[GitHub API Mock]
    D --> G[Azure DevOps Mock]
    D --> H[MCP Server Mock]
    D --> I[Helm/K8s Mock]
    
    E --> J[StatusRafa MCP]
    E --> K[Kosmos Backend]
    E --> L[External APIs]
    
    A --> M[WebSocket System]
    M --> N[Real-time Events]
    M --> O[Auto-reconnect]
\`\`\`

### Core Components

- **Frontend**: Next.js 15 with TypeScript and Tailwind CSS
- **State Management**: React Context API with custom hooks
- **Real-time**: WebSocket connections with automatic reconnection
- **API Layer**: Resilient service layer with fallback mechanisms
- **Development**: Mock API server for local development
- **Production**: Integration with StatusRafa MCP and Kosmos backends
`;

/// contexts/AuthContext.tsx ///
import React, { createContext, useState, useContext, ReactNode } from 'react';

// Define the shape of our mock user
interface User {
  name: string;
}

interface AuthContextType {
  user: User | null;
  login: () => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// A simple provider component that wraps our app
export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  // Mock login function - in a real app, this would involve API calls
  const login = () => {
    // For now, just set a mock user object
    setUser({ name: 'Mock User' });
  };

  // Logout function
  const logout = () => {
    setUser(null);
  };

  const value = { user, login, logout };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook to easily access auth context
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

/// contexts/LanguageContext.tsx ///
import React, { createContext, useState, useEffect, useContext, ReactNode } from 'react';

type Locale = 'en-US' | 'pt-BR';
type Translations = Record<string, any>;

interface LanguageContextType {
  locale: Locale;
  setLocale: (locale: Locale) => void;
  translations: Translations;
  isLoading: boolean;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const getInitialLocale = (): Locale => {
    const storedLocale = localStorage.getItem('locale') as Locale;
    if (storedLocale && ['en-US', 'pt-BR'].includes(storedLocale)) {
        return storedLocale;
    }
    const browserLang = navigator.language;
    if (browserLang.startsWith('pt')) {
        return 'pt-BR';
    }
    return 'en-US';
};

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [locale, setLocale] = useState<Locale>(getInitialLocale());
  const [translations, setTranslations] = useState<Translations>({});
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchTranslations = async () => {
      setIsLoading(true);
      try {
        const response = await fetch(`/locales/${locale}/translation.json`);
        if (!response.ok) {
          throw new Error(`Failed to load translations for ${locale}`);
        }
        const data = await response.json();
        setTranslations(data);
        localStorage.setItem('locale', locale);
      } catch (error) {
        console.error(error);
        // Fallback to English if loading fails
        if (locale !== 'en-US') {
            setLocale('en-US');
        } else {
             setTranslations({}); // Clear translations on error
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchTranslations();
  }, [locale]);

  const value = {
    locale,
    setLocale,
    translations,
    isLoading,
  };

  return (
    <LanguageContext.Provider value={value}>
      {!isLoading && children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

/// contexts/NotificationContext.tsx ///
import React, { createContext, useState, useContext, ReactNode, useCallback } from 'react';
import { Notification, NotificationType } from '../types';

interface NotificationContextType {
  notifications: Notification[];
  addNotification: (notification: Omit<Notification, 'id'>) => void;
  removeNotification: (id: number) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const removeNotification = useCallback((id: number) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  }, []);

  const addNotification = useCallback((notification: Omit<Notification, 'id'>) => {
    const id = Date.now();
    setNotifications(prev => [...prev, { ...notification, id }]);
  }, []);

  const value = {
    notifications,
    addNotification,
    removeNotification,
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = (): NotificationContextType => {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

/// data/exampleAnalysis.ts ///



// FIX: Corrected import path for types to point to the index file inside the types directory.
import { ProjectAnalysis, HistoryItem, Priority, Difficulty, Effort, AnalysisType, MaturityLevel } from '../types';

type TFunction = (key: string, options?: any) => string;

// Este é o item mais recente da história, o que será exibido.
export const exampleAnalysis = (t: TFunction): ProjectAnalysis => ({
  projectName: t('example.kortex.projectName'),
  analysisType: AnalysisType.General,
  summary: t('example.kortex.summary'),
  strengths: [
    t('example.kortex.strengths.s1'),
    t('example.kortex.strengths.s2'),
    t('example.kortex.strengths.s3'),
    t('example.kortex.strengths.s4'),
    t('example.kortex.strengths.s5')
  ],
  improvements: [
    {
      title: t('example.kortex.improvements.i1.title'),
      description: t('example.kortex.improvements.i1.description'),
      priority: Priority.High,
      difficulty: Difficulty.Medium,
      businessImpact: t('example.kortex.improvements.i1.businessImpact')
    },
    {
      title: t('example.kortex.improvements.i2.title'),
      description: t('example.kortex.improvements.i2.description'),
      priority: Priority.Medium,
      difficulty: Difficulty.High,
      businessImpact: t('example.kortex.improvements.i2.businessImpact')
    },
    {
      title: t('example.kortex.improvements.i3.title'),
      description: t('example.kortex.improvements.i3.description'),
      priority: Priority.Medium,
      difficulty: Difficulty.Medium,
      businessImpact: t('example.kortex.improvements.i3.businessImpact')
    }
  ],
  nextSteps: {
    shortTerm: [
      {
        title: t('example.kortex.nextSteps.shortTerm.s1.title'),
        description: t('example.kortex.nextSteps.shortTerm.s1.description'),
        difficulty: Difficulty.Medium
      },
      {
        title: t('example.kortex.nextSteps.shortTerm.s2.title'),
        description: t('example.kortex.nextSteps.shortTerm.s2.description'),
        difficulty: Difficulty.Low
      }
    ],
    longTerm: [
      {
        title: t('example.kortex.nextSteps.longTerm.l1.title'),
        description: t('example.kortex.nextSteps.longTerm.l1.description'),
        difficulty: Difficulty.High
      },
      {
        title: t('example.kortex.nextSteps.longTerm.l2.title'),
        description: t('example.kortex.nextSteps.longTerm.l2.description'),
        difficulty: Difficulty.High
      }
    ]
  },
  viability: {
    score: 9,
    assessment: t('example.kortex.viability.assessment')
  },
  roiAnalysis: {
    assessment: t('example.kortex.roi.assessment'),
    potentialGains: [
      t('example.kortex.roi.gains.g1'),
      t('example.kortex.roi.gains.g2'),
      t('example.kortex.roi.gains.g3'),
      t('example.kortex.roi.gains.g4')
    ],
    estimatedEffort: Effort.Medium,
  },
  maturity: {
    level: MaturityLevel.Production,
    assessment: t('example.kortex.maturity.assessment')
  },
  usageMetadata: {
    promptTokenCount: 1850,
    candidatesTokenCount: 650,
    totalTokenCount: 2500,
  }
});

// Histórico fictício expandido para o modo de exemplo
export const exampleHistory = (t: TFunction): HistoryItem[] => {
    const mainAnalysis = exampleAnalysis(t);

    return [
      // --- Projeto: Kortex ---
      // Mais recente (corresponde a `exampleAnalysis`)
      {
        id: 1004,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-25T10:00:00").toLocaleString(t('localeCode')),
        analysis: mainAnalysis,
        projectContext: t('example.projectContext'),
      },
      // Análise intermediária (teve uma queda)
      {
        id: 1003,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-18T14:30:00").toLocaleString(t('localeCode')),
        analysis: {
          ...mainAnalysis,
          viability: { score: 7, assessment: t('example.history.kortex.h1.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.MVP },
          usageMetadata: { promptTokenCount: 1800, candidatesTokenCount: 590, totalTokenCount: 2390 },
        },
        projectContext: t('example.projectContext'),
      },
      // Análise inicial
      {
        id: 1002,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-10T09:15:00").toLocaleString(t('localeCode')),
        analysis: {
          ...mainAnalysis,
          viability: { score: 8, assessment: t('example.history.kortex.h2.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.MVP },
          usageMetadata: { promptTokenCount: 1750, candidatesTokenCount: 610, totalTokenCount: 2360 },
        },
        projectContext: t('example.projectContext'),
      },
      // Análise de segurança (outro tipo)
      {
        id: 1001,
        projectName: mainAnalysis.projectName,
        analysisType: AnalysisType.Security,
        timestamp: new Date("2025-07-05T11:00:00").toLocaleString(t('localeCode')),
        analysis: {
          ...mainAnalysis,
          analysisType: AnalysisType.Security,
          summary: t('example.history.kortex.h3.summary'),
          viability: { score: 7, assessment: t('example.history.kortex.h3.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.Prototype },
          usageMetadata: { promptTokenCount: 2100, candidatesTokenCount: 720, totalTokenCount: 2820 },
        },
        projectContext: t('example.projectContext'),
      },
      // Análise mais antiga (score mais baixo)
      {
        id: 1000,
        projectName: t('example.history.kortex.h4.projectName'),
        analysisType: AnalysisType.General,
        timestamp: new Date("2025-07-02T16:45:00").toLocaleString(t('localeCode')),
        analysis: {
          ...mainAnalysis,
          projectName: t('example.history.kortex.h4.projectName'),
          viability: { score: 6, assessment: t('example.history.kortex.h4.assessment') },
          maturity: { ...mainAnalysis.maturity, level: MaturityLevel.Prototype },
          usageMetadata: { promptTokenCount: 1700, candidatesTokenCount: 550, totalTokenCount: 2250 },
        },
        projectContext: t('example.projectContext'),
      },

      // --- Projeto: Orion UI Kit ---
      {
        id: 1005,
        projectName: t('example.history.orion.projectName'),
        analysisType: AnalysisType.CodeQuality,
        timestamp: new Date("2025-07-26T11:00:00").toLocaleString(t('localeCode')),
        analysis: {
          ...mainAnalysis, // Reutilizando a estrutura para simplificar
          projectName: t('example.history.orion.projectName'),
          analysisType: AnalysisType.CodeQuality,
          summary: t('example.history.orion.summary'),
          viability: { score: 8, assessment: t('example.history.orion.assessment') },
          maturity: { level: MaturityLevel.Optimized, assessment: t('example.history.orion.maturityAssessment') },
          usageMetadata: { promptTokenCount: 1500, candidatesTokenCount: 450, totalTokenCount: 1950 },
        },
        projectContext: t('example.projectContext'),
      },
    ];
};

/// hooks/useNetworkStatus.ts ///
import { useState, useEffect } from 'react';

export const useNetworkStatus = () => {
  const [isOnline, setIsOnline] = useState(typeof navigator !== 'undefined' ? navigator.onLine : true);

  useEffect(() => {
    if (typeof window === 'undefined') return;

    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return isOnline;
};

/// hooks/usePersistentState.ts ///
import { useState, useEffect, useCallback } from 'react';
import { get, set } from '../lib/idb';

type SetValue<T> = (value: T | ((prevValue: T) => T)) => void;

/**
 * A custom hook that provides a state management solution similar to `useState`,
 * but with the added feature of persisting the state to client-side storage.
 *
 * It prioritizes using IndexedDB for its larger storage capacity and asynchronous nature,
 * making it suitable for storing complex objects or large amounts of data. If IndexedDB
 * is unavailable or fails, it gracefully falls back to using `localStorage`.
 *
 * This hook abstracts away the complexities of data persistence, allowing components
 * to manage state without being concerned about the underlying storage mechanism.
 *
 * @template T The type of the state to be managed.
 * @param {string} key The unique key to identify the state in storage.
 * @param {T} defaultValue The initial value of the state if none is found in storage.
 * @returns {[T, SetValue<T>]} A tuple containing the current state and a function to update it.
 */
export const usePersistentState = <T>(key: string, defaultValue: T): [T, SetValue<T>] => {
  const [value, setValue] = useState<T>(defaultValue);

  // Load the persisted state from storage on initial render.
  useEffect(() => {
    let isMounted = true;
    
    const loadState = async () => {
      try {
        // 1. Try IndexedDB first (asynchronous)
        const idbValue = await get<T>(key);
        if (idbValue !== undefined && isMounted) {
          setValue(idbValue);
          return;
        }

        // 2. Fallback to localStorage (synchronous)
        const lsValue = localStorage.getItem(key);
        if (lsValue !== null && isMounted) {
          setValue(JSON.parse(lsValue));
          return;
        }

      } catch (error) {
        console.error(`Failed to load state for key "${key}" from storage.`, error);
      }
      
      // 3. Use default value if nothing is found
      if (isMounted) {
        setValue(defaultValue);
      }
    };

    loadState();
    
    return () => { isMounted = false; };
  }, [key]); // Only run on mount or if key changes

  // Persist the state to storage whenever it changes.
  useEffect(() => {
    // We don't want to persist the initial default value until it's been
    // explicitly set by the user or loaded from storage.
    // This check prevents overwriting existing stored data with the default on first render.
    if (value === defaultValue && localStorage.getItem(key) === null) {
      // A more complex check could be done with IDB but this is a reasonable heuristic.
      return;
    }
    
    const saveState = async () => {
      try {
        // Write to both to ensure data is available even if one system fails
        // and to keep localStorage as a simple, readable backup.
        await set(key, value);
        localStorage.setItem(key, JSON.stringify(value));
      } catch (error) {
        console.error(`Failed to save state for key "${key}" to storage.`, error);
      }
    };
    
    saveState();
  }, [key, value, defaultValue]);

  return [value, setValue];
};

/// hooks/useTranslation.ts ///
import { useLanguage } from '../contexts/LanguageContext';

export const useTranslation = () => {
  const { translations } = useLanguage();

  const t = (key: string, options?: Record<string, string | number>): string => {
    // Navigate through nested keys
    const keys = key.split('.');
    let result = keys.reduce((acc, currentKey) => {
      if (acc && typeof acc === 'object' && currentKey in acc) {
        return acc[currentKey];
      }
      return undefined;
    }, translations as any);

    if (result === undefined) {
      console.warn(`Translation key not found: ${key}`);
      return key; // Return the key as a fallback
    }
    
    // Handle interpolation
    if (options && typeof result === 'string') {
        Object.keys(options).forEach(optionKey => {
            const regex = new RegExp(`{${optionKey}}`, 'g');
            result = result.replace(regex, String(options[optionKey]));
        });
    }

    return result;
  };

  return { t };
};

/// index.css ///
/*
 * Global styles
 */

/// index.html ///
<!DOCTYPE html>
<html lang="en">

  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta charset="UTF-8" />

    <!-- Enhanced SEO & Branding for Kubex.world -->
    <title>GemX Analyzer: AI Prompt Crafter | Kubex — Code Fast. Own Everything.</title>
    <meta name="description"
      content="GemX Analyzer: Transform raw ideas into professional AI prompts. Part of Kubex Ecosystem — modular, open-source, AI-powered tools for Devs, Ops & Builders. No lock-in. No excuses." />
    <meta name="keywords"
      content="AI prompts, prompt engineering, Kubex, open source, no lock-in, modular tools, AI development" />
    <meta name="author" content="Kubex Ecosystem" />

    <!-- Open Graph / Social Media -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="GemX Analyzer: AI Prompt Crafter | Kubex — Code Fast. Own Everything." />
    <meta property="og:description"
      content="Transform raw ideas into professional AI prompts. Democratizing modular, accessible and powerful tech. From old laptops to enterprise clusters." />
    <meta property="og:url" content="https://kubex.world/grompt" />
    <meta property="og:image" content="https://kubex.world/assets/kubex_og.png" />
    <meta property="og:site_name" content="Kubex Ecosystem" />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="GemxAnalyzer: AI Prompt Crafter | Kubex Ecosystem" />
    <meta name="twitter:description"
      content="AI-powered prompt engineering tool. Open-source ecosystem. No lock-in. No excuses." />
    <meta name="twitter:image" content="https://kubex.world/assets/kubex_og.png" />

    <!-- Favicons & App Icons -->
    <link rel="icon" href="/assets/favicon.ico" />
    <link rel="icon" type="image/svg+xml" href="/assets/icons/favicon.svg" />
    <link rel="apple-touch-icon" href="/assets/apple-touch-icon.png" />
    <link rel="mask-icon" href="/assets/safari-pinned-tab.svg" color="#00f0ff" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <!-- Viewport & PWA -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#0a0f14" id="theme-color-meta">
    <script>
      // Configure Tailwind CSS to use class-based dark mode
      tailwind = {
        config: {
          darkMode: 'class',
        }
      }

      // Detect browsers that don't support theme-color
      function isThemeColorSupported() {
        const userAgent = navigator.userAgent.toLowerCase();
        const isFirefox = userAgent.includes('firefox');
        const isOpera = userAgent.includes('opera') || userAgent.includes('opr');
        return !(isFirefox || isOpera);
      }

      // Update theme color meta tag based on theme
      function updateThemeColor(theme) {
        const metaThemeColor = document.getElementById('theme-color-meta');
        if (metaThemeColor) {
          metaThemeColor.setAttribute('content', theme === 'dark' ? '#0a0f14' : '#f9fafb');
        }

        // Apply visual fallback for unsupported browsers
        if (!isThemeColorSupported()) {
          const fallbackStyle = document.getElementById('theme-color-fallback') || document.createElement('style');
          if (!fallbackStyle.id) {
            fallbackStyle.id = 'theme-color-fallback';
            document.head.appendChild(fallbackStyle);
          }

          const color = theme === 'dark' ? '#0a0f14' : '#f9fafb';
          fallbackStyle.textContent = `
            /* Theme color fallback for unsupported browsers */
            html { border-top: 4px solid ${color}; }
            body::before {
              content: '';
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 4px;
              background: ${color};
              z-index: 9999;
              pointer-events: none;
            }
          `;
        }
      }

      // Initialize theme color on page load
      document.addEventListener('DOMContentLoaded', function () {
        const savedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
        const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');
        updateThemeColor(initialTheme);

        // Listen for theme changes
        const observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
              const isDark = document.documentElement.classList.contains('dark');
              updateThemeColor(isDark ? 'dark' : 'light');
            }
          });
        });

        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ['class']
        });
      });
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Orbitron:wght@700;900&family=IBM+Plex+Mono:wght@400;500&display=swap"
      rel="stylesheet">
    <style>
      body {
        font-family: 'IBM Plex Mono', monospace;
        transition: background-color 0.3s ease-in-out;
      }

      body.dark-theme {
        background-color: #0a0f14;
        background-image:
          radial-gradient(circle at 25px 25px, rgba(0, 240, 255, 0.1) 2%, transparent 0%),
          radial-gradient(circle at 75px 75px, rgba(0, 240, 255, 0.05) 2%, transparent 0%);
        background-size: 100px 100px;
      }

      body.light-theme {
        background-color: #f9fafb;
        background-image:
          radial-gradient(circle at 25px 25px, rgba(0, 0, 0, 0.03) 2%, transparent 0%),
          radial-gradient(circle at 75px 75px, rgba(0, 0, 0, 0.02) 2%, transparent 0%);
        background-size: 100px 100px;
      }

      .font-orbitron {
        font-family: 'Orbitron', sans-serif;
      }

      .font-plex-mono {
        font-family: 'IBM Plex Mono', monospace;
      }

      .neon-glow-cyan {
        text-shadow: 0 0 5px rgba(0, 240, 255, 0.7), 0 0 10px rgba(0, 240, 255, 0.5), 0 0 15px rgba(0, 240, 255, 0.3);
      }

      .light-shadow-sky {
        text-shadow: 0 0 8px rgba(14, 165, 233, 0.4);
      }

      .neon-glow-green {
        text-shadow: 0 0 5px rgba(0, 230, 118, 0.7), 0 0 10px rgba(0, 230, 118, 0.5), 0 0 15px rgba(0, 230, 118, 0.3);
      }

      .light-shadow-emerald {
        text-shadow: 0 0 8px rgba(16, 185, 129, 0.4);
      }

      .neon-border-cyan {
        box-shadow: 0 0 2px #fff, 0 0 4px #fff, 0 0 6px #00f0ff, 0 0 10px #00f0ff, 0 0 12px #00f0ff, 0 0 15px #00f0ff, 0 0 20px #00f0ff;
      }

      .line-clamp-2 {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        line-clamp: 2;
        -webkit-box-orient: vertical;
      }
    </style>
    <script type="importmap">
{
  "imports": {
    "react/": "https://esm.sh/react@^19.1.1/",
    "react": "https://esm.sh/react@^19.1.1",
    "react-dom/": "https://esm.sh/react-dom@^19.1.1/",
    "react-dom/client": "https://esm.sh/react-dom@^19.1.1/client",
    "@google/genai": "https://esm.sh/@google/genai@^1.17.0",
    "lucide-react": "https://esm.sh/lucide-react@^0.542.0",
    "react-markdown": "https://esm.sh/react-markdown@9.0.1",
    "remark-gfm": "https://esm.sh/remark-gfm@4.0.0",
    "react-syntax-highlighter": "https://esm.sh/react-syntax-highlighter@15.5.0",
    "react-syntax-highlighter/dist/esm/styles/prism": "https://esm.sh/react-syntax-highlighter@15.5.0/dist/esm/styles/prism"
  }
}
</script>
    <link rel="stylesheet" href="/index.css">
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/index.tsx"></script>
  </body>

</html>

/// index.tsx ///
import * as React from 'react';
import { createRoot } from 'react-dom/client';
import Root from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = createRoot(rootElement);
root.render(
  <React.StrictMode>
    <Root />
  </React.StrictMode>
);

/// lib/idb.ts ///
const DB_NAME = 'project-analyzer-db';
const DB_VERSION = 1;
const STORE_NAME = 'keyval';

let dbPromise: Promise<IDBDatabase> | null = null;

/**
 * Creates and initializes the IndexedDB database and object store.
 * This function handles the initial setup and version upgrades.
 * @returns A promise that resolves with the IDBDatabase instance.
 */
function createDB(): Promise<IDBDatabase> {
  if (dbPromise) {
    return dbPromise;
  }

  dbPromise = new Promise((resolve, reject) => {
    if (typeof indexedDB === 'undefined') {
        reject('IndexedDB is not supported in this browser.');
        return;
    }

    const request = indexedDB.open(DB_NAME, DB_VERSION);

    request.onupgradeneeded = (event) => {
      const db = (event.target as IDBOpenDBRequest).result;
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME);
      }
    };

    request.onsuccess = (event) => {
      resolve((event.target as IDBOpenDBRequest).result);
    };

    request.onerror = (event) => {
      console.error('IndexedDB error:', (event.target as IDBOpenDBRequest).error);
      reject('IndexedDB error');
      dbPromise = null; // Reset promise on error
    };
  });

  return dbPromise;
}

/**
 * Retrieves a value from the IndexedDB store by its key.
 * @template T The expected type of the value.
 * @param {string} key The key of the item to retrieve.
 * @returns {Promise<T | undefined>} A promise that resolves with the value, or undefined if not found.
 */
export async function get<T>(key: string): Promise<T | undefined> {
  const db = await createDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORE_NAME, 'readonly');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.get(key);

    request.onsuccess = () => {
      resolve(request.result as T);
    };

    request.onerror = () => {
      console.error('Error getting data from IndexedDB:', request.error);
      reject(request.error);
    };
  });
}

/**
 * Stores a value in the IndexedDB store with a given key.
 * @param {string} key The key to store the value under.
 * @param {any} value The value to be stored.
 * @returns {Promise<void>} A promise that resolves when the operation is complete.
 */
export async function set(key: string, value: any): Promise<void> {
  const db = await createDB();
  return new Promise((resolve, reject) => {
    const transaction = db.transaction(STORE_NAME, 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.put(value, key);

    request.onsuccess = () => {
      resolve();
    };

    request.onerror = () => {
      console.error('Error setting data in IndexedDB:', request.error);
      reject(request.error);
    };
  });
}

/// metadata.json ///
{
  "name": "GemX Analyzer",
  "description": "Uma aplicação web que utiliza a API Gemini para analisar a documentação de um projeto de software e fornecer sugestões sobre sua continuidade e viabilidade. O usuário pode colar a documentação, e a IA gera uma análise estruturada.",
  "requestFramePermissions": []
}

/// package.json ///
{
  "name": "gemx-analyzer",
  "private": false,
  "version": "2.0.0",
  "description": "AI prompt crafting tool that transforms raw ideas into professional prompts. Part of Kubex Ecosystem — modular, open-source tools following principles of radical simplicity and no lock-in.",
  "keywords": [
    "ai",
    "prompts",
    "prompt-engineering",
    "kubex",
    "open-source",
    "no-lock-in",
    "modular",
    "react",
    "typescript"
  ],
  "markdown": "github",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kubex-ecosystem/gemx/analyzer.git"
  },
  "author": "Rafael Mori <faelmori@live.com>",
  "license": "MIT",
  "homepage": "https://kubex.world",
  "readme": "https://github.com/kubex-ecosystem/gemx/analyzer/README.md",
  "bugs": {
    "url": "https://github.com/kubex-ecosystem/gemx/analyzer/issues"
  },
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "build:static": "vite build --mode production",
    "serve": "vite preview --port 4173 --host"
  },
  "dependencies": {
    "lucide-react": "^0.542.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-markdown": "9.0.1",
    "react-syntax-highlighter": "^15.6.6",
    "remark-gfm": "4.0.0"
  },
  "devDependencies": {
    "@google/genai": "^1.18.0",
    "@types/node": "^22.14.0",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.1.9",
    "@types/react-syntax-highlighter": "^15.5.13",
    "framer-motion": "^12.23.12",
    "typescript": "~5.8.2",
    "vite": "^6.2.0"
  },
  "browserslist": [
    "last 1 version",
    "> 1%",
    "maintained node versions",
    "not dead"
  ],
  "browser": {
    "fs": false,
    "path": false,
    "os": false,
    "child_process": false
  },
  "engines": {
    "node": ">=22"
  },
  "main": "src/index.tsx",
  "files": [
    "src",
    "services",
    "types.d.ts",
    "index.html",
    "index.css",
    "assets",
    "package.json",
    "README.md",
    "LICENSE"
  ]
}

/// public/locales/en-US/translation.json ///

{
  "localeCode": "en-US",
  "header": {
    "title": "GemX Analyzer",
    "subtitle": "Harnessing the power of Gemini to provide deep insights into your software projects. Paste your documentation, and let our AI deliver a structured analysis on viability, improvements, and next steps."
  },
  "nav": {
    "dashboard": "Dashboard",
    "newAnalysis": "New Analysis",
    "kanban": "Kanban",
    "history": "History"
  },
  "actions": {
    "analyzeProject": "Analyze Project",
    "analyzing": "Analyzing",
    "uploadFile": "Upload File",
    "showExample": "Show me an example",
    "exitExample": "Exit Example Mode",
    "createKanbanBoard": "Create Kanban Board",
    "backToAnalysis": "Back to Analysis",
    "view": "View",
    "load": "Load",
    "showMore": "Show More"
  },
  "input": {
    "title": "New Project Analysis",
    "subtitle": "Paste your project documentation, code snippets, or any relevant text below.",
    "placeholder": "For example: paste your README.md, architecture diagrams description, release notes, or even pieces of code...",
    "analysisType": {
      "title": "Select Analysis Type"
    },
    "exampleMode": {
      "notice": "You are in example mode. The text below is for demonstration purposes only."
    }
  },
  "analysisTypes": {
    "GENERAL": {
      "label": "General Viability",
      "description": "Overall assessment of project health, viability, and ROI."
    },
    "SECURITY": {
      "label": "Security Audit",
      "description": "Identify potential vulnerabilities and security best practices."
    },
    "SCALABILITY": {
      "label": "Scalability Review",
      "description": "Analyze architecture for performance bottlenecks."
    },
    "CODE_QUALITY": {
      "label": "Code Quality",
      "description": "Evaluate maintainability, structure, and best practices."
    }
  },
  "results": {
    "title": "Analysis for: {projectName}",
    "summary": {
      "title": "Executive Summary"
    },
    "viability": {
      "title": "Project Viability",
      "scoreLabel": "Score",
      "assessmentLabel": "Assessment",
      "scoreEvolution": "Score Evolution"
    },
    "roi": {
      "title": "ROI & Effort Analysis",
      "assessmentLabel": "Assessment",
      "effortLabel": "Estimated Effort",
      "gainsLabel": "Potential Gains"
    },
    "strengths": {
      "title": "Key Strengths"
    },
    "improvements": {
      "title": "Suggested Improvements",
      "impact": "Impact",
      "businessImpact": "Business Impact"
    },
    "nextSteps": {
      "title": "Next Steps",
      "shortTerm": "Short-Term",
      "longTerm": "Long-Term"
    },
    "maturity": {
      "title": "Project Maturity"
    },
    "exampleModeNotice": "You are viewing an example analysis. To analyze your own project, start a new analysis.",
    "usageMetadata": {
      "ariaLabel": "Analysis Token Usage",
      "total": "Total",
      "tokens": "tokens"
    }
  },
  "maturityLevels": {
    "PROTOTYPE": "Prototype",
    "MVP": "MVP",
    "PRODUCTION": "Production",
    "OPTIMIZED": "Optimized"
  },
  "feedback": {
    "question": "Was this analysis helpful?",
    "thanks": "Thank you for your feedback!",
    "useful": "Useful",
    "notUseful": "Not useful"
  },
  "common": {
    "priority": "Priority",
    "difficulty": "Difficulty",
    "description": "Description"
  },
  "priority": {
    "High": "High",
    "Medium": "Medium",
    "Low": "Low"
  },
  "difficulty": {
    "High": "High",
    "Medium": "Medium",
    "Low": "Low"
  },
  "effort": {
    "High": "High",
    "Medium": "Medium",
    "Low": "Low"
  },
  "kanban": {
    "title": "Kanban Board",
    "subtitle": "Organize improvements and next steps into a workflow.",
    "columns": {
      "backlog": "Backlog",
      "todo": "To Do",
      "inProgress": "In Progress",
      "done": "Done"
    }
  },
  "history": {
    "title": "Analysis History",
    "exampleMode": "Example Mode",
    "compareInstruction": "Select two analyses of the same type to compare their evolution.",
    "typeLabel": "Type",
    "dateLabel": "Date",
    "deleteAriaLabel": "Delete history item",
    "scoreTrendTitle": "Viability Score Trend",
    "tokenUsageTitle": "Token Usage Trend",
    "empty": {
      "title": "No History Yet",
      "subtitle": "Your past analyses will be stored here for future reference."
    },
    "clear": "Clear History",
    "compare": "Compare Selected"
  },
  "evolution": {
    "title": "Evolution Analysis",
    "subtitle": "Comparing two analyses for {projectName} ({analysisType})",
    "summary": "Evolution Summary",
    "metrics": {
      "viabilityScore": "Viability Score",
      "strengths": "Strengths",
      "improvements": "Improvements"
    },
    "usageAriaLabel": "Comparison Token Usage Information",
    "comparisonCost": "Comparison Cost",
    "breakdown": {
      "title": "Improvements Breakdown",
      "achievements": "Achievements",
      "noResolved": "No resolved improvements identified.",
      "newChallenges": "New Challenges",
      "noNew": "No new challenges identified.",
      "technicalDebt": "Technical Debt",
      "noPersistent": "No persistent technical debt found."
    }
  },
  "settings": {
    "title": "Settings",
    "monthlyTokenLimit": "Monthly Token Usage Limit",
    "limitDescription": "Set a monthly token limit to manage costs. Set to 0 for unlimited.",
    "currentUsage": "Current Usage",
    "usageForMonth": "Usage for {month}",
    "resetUsage": "Reset Current Usage",
    "disclaimer": "This application communicates with the Google Gemini API. Standard API costs may apply based on your usage.",
    "saveAndClose": "Save & Close",
    "tokenLimitError": "Limit cannot exceed {limit}."
  },
  "profile": {
    "title": "User Profile",
    "nameLabel": "Your Name",
    "namePlaceholder": "Enter your name...",
    "apiKeyLabel": "Gemini API Key",
    "apiKeyPlaceholder": "Paste your API key here...",
    "apiKeyNotice": "Your API key is required to make requests. It is stored securely in your browser and is never sent to our servers.",
    "save": "Save",
    "notificationSuccess": "Profile updated successfully!"
  },
  "tokenUsage": {
    "title": "Token Usage Warning",
    "usageText": "You have consumed {consumed} of {limit} tokens ({percentage}%).",
    "monthlyUsage": "Monthly Usage"
  },
  "loader": {
    "message": "Analyzing context...",
    "subMessage": "This might take a moment.",
    "ariaLabel": "Analysis in progress",
    "steps": [
      "Analyzing project structure...",
      "Identifying key strengths...",
      "Formulating improvement suggestions...",
      "Calculating viability score...",
      "Finalizing report..."
    ]
  },
  "notifications": {
    "error": {
      "emptyContext": "Project context cannot be empty.",
      "analysisFailed": "The analysis failed. Please try again.",
      "compareSelection": "Please select exactly two history items to compare.",
      "compareFailed": "The comparison failed. Please try again.",
      "missingApiKey": "Your Gemini API key is missing. Please add it to your profile to proceed."
    }
  },
  "confirmations": {
    "clearHistory": "Are you sure you want to clear the entire analysis history? This action cannot be undone."
  },
  "network": {
    "offline": "You are currently offline."
  },
  "auth": {
    "logout": "Log out"
  },
  "landing": {
    "cta": "Start Analyzing Now",
    "featuresTitle": "Powerful Analysis Capabilities",
    "featuresSubtitle": "Go beyond simple linting. Get deep, actionable insights into your project's core.",
    "dynamicPhrases": [
      "Unlock Your Project's Potential",
      "From Code to Clarity",
      "AI-Powered Project Insights"
    ],
    "featureDetails": {
      "GENERAL": "Provides a 360-degree view of your project. It assesses the overall health, identifies strengths and weaknesses, calculates a viability score, and performs a high-level ROI analysis. It's the perfect starting point to understand where your project stands and its potential for success.",
      "SECURITY": "Performs a specialized audit focused on security. It scans for common vulnerabilities (like injection flaws, broken authentication), checks for best practice adherence, and suggests concrete mitigation strategies. This analysis helps you proactively secure your application against threats.",
      "SCALABILITY": "Examines the project's architecture and design for its ability to handle growth. It identifies potential performance bottlenecks, evaluates database schemas, and suggests strategies for horizontal and vertical scaling. Ensure your application is ready to grow with your user base.",
      "CODE_QUALITY": "Dives deep into your codebase to evaluate its quality and maintainability. It analyzes code structure, complexity, adherence to coding standards (like DRY, SOLID), and suggests refactoring opportunities. A clean codebase is crucial for long-term development and team productivity."
    }
  },
  "dashboard": {
    "scoreEvolution": "Score Evolution Trend",
    "kpi": {
      "totalAnalyses": "Total Analyses",
      "totalAnalyses_description": "Number of reports generated",
      "averageScore": "Average Score",
      "averageScore_description": "Viability score across all projects",
      "commonType": "Most Common Type",
      "commonType_description": "Most frequent analysis type",
      "tokensThisMonth": "Tokens This Month",
      "tokensThisMonth_description": "API usage in the current month"
    },
    "projects": {
      "title": "Your Projects",
      "subtitle": "Recent analyses for your projects.",
      "analysisCount": "{count, plural, one {# analysis} other {# analyses}}"
    },
    "emptyState": {
      "cta": "Start Your First Analysis",
      "title": "Welcome to GemX Analyzer!",
      "subtitle": "You haven't analyzed any projects yet. Click the button above to begin and see your dashboard populate with valuable insights.",
      "kpi_total_description": "Tracks your report count",
      "kpi_score_description": "Aggregates viability scores",
      "kpi_type_description": "Highlights your focus areas",
      "kpi_tokens_description": "Monitors your API usage"
    }
  },
  "export": {
    "json": "Export JSON",
    "log": "Export Log",
    "jsonAriaLabel": "Export analysis as a JSON file",
    "logAriaLabel": "Export analysis as a text log file",
    "logContent": {
      "mainTitle": "Project Analysis Report"
    }
  },
  "example": {
    "projectContext": "The project context from the `constants` file would be here.",
    "kortex": {
      "projectName": "Kortex Dashboard",
      "summary": "Kortex is a robust, production-ready DevOps monitoring dashboard that has successfully transitioned from mock data to real-time API integrations. Its architecture is modern, leveraging Next.js 15 and TypeScript, with a focus on resilience and real-time updates via WebSockets. The project demonstrates a high level of technical maturity, strong developer experience, and a clear roadmap, indicating excellent viability for continued development and enterprise adoption.",
      "strengths": [
        "**Production-Ready Architecture:** Successfully desmocked, with real-time data from GitHub, Azure, and Kubernetes.",
        "**Resilient & Performant:** Implements WebSockets, auto-reconnection, and graceful fallbacks for API unavailability.",
        "**Excellent Developer Experience:** 100% TypeScript with strict typing, a complete mock API server, and hot reloading.",
        "**High Code Quality:** Modular architecture, zero compilation errors, and adherence to modern best practices.",
        "**Clear and Ambitious Roadmap:** Well-defined future goals, including multi-cloud support and advanced analytics."
      ],
      "improvements": {
        "i1": {
          "title": "Implement Authentication and Authorization",
          "description": "The current version lacks a security layer to control access. Implementing a robust authentication (e.g., OAuth 2.0) and authorization system is critical before exposing sensitive DevOps data.",
          "businessImpact": "Prevents unauthorized access to critical infrastructure data, ensuring security and compliance."
        },
        "i2": {
          "title": "Expand Monitoring with Production APIs",
          "description": "The dashboard is connected to several sources but needs integration with production APIs like StatusRafa and Kosmos to provide comprehensive, real-world value.",
          "businessImpact": "Unlocks the core business value of the dashboard by providing a single pane of glass for all critical systems."
        },
        "i3": {
          "title": "Develop an Advanced Alerting System",
          "description": "The dashboard monitors data but doesn't yet proactively notify users of anomalies. An alerting system (e.g., email, Slack notifications) is needed for critical events.",
          "businessImpact": "Reduces system downtime and incident response time by proactively alerting engineers to issues."
        }
      },
      "nextSteps": {
        "shortTerm": {
          "s1": {
            "title": "Integrate with a User Management Service",
            "description": "Choose and implement a service like Auth0, Firebase Auth, or a custom solution to handle user identities and roles."
          },
          "s2": {
            "title": "Add API Keys and Secrets Management",
            "description": "Securely store and manage API keys for production services using a vault or environment variable management system."
          }
        },
        "longTerm": {
          "l1": {
            "title": "Build a Configurable Alerting Engine",
            "description": "Design a system where users can define custom alert rules, thresholds, and notification channels."
          },
          "l2": {
            "title": "Explore Multi-Cloud Integration (AWS, GCP)",
            "description": "Develop a strategy and architecture to extend monitoring capabilities to other major cloud providers beyond the current stack."
          }
        }
      },
      "viability": {
        "assessment": "The project has extremely high viability. It solves a clear business need, is built on a modern and scalable tech stack, and has a well-defined plan for growth. The transition from mock to real data is a major de-risking event."
      },
      "roi": {
        "assessment": "The potential ROI is significant. By centralizing monitoring and providing real-time insights, Kortex can drastically reduce engineering time spent on diagnostics, improve system uptime, and accelerate incident response.",
        "gains": {
          "g1": "Reduced Mean Time to Resolution (MTTR) for incidents.",
          "g2": "Increased developer productivity by centralizing data.",
          "g3": "Improved decision-making with a holistic view of system health.",
          "g4": "Proactive issue detection before they impact users."
        }
      },
      "maturity": {
        "assessment": "The project is at a 'Production' level. It has a stable core, real data integration, and robust error handling. It's ready for initial user adoption, with clear steps outlined to reach a fully optimized state."
      }
    },
    "history": {
      "kortex": {
        "h1": {
          "assessment": "Viability dropped slightly due to the discovery of complexities in API integration, but the project remains on a positive trajectory. Now considered a strong MVP."
        },
        "h2": {
          "assessment": "The project shows strong potential with a solid architecture, though it still relies on mock data. The core features are well-defined, making it a viable MVP."
        },
        "h3": {
          "summary": "This is a specialized security analysis of the Kortex prototype. It focuses on identifying potential vulnerabilities in the planned architecture and dependencies.",
          "assessment": "The planned architecture has some security gaps that need to be addressed before production. Viability is contingent on implementing proper authentication and data handling."
        },
        "h4": {
          "projectName": "Kortex Prototype",
          "assessment": "The project is in its early stages but shows promise. The core concept is solid, but significant work is needed to move beyond the prototype phase."
        }
      },
      "orion": {
        "projectName": "Orion UI Kit",
        "summary": "Analysis of the Orion UI Kit, a component library. It focuses on code quality, reusability, and documentation.",
        "assessment": "The component library is well-structured and documented, showing high viability for adoption within the organization.",
        "maturityAssessment": "The library is highly optimized, with excellent code quality, comprehensive test coverage, and a streamlined contribution process."
      }
    }
  }
}

/// public/locales/pt-BR/translation.json ///

{
  "localeCode": "pt-BR",
  "header": {
    "title": "Analisador GemX",
    "subtitle": "Utilizando o poder do Gemini para fornecer insights profundos sobre seus projetos de software. Cole sua documentação e deixe nossa IA entregar uma análise estruturada sobre viabilidade, melhorias e próximos passos."
  },
  "nav": {
    "dashboard": "Painel",
    "newAnalysis": "Nova Análise",
    "kanban": "Kanban",
    "history": "Histórico"
  },
  "actions": {
    "analyzeProject": "Analisar Projeto",
    "analyzing": "Analisando",
    "uploadFile": "Carregar Arquivo",
    "showExample": "Mostre-me um exemplo",
    "exitExample": "Sair do Modo Exemplo",
    "createKanbanBoard": "Criar Quadro Kanban",
    "backToAnalysis": "Voltar para Análise",
    "view": "Ver",
    "load": "Carregar",
    "showMore": "Mostrar Mais"
  },
  "input": {
    "title": "Nova Análise de Projeto",
    "subtitle": "Cole a documentação do seu projeto, trechos de código ou qualquer texto relevante abaixo.",
    "placeholder": "Por exemplo: cole seu README.md, descrição de diagramas de arquitetura, notas de lançamento ou até mesmo pedaços de código...",
    "analysisType": {
      "title": "Selecione o Tipo de Análise"
    },
    "exampleMode": {
      "notice": "Você está no modo de exemplo. O texto abaixo é apenas para demonstração."
    }
  },
  "analysisTypes": {
    "GENERAL": {
      "label": "Viabilidade Geral",
      "description": "Avaliação geral da saúde do projeto, viabilidade e ROI."
    },
    "SECURITY": {
      "label": "Auditoria de Segurança",
      "description": "Identifique potenciais vulnerabilidades e melhores práticas de segurança."
    },
    "SCALABILITY": {
      "label": "Revisão de Escalabilidade",
      "description": "Analise a arquitetura em busca de gargalos de desempenho."
    },
    "CODE_QUALITY": {
      "label": "Qualidade de Código",
      "description": "Avalie a manutenibilidade, estrutura e melhores práticas."
    }
  },
  "results": {
    "title": "Análise para: {projectName}",
    "summary": {
      "title": "Resumo Executivo"
    },
    "viability": {
      "title": "Viabilidade do Projeto",
      "scoreLabel": "Pontuação",
      "assessmentLabel": "Avaliação",
      "scoreEvolution": "Evolução da Pontuação"
    },
    "roi": {
      "title": "Análise de ROI e Esforço",
      "assessmentLabel": "Avaliação",
      "effortLabel": "Esforço Estimado",
      "gainsLabel": "Ganhos Potenciais"
    },
    "strengths": {
      "title": "Pontos Fortes"
    },
    "improvements": {
      "title": "Melhorias Sugeridas",
      "impact": "Impacto",
      "businessImpact": "Impacto de Negócio"
    },
    "nextSteps": {
      "title": "Próximos Passos",
      "shortTerm": "Curto Prazo",
      "longTerm": "Longo Prazo"
    },
    "maturity": {
      "title": "Maturidade do Projeto"
    },
    "exampleModeNotice": "Você está visualizando uma análise de exemplo. Para analisar seu próprio projeto, inicie uma nova análise.",
    "usageMetadata": {
      "ariaLabel": "Uso de Tokens da Análise",
      "total": "Total",
      "tokens": "tokens"
    }
  },
  "maturityLevels": {
    "PROTOTYPE": "Protótipo",
    "MVP": "MVP",
    "PRODUCTION": "Produção",
    "OPTIMIZED": "Otimizado"
  },
  "feedback": {
    "question": "Esta análise foi útil?",
    "thanks": "Obrigado pelo seu feedback!",
    "useful": "Útil",
    "notUseful": "Não útil"
  },
  "common": {
    "priority": "Prioridade",
    "difficulty": "Dificuldade",
    "description": "Descrição"
  },
  "priority": {
    "High": "Alta",
    "Medium": "Média",
    "Low": "Baixa"
  },
  "difficulty": {
    "High": "Alta",
    "Medium": "Média",
    "Low": "Baixa"
  },
  "effort": {
    "High": "Alto",
    "Medium": "Médio",
    "Low": "Baixo"
  },
  "kanban": {
    "title": "Quadro Kanban",
    "subtitle": "Organize melhorias e próximos passos em um fluxo de trabalho.",
    "columns": {
      "backlog": "Backlog",
      "todo": "A Fazer",
      "inProgress": "Em Progresso",
      "done": "Concluído"
    }
  },
  "history": {
    "title": "Histórico de Análises",
    "exampleMode": "Modo Exemplo",
    "compareInstruction": "Selecione duas análises do mesmo tipo para comparar sua evolução.",
    "typeLabel": "Tipo",
    "dateLabel": "Data",
    "deleteAriaLabel": "Excluir item do histórico",
    "scoreTrendTitle": "Tendência da Pontuação de Viabilidade",
    "tokenUsageTitle": "Tendência de Uso de Tokens",
    "empty": {
      "title": "Nenhum Histórico Ainda",
      "subtitle": "Suas análises passadas serão armazenadas aqui para referência futura."
    },
    "clear": "Limpar Histórico",
    "compare": "Comparar Selecionados"
  },
  "evolution": {
    "title": "Análise de Evolução",
    "subtitle": "Comparando duas análises para {projectName} ({analysisType})",
    "summary": "Resumo da Evolução",
    "metrics": {
      "viabilityScore": "Pontuação de Viabilidade",
      "strengths": "Pontos Fortes",
      "improvements": "Melhorias"
    },
    "usageAriaLabel": "Informação de Uso de Tokens da Comparação",
    "comparisonCost": "Custo da Comparação",
    "breakdown": {
      "title": "Detalhamento das Melhorias",
      "achievements": "Conquistas",
      "noResolved": "Nenhuma melhoria resolvida identificada.",
      "newChallenges": "Novos Desafios",
      "noNew": "Nenhum novo desafio identificado.",
      "technicalDebt": "Débito Técnico",
      "noPersistent": "Nenhum débito técnico persistente encontrado."
    }
  },
  "settings": {
    "title": "Configurações",
    "monthlyTokenLimit": "Limite Mensal de Uso de Tokens",
    "limitDescription": "Defina um limite mensal de tokens para gerenciar custos. Defina como 0 para ilimitado.",
    "currentUsage": "Uso Atual",
    "usageForMonth": "Uso para {month}",
    "resetUsage": "Redefinir Uso Atual",
    "disclaimer": "Esta aplicação se comunica com a API Google Gemini. Custos de API padrão podem ser aplicados com base no seu uso.",
    "saveAndClose": "Salvar e Fechar",
    "tokenLimitError": "O limite não pode exceder {limit}."
  },
  "profile": {
    "title": "Perfil de Usuário",
    "nameLabel": "Seu Nome",
    "namePlaceholder": "Digite seu nome...",
    "apiKeyLabel": "Chave de API do Gemini",
    "apiKeyPlaceholder": "Cole sua chave de API aqui...",
    "apiKeyNotice": "Sua chave de API é necessária para fazer requisições. Ela é armazenada com segurança no seu navegador e nunca é enviada para nossos servidores.",
    "save": "Salvar",
    "notificationSuccess": "Perfil atualizado com sucesso!"
  },
  "tokenUsage": {
    "title": "Aviso de Uso de Tokens",
    "usageText": "Você consumiu {consumed} de {limit} tokens ({percentage}%).",
    "monthlyUsage": "Uso Mensal"
  },
  "loader": {
    "message": "Analisando contexto...",
    "subMessage": "Isso pode levar um momento.",
    "ariaLabel": "Análise em progresso",
    "steps": [
      "Analisando estrutura do projeto...",
      "Identificando pontos fortes...",
      "Formulando sugestões de melhoria...",
      "Calculando pontuação de viabilidade...",
      "Finalizando relatório..."
    ]
  },
  "notifications": {
    "error": {
      "emptyContext": "O contexto do projeto não pode estar vazio.",
      "analysisFailed": "A análise falhou. Por favor, tente novamente.",
      "compareSelection": "Por favor, selecione exatamente dois itens do histórico para comparar.",
      "compareFailed": "A comparação falhou. Por favor, tente novamente.",
      "missingApiKey": "Sua chave de API do Gemini está faltando. Por favor, adicione-a ao seu perfil para prosseguir."
    }
  },
  "confirmations": {
    "clearHistory": "Tem certeza de que deseja limpar todo o histórico de análises? Esta ação não pode ser desfeita."
  },
  "network": {
    "offline": "Você está offline no momento."
  },
  "auth": {
    "logout": "Sair"
  },
  "landing": {
    "cta": "Comece a Analisar Agora",
    "featuresTitle": "Capacidades de Análise Poderosas",
    "featuresSubtitle": "Vá além da simples verificação. Obtenha insights profundos e acionáveis sobre o núcleo do seu projeto.",
    "dynamicPhrases": [
      "Desbloqueie o Potencial do Seu Projeto",
      "Do Código à Clareza",
      "Insights de Projeto com IA"
    ],
    "featureDetails": {
      "GENERAL": "Fornece uma visão de 360 graus do seu projeto. Avalia a saúde geral, identifica pontos fortes e fracos, calcula uma pontuação de viabilidade e realiza uma análise de ROI de alto nível. É o ponto de partida perfeito para entender onde seu projeto está e seu potencial de sucesso.",
      "SECURITY": "Realiza uma auditoria especializada focada em segurança. Procura por vulnerabilidades comuns (como falhas de injeção, autenticação quebrada), verifica a adesão às melhores práticas e sugere estratégias de mitigação concretas. Esta análise ajuda a proteger proativamente sua aplicação contra ameaças.",
      "SCALABILITY": "Examina a arquitetura e o design do projeto quanto à sua capacidade de lidar com o crescimento. Identifica potenciais gargalos de desempenho, avalia esquemas de banco de dados e sugere estratégias para escalonamento horizontal e vertical. Garanta que sua aplicação esteja pronta para crescer com sua base de usuários.",
      "CODE_QUALITY": "Mergulha fundo em sua base de código para avaliar sua qualidade e manutenibilidade. Analisa a estrutura do código, complexidade, adesão a padrões de codificação (como DRY, SOLID) e sugere oportunidades de refatoração. Um código limpo é crucial para o desenvolvimento a longo prazo e a produtividade da equipe."
    }
  },
  "dashboard": {
    "scoreEvolution": "Tendência da Evolução da Pontuação",
    "kpi": {
      "totalAnalyses": "Total de Análises",
      "totalAnalyses_description": "Número de relatórios gerados",
      "averageScore": "Pontuação Média",
      "averageScore_description": "Pontuação de viabilidade entre todos os projetos",
      "commonType": "Tipo Mais Comum",
      "commonType_description": "Tipo de análise mais frequente",
      "tokensThisMonth": "Tokens Este Mês",
      "tokensThisMonth_description": "Uso da API no mês atual"
    },
    "projects": {
      "title": "Seus Projetos",
      "subtitle": "Análises recentes para seus projetos.",
      "analysisCount": "{count, plural, one {# análise} other {# análises}}"
    },
    "emptyState": {
      "cta": "Comece Sua Primeira Análise",
      "title": "Bem-vindo ao Analisador GemX!",
      "subtitle": "Você ainda não analisou nenhum projeto. Clique no botão acima para começar e ver seu painel ser preenchido com insights valiosos.",
      "kpi_total_description": "Rastreia sua contagem de relatórios",
      "kpi_score_description": "Agrega pontuações de viabilidade",
      "kpi_type_description": "Destaca suas áreas de foco",
      "kpi_tokens_description": "Monitora seu uso da API"
    }
  },
  "export": {
    "json": "Exportar JSON",
    "log": "Exportar Log",
    "jsonAriaLabel": "Exportar análise como um arquivo JSON",
    "logAriaLabel": "Exportar análise como um arquivo de log de texto",
    "logContent": {
      "mainTitle": "Relatório de Análise de Projeto"
    }
  },
  "example": {
    "projectContext": "O contexto do projeto do arquivo `constants` estaria aqui.",
    "kortex": {
      "projectName": "Painel Kortex",
      "summary": "Kortex é um painel de monitoramento DevOps robusto e pronto para produção que transitou com sucesso de dados mockados para integrações de API em tempo real. Sua arquitetura é moderna, utilizando Next.js 15 e TypeScript, com foco em resiliência e atualizações em tempo real via WebSockets. O projeto demonstra um alto nível de maturidade técnica, forte experiência de desenvolvedor e um roadmap claro, indicando excelente viabilidade para desenvolvimento contínuo e adoção corporativa.",
      "strengths": [
        "**Arquitetura Pronta para Produção:** 'Desmockado' com sucesso, com dados em tempo real do GitHub, Azure e Kubernetes.",
        "**Resiliente e Performático:** Implementa WebSockets, reconexão automática e fallbacks graciosos para indisponibilidade de API.",
        "**Excelente Experiência de Desenvolvedor:** 100% TypeScript com tipagem estrita, um servidor de API mock completo e hot reloading.",
        "**Alta Qualidade de Código:** Arquitetura modular, zero erros de compilação e adesão às melhores práticas modernas.",
        "**Roadmap Claro e Ambicioso:** Metas futuras bem definidas, incluindo suporte multi-cloud e análises avançadas."
      ],
      "improvements": {
        "i1": {
          "title": "Implementar Autenticação e Autorização",
          "description": "A versão atual carece de uma camada de segurança para controlar o acesso. Implementar um sistema robusto de autenticação (ex: OAuth 2.0) e autorização é crítico antes de expor dados sensíveis de DevOps.",
          "businessImpact": "Previne o acesso não autorizado a dados críticos de infraestrutura, garantindo segurança e conformidade."
        },
        "i2": {
          "title": "Expandir Monitoramento com APIs de Produção",
          "description": "O painel está conectado a várias fontes, mas precisa de integração com APIs de produção como StatusRafa e Kosmos para fornecer valor abrangente e do mundo real.",
          "businessImpact": "Desbloqueia o valor de negócio principal do painel, fornecendo uma visão única para todos os sistemas críticos."
        },
        "i3": {
          "title": "Desenvolver um Sistema de Alerta Avançado",
          "description": "O painel monitora dados, mas ainda não notifica proativamente os usuários sobre anomalias. Um sistema de alerta (ex: e-mail, notificações no Slack) é necessário para eventos críticos.",
          "businessImpact": "Reduz o tempo de inatividade do sistema e o tempo de resposta a incidentes, alertando proativamente os engenheiros sobre problemas."
        }
      },
      "nextSteps": {
        "shortTerm": {
          "s1": {
            "title": "Integrar com um Serviço de Gerenciamento de Usuários",
            "description": "Escolha e implemente um serviço como Auth0, Firebase Auth, ou uma solução customizada para lidar com identidades e papéis de usuários."
          },
          "s2": {
            "title": "Adicionar Gerenciamento de Chaves de API e Segredos",
            "description": "Armazene e gerencie com segurança as chaves de API para serviços de produção usando um cofre ou sistema de gerenciamento de variáveis de ambiente."
          }
        },
        "longTerm": {
          "l1": {
            "title": "Construir um Motor de Alerta Configurável",
            "description": "Projete um sistema onde os usuários possam definir regras de alerta personalizadas, limiares e canais de notificação."
          },
          "l2": {
            "title": "Explorar Integração Multi-Cloud (AWS, GCP)",
            "description": "Desenvolva uma estratégia e arquitetura para estender as capacidades de monitoramento para outros grandes provedores de nuvem além da pilha atual."
          }
        }
      },
      "viability": {
        "assessment": "O projeto tem viabilidade extremamente alta. Ele resolve uma necessidade de negócio clara, é construído sobre uma pilha de tecnologia moderna e escalável, e tem um plano bem definido para crescimento. A transição de dados mockados para dados reais é um grande evento de redução de risco."
      },
      "roi": {
        "assessment": "O ROI potencial é significativo. Ao centralizar o monitoramento e fornecer insights em tempo real, o Kortex pode reduzir drasticamente o tempo de engenharia gasto em diagnósticos, melhorar o tempo de atividade do sistema e acelerar a resposta a incidentes.",
        "gains": {
          "g1": "Redução do Tempo Médio para Resolução (MTTR) de incidentes.",
          "g2": "Aumento da produtividade do desenvolvedor ao centralizar dados.",
          "g3": "Melhora na tomada de decisões com uma visão holística da saúde do sistema.",
          "g4": "Detecção proativa de problemas antes que eles impactem os usuários."
        }
      },
      "maturity": {
        "assessment": "O projeto está no nível de 'Produção'. Possui um núcleo estável, integração de dados reais e tratamento de erros robusto. Está pronto para a adoção inicial de usuários, com passos claros delineados para alcançar um estado totalmente otimizado."
      }
    },
    "history": {
      "kortex": {
        "h1": {
          "assessment": "A viabilidade caiu ligeiramente devido à descoberta de complexidades na integração da API, mas o projeto permanece em uma trajetória positiva. Agora considerado um MVP forte."
        },
        "h2": {
          "assessment": "O projeto mostra um forte potencial com uma arquitetura sólida, embora ainda dependa de dados mockados. As funcionalidades principais estão bem definidas, tornando-o um MVP viável."
        },
        "h3": {
          "summary": "Esta é uma análise de segurança especializada do protótipo Kortex. Foca na identificação de vulnerabilidades potenciais na arquitetura e dependências planejadas.",
          "assessment": "A arquitetura planejada tem algumas lacunas de segurança que precisam ser abordadas antes da produção. A viabilidade depende da implementação de autenticação e tratamento de dados adequados."
        },
        "h4": {
          "projectName": "Protótipo Kortex",
          "assessment": "O projeto está em seus estágios iniciais, mas é promissor. O conceito central é sólido, mas um trabalho significativo é necessário para ir além da fase de protótipo."
        }
      },
      "orion": {
        "projectName": "Orion UI Kit",
        "summary": "Análise do Orion UI Kit, uma biblioteca de componentes. Foca na qualidade do código, reutilização e documentação.",
        "assessment": "A biblioteca de componentes é bem estruturada e documentada, mostrando alta viabilidade para adoção dentro da organização.",
        "maturityAssessment": "A biblioteca é altamente otimizada, com excelente qualidade de código, cobertura de teste abrangente e um processo de contribuição simplificado."
      }
    }
  }
}

/// services/gemini/api.ts ///
import { GoogleGenAI } from "@google/genai";
import { AnalysisType, EvolutionAnalysis, HistoryItem, ProjectAnalysis } from "../../types";
import { getAnalysisPrompt, getEvolutionPrompt } from "./prompts";
import { evolutionAnalysisSchema, projectAnalysisSchema } from "./schemas";
import { handleGeminiError, parseJsonResponse } from "./utils";

/**
 * Analyzes a project context using the Gemini API.
 * @param projectContext The context of the project to analyze.
 * @param analysisType The type of analysis to perform.
 * @param locale The desired language for the response.
 * @param apiKey The user's Gemini API key.
 * @returns A promise that resolves to the project analysis.
 */
export const analyzeProject = async (
  projectContext: string,
  analysisType: AnalysisType,
  locale: 'pt-BR' | 'en-US',
  apiKey: string,
): Promise<ProjectAnalysis> => {
  try {
    const ai = new GoogleGenAI({ apiKey });
    const prompt = getAnalysisPrompt(projectContext, analysisType, locale);

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: projectAnalysisSchema,
      },
    });

    const usageMetadata = response.usageMetadata;
    const analysisResult = parseJsonResponse<ProjectAnalysis>(response.text || '{}', 'ProjectAnalysis');

    // Add usage metadata to the result
    if (usageMetadata) {
      analysisResult.usageMetadata = {
        promptTokenCount: usageMetadata.promptTokenCount || 0,
        candidatesTokenCount: usageMetadata.candidatesTokenCount || 0,
        totalTokenCount: usageMetadata.totalTokenCount || 0,
      };
    }

    return analysisResult;
  } catch (error) {
    handleGeminiError(error);
    // handleGeminiError throws, so this is for type safety.
    throw error;
  }
};

/**
 * Compares two history items to generate an evolution analysis using the Gemini API.
 * @param item1 The first history item.
 * @param item2 The second history item.
 * @param locale The desired language for the response.
 * @param apiKey The user's Gemini API key.
 * @returns A promise that resolves to the evolution analysis.
 */
export const compareAnalyses = async (
  item1: HistoryItem,
  item2: HistoryItem,
  locale: 'pt-BR' | 'en-US',
  apiKey: string,
): Promise<EvolutionAnalysis> => {
  try {
    const ai = new GoogleGenAI({ apiKey });
    const prompt = getEvolutionPrompt(item1, item2, locale);

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: evolutionAnalysisSchema,
      },
    });

    const usageMetadata = response.usageMetadata;
    const evolutionResult = parseJsonResponse<EvolutionAnalysis>(response.text || '{}', 'EvolutionAnalysis');

    if (usageMetadata) {
      evolutionResult.usageMetadata = {
        promptTokenCount: usageMetadata.promptTokenCount || 0,
        candidatesTokenCount: usageMetadata.candidatesTokenCount || 0,
        totalTokenCount: usageMetadata.totalTokenCount || 0,
      };
    }

    return evolutionResult;

  } catch (error) {
    handleGeminiError(error);
    throw error;
  }
};

/// services/gemini/index.ts ///
export * from './api';

/// services/gemini/prompts.ts ///

import { 
    AnalysisType, 
    HistoryItem,
    Priority,
    MaturityLevel
// FIX: Corrected import path for types to point to the index file inside the types directory.
} from '../../types';

export const getAnalysisPrompt = (projectContext: string, analysisType: AnalysisType, locale: 'pt-BR' | 'en-US'): string => {
    const language = locale === 'pt-BR' ? 'Portuguese (Brazil)' : 'English (US)';
    const typeDescriptions: Record<AnalysisType, string> = {
        [AnalysisType.General]: "a comprehensive overview, including strengths, weaknesses, viability, and potential ROI.",
        [AnalysisType.Security]: "potential security vulnerabilities, risks, and best practices for mitigation.",
        [AnalysisType.Scalability]: "bottlenecks, architecture limitations, and strategies for improving scalability and performance under load.",
        [AnalysisType.CodeQuality]: "code structure, maintainability, adherence to best practices, and suggestions for refactoring.",
    };
    const analysisFocus = typeDescriptions[analysisType];

    return `
      You are a world-class senior software architect and project management consultant. Your task is to analyze a software project based on the provided context.
      The user has requested a "${analysisType}" analysis, which should focus on ${analysisFocus}.

      The response language MUST be ${language}.
      
      **Crucial Instruction**: For any fields that expect an enum value (like 'priority', 'difficulty', 'estimatedEffort', 'level'), you MUST use one of the following exact string values. Do not translate these values, even if the response language is not English.
      - Priority/Difficulty/Effort values: ${Object.values(Priority).join(', ')}
      - Maturity Level values: ${Object.values(MaturityLevel).join(', ')}

      Project Context:
      \`\`\`
      ${projectContext}
      \`\`\`

      Analyze the project context thoroughly and provide a detailed, insightful, and actionable report.
      - **Summary**: A concise executive summary of your findings.
      - **Strengths**: A list of key positive aspects.
      - **Improvements**: A prioritized list of areas for improvement. For each, provide a clear title, description, priority, difficulty, and its business impact.
      - **Next Steps**: Concrete short-term and long-term actions.
      - **Viability**: An overall viability score from 1 (very low) to 10 (excellent) and a justification.
      - **ROI Analysis**: An assessment of the a potential return on investment for implementing the suggested improvements, including potential gains and estimated effort.
      - **Maturity Level**: Assess the project's current maturity based on the context. The level must be one of the specified enum values. Provide a brief justification in the assessment.

      Your response MUST be a valid JSON object that strictly adheres to the provided schema. Do not include any text, notes, or explanations outside of the JSON structure.
    `;
};

export const getEvolutionPrompt = (item1: HistoryItem, item2: HistoryItem, locale: 'pt-BR' | 'en-US'): string => {
    const language = locale === 'pt-BR' ? 'Portuguese (Brazil)' : 'English (US)';
    const [older, newer] = [item1, item2].sort((a, b) => a.id - b.id);

    return `
      You are a senior project analyst. Your task is to compare two analyses of the same project, conducted at different times, and generate an evolution report.
      The response language MUST be ${language}.
      
      **Crucial Instruction**: For any fields named 'priority' or 'difficulty' in the generated lists (resolved, new, persistent improvements), you MUST use one of the following exact string values: ${Object.values(Priority).join(', ')}. Do not translate these values.

      The project is "${newer.projectName}" and the analysis type is "${newer.analysisType}".

      **Analysis 1 (Older - from ${older.timestamp}):**
      \`\`\`json
      ${JSON.stringify(older.analysis, null, 2)}
      \`\`\`

      **Analysis 2 (Newer - from ${newer.timestamp}):**
      \`\`\`json
      ${JSON.stringify(newer.analysis, null, 2)}
      \`\`\`

      Based on these two analyses, provide a detailed evolution report.
      - **evolutionSummary**: A summary describing the project's evolution, highlighting key changes, progress, and new challenges.
      - **keyMetrics**: Calculate the changes in key metrics: viability score, number of strengths, and number of improvements.
      - **resolvedImprovements**: Identify improvements from the older analysis that are no longer present in the newer one. Assume they have been resolved.
      - **newImprovements**: Identify improvements present in the newer analysis that were not in the older one.
      - **persistentImprovements**: Identify improvements that are present in both analyses.

      Your response MUST be a valid JSON object that strictly adheres to the provided schema. Do not include any text, notes, or explanations outside of the JSON structure.
    `;
};

/// services/gemini/schemas.ts ///

import { Type } from "@google/genai";
import { 
    AnalysisType,
    Priority,
    Difficulty,
    Effort,
    MaturityLevel
// FIX: Corrected import path for types to point to the index file inside the types directory.
} from '../../types';

// Schemas for JSON response
export const improvementSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING },
        description: { type: Type.STRING },
        priority: { type: Type.STRING, enum: Object.values(Priority) },
        difficulty: { type: Type.STRING, enum: Object.values(Difficulty) },
        businessImpact: { type: Type.STRING },
    },
    required: ['title', 'description', 'priority', 'difficulty', 'businessImpact'],
};

export const nextStepSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING },
        description: { type: Type.STRING },
        difficulty: { type: Type.STRING, enum: Object.values(Difficulty) },
    },
    required: ['title', 'description', 'difficulty'],
};

export const projectAnalysisSchema = {
    type: Type.OBJECT,
    properties: {
        projectName: { type: Type.STRING },
        analysisType: { type: Type.STRING, enum: Object.values(AnalysisType) },
        summary: { type: Type.STRING },
        strengths: { type: Type.ARRAY, items: { type: Type.STRING } },
        improvements: { type: Type.ARRAY, items: improvementSchema },
        nextSteps: {
            type: Type.OBJECT,
            properties: {
                shortTerm: { type: Type.ARRAY, items: nextStepSchema },
                longTerm: { type: Type.ARRAY, items: nextStepSchema },
            },
            required: ['shortTerm', 'longTerm'],
        },
        viability: {
            type: Type.OBJECT,
            properties: {
                score: { type: Type.INTEGER, description: 'An integer score from 1 to 10.' },
                assessment: { type: Type.STRING },
            },
            required: ['score', 'assessment'],
        },
        roiAnalysis: {
            type: Type.OBJECT,
            properties: {
                assessment: { type: Type.STRING },
                potentialGains: { type: Type.ARRAY, items: { type: Type.STRING } },
                estimatedEffort: { type: Type.STRING, enum: Object.values(Effort) },
            },
            required: ['assessment', 'potentialGains', 'estimatedEffort'],
        },
        maturity: {
            type: Type.OBJECT,
            properties: {
                level: { type: Type.STRING, enum: Object.values(MaturityLevel) },
                assessment: { type: Type.STRING },
            },
            required: ['level', 'assessment'],
        },
    },
    required: ['projectName', 'analysisType', 'summary', 'strengths', 'improvements', 'nextSteps', 'viability', 'roiAnalysis', 'maturity'],
};

export const evolutionAnalysisSchema = {
    type: Type.OBJECT,
    properties: {
        projectName: { type: Type.STRING },
        analysisType: { type: Type.STRING, enum: Object.values(AnalysisType) },
        evolutionSummary: { type: Type.STRING },
        keyMetrics: {
            type: Type.OBJECT,
            properties: {
                previousScore: { type: Type.INTEGER },
                currentScore: { type: Type.INTEGER },
                scoreChange: { type: Type.NUMBER },
                previousStrengths: { type: Type.INTEGER },
                currentStrengths: { type: Type.INTEGER },
                previousImprovements: { type: Type.INTEGER },
                currentImprovements: { type: Type.INTEGER },
            },
            required: ['previousScore', 'currentScore', 'scoreChange', 'previousStrengths', 'currentStrengths', 'previousImprovements', 'currentImprovements'],
        },
        resolvedImprovements: { type: Type.ARRAY, items: improvementSchema },
        newImprovements: { type: Type.ARRAY, items: improvementSchema },
        persistentImprovements: { type: Type.ARRAY, items: improvementSchema },
    },
    required: ['projectName', 'analysisType', 'evolutionSummary', 'keyMetrics', 'resolvedImprovements', 'newImprovements', 'persistentImprovements'],
};

/// services/gemini/utils.ts ///
export const parseJsonResponse = <T>(responseText: string, schemaType: string): T => {
    try {
        // As per documentation, response.text is the correct way to get the content, which might need cleaning.
        const cleanedJson = responseText.replace(/```json/g, '').replace(/```/g, '').trim();
        return JSON.parse(cleanedJson) as T;
    } catch (error) {
        console.error(`Error parsing ${schemaType} JSON:`, error);
        console.error("Invalid JSON string:", responseText);
        throw new Error(`Failed to parse the analysis response. The format was invalid.`);
    }
};

export const handleGeminiError = (error: any) => {
    console.error("Gemini API Error:", error);
    const message = error.toString();

    // FIX: Updated API key error message to avoid prompting user for input.
    if (message.includes("API key not valid")) {
        throw new Error("Your Gemini API key is invalid. Please check it in your profile.");
    }
    if (message.includes("Billing") || message.includes("billing")) {
        throw new Error("There seems to be a billing issue with your Google Cloud project for the Gemini API.");
    }
    if (message.includes("SAFETY")) {
        throw new Error("The response was blocked due to safety settings. Please modify your input.");
    }

    throw new Error("An unexpected error occurred with the Gemini API.");
};

/// tsconfig.json ///
{
  "compilerOptions": {
    "target": "ES2022",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "strict": true,
    "module": "ESNext",
    "lib": [
      "ES2022",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    "types": [
      "vite/client"
    ],
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "moduleDetection": "force",
    "allowJs": true,
    "jsx": "react-jsx",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "allowImportingTsExtensions": true,
    "noEmit": true
  }
}

/// types/index.ts ///
import * as React from 'react';

export enum Priority {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export enum Difficulty {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export enum Effort {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
}

export enum AnalysisType {
  General = 'General',
  Security = 'Security',
  Scalability = 'Scalability',
  CodeQuality = 'CodeQuality',
}

export enum MaturityLevel {
  Prototype = 'Prototype',
  MVP = 'MVP',
  Production = 'Production',
  Optimized = 'Optimized',
}

export interface Improvement {
  title: string;
  description: string;
  priority: Priority;
  difficulty: Difficulty;
  businessImpact: string;
}

export interface NextStep {
  title: string;
  description: string;
  difficulty: Difficulty;
}

export interface UsageMetadata {
  promptTokenCount: number;
  candidatesTokenCount: number;
  totalTokenCount: number;
}

export interface ProjectMaturity {
  level: MaturityLevel;
  assessment: string;
}

export interface ProjectAnalysis {
  projectName: string;
  analysisType: AnalysisType;
  summary: string;
  strengths: string[];
  improvements: Improvement[];
  nextSteps: {
    shortTerm: NextStep[];
    longTerm: NextStep[];
  };
  viability: {
    score: number;
    assessment: string;
  };
  roiAnalysis: {
    assessment: string;
    potentialGains: string[];
    estimatedEffort: Effort;
  };
  maturity: ProjectMaturity;
  usageMetadata?: UsageMetadata;
}

export interface HistoryItem {
  id: number;
  projectName: string;
  analysisType: AnalysisType;
  timestamp: string;
  analysis: ProjectAnalysis;
  projectContext: string;
}

export interface KeyMetrics {
  previousScore: number;
  currentScore: number;
  scoreChange: number;
  previousStrengths: number;
  currentStrengths: number;
  previousImprovements: number;
  currentImprovements: number;
}

export interface EvolutionAnalysis {
  projectName: string;
  analysisType: AnalysisType;
  evolutionSummary: string;
  keyMetrics: KeyMetrics;
  resolvedImprovements: Improvement[];
  newImprovements: Improvement[];
  persistentImprovements: Improvement[];
  usageMetadata?: UsageMetadata;
}

export type ViewType = 'dashboard' | 'input' | 'results' | 'kanban' | 'evolution';

export interface AppSettings {
  tokenLimit: number; // 0 for no limit
}

export interface UsageTracking {
  month: number;
  year: number;
  totalTokens: number;
}

export interface UserProfile {
  name: string;
  apiKey?: string;
}

export interface AnalysisOption {
  type: AnalysisType;
  label: string;
  description: string;
  icon: React.ElementType;
  color: string;
}

export interface KanbanCardData {
  id: string;
  title: string;
  difficulty: Difficulty;
  priority?: Priority;
}

export type KanbanColumnId = 'backlog' | 'todo' | 'inProgress' | 'done';

export interface KanbanColumn {
  title: string;
  cards: KanbanCardData[];
}

// FIX: Corrected typo from KanbonColumnId to KanbanColumnId.
export type KanbanState = Record<KanbanColumnId, KanbanColumn>;

export type NotificationType = 'success' | 'error' | 'info';

export interface Notification {
  id: number;
  message: string;
  type: NotificationType;
  duration?: number;
}

// Re-exporting providers for convenience from App.tsx
export { AuthProvider } from '../contexts/AuthContext';
export { LanguageProvider } from '../contexts/LanguageContext';
export { NotificationProvider } from '../contexts/NotificationContext';

/// vite.config.ts ///
import path from 'path';
import { defineConfig, loadEnv } from 'vite';

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, '.', '');
  return {
    define: {
      /*

      Environment variables for the Application
      They are all prefixed with "process.env." to be compatible with libraries that expect this format.

      !!!!! DON'T LET THEM LEAK INTO THE FRONTEND CODE !!!!
      !!!!! THEY SHOULD ONLY BE USED IN SERVER-SIDE CODE !!!!!

      */
      'process.env.API_KEY': JSON.stringify(env.GRT_API_KEY || ''),
      'process.env.PORT': JSON.stringify(env.PORT || '3000'),
      'process.env.MAX_RETRIES': JSON.stringify(env.MAX_RETRIES || '3'),
      'process.env.RETRY_DELAY_MS': JSON.stringify(env.RETRY_DELAY_MS || '1000'),
      'process.env.DEBUG': JSON.stringify(env.DEBUG || 'false'),
      'process.env.TEST_MODE': JSON.stringify(env.TEST_MODE || 'false'),
      'process.env.LOG_LEVEL': JSON.stringify(env.LOG_LEVEL || 'info'),
      'process.env.SECURITY_ENABLED': JSON.stringify(env.SECURITY_ENABLED || 'true'),
      'process.env.RATE_LIMIT': JSON.stringify(env.RATE_LIMIT || '100'),
      'process.env.RATE_LIMIT_WINDOW': JSON.stringify(env.RATE_LIMIT_WINDOW || '1m'),

      // 'process.env.CORS_ORIGIN': JSON.stringify(env.CORS_ORIGIN || '*'),
      // 'process.env.CORS_CREDENTIALS': JSON.stringify(env.CORS_CREDENTIALS || 'true'),

      'process.env.OPENAI_API_KEY': JSON.stringify(env.OPENAI_API_KEY || ''),
      'process.env.CHATGPT_API_KEY': JSON.stringify(env.CHATGPT_API_KEY || ''),
      'process.env.ANTHROPIC_API_KEY': JSON.stringify(env.ANTHROPIC_API_KEY || ''),
      'process.env.DEEPSEEK_API_KEY': JSON.stringify(env.DEEPSEEK_API_KEY || ''),
      'process.env.OLLAMA_API_KEY': JSON.stringify(env.OLLAMA_API_KEY || ''),
      'process.env.OLLAMA_API_URL': JSON.stringify(env.OLLAMA_API_URL || ''),
      'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY || ''),

      // 'process.env.GOOGLE_AI_STUDIO_API_KEY': JSON.stringify(env.GOOGLE_AI_STUDIO_API_KEY || ''),
      // 'process.env.GOOGLE_ANALYTICS_API_KEY': JSON.stringify(env.GOOGLE_ANALYTICS_API_KEY || ''),

      // 'process.env.PINECONE_API_KEY': JSON.stringify(env.PINECONE_API_KEY || ''),
      // 'process.env.GITHUB_PAT_TOKEN': JSON.stringify(env.GITHUB_PAT_TOKEN || ''),

      // 'process.env.VITE_SUPABASE_URL': JSON.stringify(env.VITE_SUPABASE_URL || ''),
      // 'process.env.VITE_SUPABASE_ANON_KEY': JSON.stringify(env.VITE_SUPABASE_ANON_KEY || ''),
      // 'process.env.VITE_SUPABASE_SERVICE_ROLE_KEY': JSON.stringify(env.VITE_SUPABASE_SERVICE_ROLE_KEY || ''),
      // 'process.env.VITE_SUPABASE_BEARER_TOKEN': JSON.stringify(env.VITE_SUPABASE_BEARER_TOKEN || ''),
      // 'process.env.VITE_SUPABASE_FALLBACK_ENABLE': JSON.stringify(env.VITE_SUPABASE_FALLBACK_ENABLE || 'false'),
      // 'process.env.VITE_SUPABASE_FALLBACK_URL': JSON.stringify(env.VITE_SUPABASE_FALLBACK_URL || ''),
      // 'process.env.VITE_SUPABASE_FALLBACK_ANON_KEY': JSON.stringify(env.VITE_SUPABASE_FALLBACK_ANON_KEY || ''),

      // 'process.env.POSTGRES_HOST': JSON.stringify(env.POSTGRES_HOST || ''),
      // 'process.env.POSTGRES_PORT': JSON.stringify(env.POSTGRES_PORT || ''),
      // 'process.env.POSTGRES_USER': JSON.stringify(env.POSTGRES_USER || ''),
      // 'process.env.POSTGRES_PASSWORD': JSON.stringify(env.POSTGRES_PASSWORD || ''),
      // 'process.env.POSTGRES_DB': JSON.stringify(env.POSTGRES_DB || ''),
      // 'process.env.POSTGRES_SSL': JSON.stringify(env.POSTGRES_SSL || ''),
      // 'process.env.POSTGRES_MAX_CLIENTS': JSON.stringify(env.POSTGRES_MAX_CLIENTS || ''),

      // 'process.env.REDIS_HOST': JSON.stringify(env.REDIS_HOST || ''),
      // 'process.env.REDIS_PORT': JSON.stringify(env.REDIS_PORT || ''),
      // 'process.env.REDIS_PASSWORD': JSON.stringify(env.REDIS_PASSWORD || ''),
      // 'process.env.REDIS_SENTINEL_ENABLED': JSON.stringify(env.REDIS_SENTINEL_ENABLED || ''),
      // 'process.env.REDIS_SENTINEL_HOST': JSON.stringify(env.REDIS_SENTINEL_HOST || ''),
      // 'process.env.REDIS_SENTINEL_PORT': JSON.stringify(env.REDIS_SENTINEL_PORT || ''),
      // 'process.env.REDIS_SENTINEL_MASTER_NAME': JSON.stringify(env.REDIS_SENTINEL_MASTER_NAME || ''),

      // 'process.env.RABBITMQ_HOST': JSON.stringify(env.RABBITMQ_HOST || ''),
      // 'process.env.RABBITMQ_PORT': JSON.stringify(env.RABBITMQ_PORT || ''),
      // 'process.env.RABBITMQ_USER': JSON.stringify(env.RABBITMQ_USER || ''),
      // 'process.env.RABBITMQ_PASSWORD': JSON.stringify(env.RABBITMQ_PASSWORD || ''),
      // 'process.env.RABBITMQ_VHOST': JSON.stringify(env.RABBITMQ_VHOST || ''),
      // 'process.env.RABBITMQ_QUEUE_NAME': JSON.stringify(env.RABBITMQ_QUEUE_NAME || ''),
      // 'process.env.RABBITMQ_QUEUE_DURABLE': JSON.stringify(env.RABBITMQ_QUEUE_DURABLE || ''),
      // 'process.env.RABBITMQ_QUEUE_AUTO_DELETE': JSON.stringify(env.RABBITMQ_QUEUE_AUTO_DELETE || ''),

      // 'process.env.MONGODB_URI': JSON.stringify(env.MONGODB_URI || ''),
      // 'process.env.MONGODB_DB': JSON.stringify(env.MONGODB_DB || ''),
      // 'process.env.MONGODB_USER': JSON.stringify(env.MONGODB_USER || ''),
      // 'process.env.MONGODB_PASSWORD': JSON.stringify(env.MONGODB_PASSWORD || ''),
      // 'process.env.MONGODB_AUTH_SOURCE': JSON.stringify(env.MONGODB_AUTH_SOURCE || ''),
      // 'process.env.MONGODB_SSL': JSON.stringify(env.MONGODB_SSL || ''),
      // 'process.env.MONGODB_REPLICA_SET': JSON.stringify(env.MONGODB_REPLICA_SET || ''),
      // 'process.env.MONGODB_MAX_POOL_SIZE': JSON.stringify(env.MONGODB_MAX_POOL_SIZE || ''),
      // 'process.env.MONGODB_MIN_POOL_SIZE': JSON.stringify(env.MONGODB_MIN_POOL_SIZE || ''),
      // 'process.env.MONGODB_CONNECT_TIMEOUT_MS': JSON.stringify(env.MONGODB_CONNECT_TIMEOUT_MS || ''),
      // 'process.env.MONGODB_SOCKET_TIMEOUT_MS': JSON.stringify(env.MONGODB_SOCKET_TIMEOUT_MS || ''),
      // 'process.env.MONGODB_SERVER_SELECTION_TIMEOUT_MS': JSON.stringify(env.MONGODB_SERVER_SELECTION_TIMEOUT_MS || ''),
      // 'process.env.MONGODB_HEARTBEAT_FREQUENCY_MS': JSON.stringify(env.MONGODB_HEARTBEAT_FREQUENCY_MS || ''),

      // 'process.env.BACKUP_ENABLED': JSON.stringify(env.BACKUP_ENABLED || ''),
      // 'process.env.BACKUP_SCHEDULE': JSON.stringify(env.BACKUP_SCHEDULE || ''),
      // 'process.env.BACKUP_RETENTION': JSON.stringify(env.BACKUP_RETENTION || ''),
      // 'process.env.BACKUP_PATH': JSON.stringify(env.BACKUP_PATH || ''),

      // 'process.env.SMTP_HOST': JSON.stringify(env.SMTP_HOST || ''),
      // 'process.env.SMTP_PORT': JSON.stringify(env.SMTP_PORT || ''),
      // 'process.env.SMTP_USER': JSON.stringify(env.SMTP_USER || ''),
      // 'process.env.SMTP_PASSWORD': JSON.stringify(env.SMTP_PASSWORD || ''),
      // 'process.env.SMTP_FROM': JSON.stringify(env.SMTP_FROM || ''),
      // 'process.env.SMTP_FROM_NAME': JSON.stringify(env.SMTP_FROM_NAME || '')
    },
    resolve: {
      alias: {
        '@': path.resolve(__dirname, '.'),
      }
    },
    build: {
      rollupOptions: {
        onwarn: (warning, warn) => {
          // Suppress "use client" warnings from framer-motion
          if (warning.code === 'MODULE_LEVEL_DIRECTIVE' && 
              warning.message.includes('use client')) {
            return;
          }
          warn(warning);
        },
        output: {
          manualChunks: {
            vendor: [
              'react',
              'react-dom'
            ],
          },
        },
      },
      chunkSizeWarningLimit: 1512,
    },
  };
});
