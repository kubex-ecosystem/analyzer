name: 'Kubex GemX Analyzer Production Environment'

services:
  gemx-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
    image: gemx-analyzer:latest
    container_name: gemx-analyzer
    ports:
      - "8080:8080"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GO_ENV=production
    volumes:
      - ./config:/app/config:ro
    networks:
      - analyzer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analyzer.rule=Host(`analyzer.local`)"
      - "traefik.http.services.analyzer.loadbalancer.server.port=8080"

  # Optional: Redis for caching (future use)
  redis:
    image: redis:7-alpine
    container_name: analyzer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - analyzer-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    profiles:
      - cache

  # Optional: Prometheus for metrics (future use)
  prometheus:
    image: prom/prometheus:latest
    container_name: analyzer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - analyzer-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Optional: Grafana for dashboards (future use)
  grafana:
    image: grafana/grafana:latest
    container_name: analyzer-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - analyzer-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  analyzer-network:
    driver: bridge
